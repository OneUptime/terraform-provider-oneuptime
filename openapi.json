{
  "openapi": "3.0.0",
  "info": {
    "title": "OneUptime OpenAPI Specification",
    "version": "1.0.0",
    "description": "OpenAPI specification for OneUptime. This document describes the API endpoints, request and response formats, and other details necessary for developers to interact with the OneUptime API."
  },
  "servers": [
    {
      "url": "http:///api",
      "description": "API Server"
    }
  ],
  "tags": [
    {
      "name": "Alert",
      "description": "Manage alerts for your project"
    },
    {
      "name": "Alert Custom Field",
      "description": "Manage custom fields for your alert."
    },
    {
      "name": "Alert Feed",
      "description": "Log of the entire alert state change. This is a log of all the alert state changes, public notes, more etc."
    },
    {
      "name": "Alert Internal Note",
      "description": "Manage internal notes for your alert"
    },
    {
      "name": "Alert Note Template",
      "description": "Manage alert note templates for your project"
    },
    {
      "name": "Alert Severity",
      "description": "Manage alert severity for your project (Created, Acknowledged for example). Add / edit or remove severities."
    },
    {
      "name": "Alert State",
      "description": "Manage alert states for your project (Created, Acknowledged for example). Add / edit or remove states."
    },
    {
      "name": "Alert State Timeline",
      "description": "Change state of the alerts (Created to Acknowledged for example)"
    },
    {
      "name": "Alert Team Owner",
      "description": "Add teams as owners to your alerts."
    },
    {
      "name": "Alert User Owner",
      "description": "Add users as owners to your alerts."
    },
    {
      "name": "API Key",
      "description": "Manage API Keys for your project"
    },
    {
      "name": "API Key Permission",
      "description": "Permissions for your API Keys"
    },
    {
      "name": "Call Log",
      "description": "Logs of all the Call sent out to all users and subscribers for this project."
    },
    {
      "name": "Code Repository",
      "description": "A Code Repository is a place where you can store your code and collaborate with others. You can connect your Git Repository to OneUptime and we will improve your code automatically for you."
    },
    {
      "name": "Copilot Action Priority",
      "description": "Priority of Copilot Actions"
    },
    {
      "name": "Copilot Event",
      "description": "Copilot Event Resource"
    },
    {
      "name": "Copilot Pull Request",
      "description": "List of pull requests created by Copilot and status of those requests."
    },
    {
      "name": "Dashboard",
      "description": "Create and manage Dashboards to visualize your data in a single place"
    },
    {
      "name": "Domain",
      "description": "Manage Custom Domains for your project"
    },
    {
      "name": "Email Log",
      "description": "Logs of all the Email sent out to all users and subscribers for this project."
    },
    {
      "name": "Escalation Rule",
      "description": "Manage on-call duty escalation rule for the on-call policy."
    },
    {
      "name": "Exception",
      "description": "List of all Telemetry Exceptions created for the telemetry service for this OneUptime project and it's status."
    },
    {
      "name": "Exception Instance",
      "description": "API endpoints for Exception Instance"
    },
    {
      "name": "Incident",
      "description": "Manage incidents for your project"
    },
    {
      "name": "Incident Custom Field",
      "description": "Manage custom fields for your incident."
    },
    {
      "name": "Incident Feed",
      "description": "Log of the entire incident state change. This is a log of all the incident state changes, public notes, more etc."
    },
    {
      "name": "Incident Internal Note",
      "description": "Manage internal notes for your incident"
    },
    {
      "name": "Incident Note Template",
      "description": "Manage incident note templates for your project"
    },
    {
      "name": "Incident Public Note",
      "description": "Manage public notes for your incident"
    },
    {
      "name": "Incident Severity",
      "description": "Manage incident severity for your project (Created, Acknowledged for example). Add / edit or remove severities."
    },
    {
      "name": "Incident State",
      "description": "Manage incident states for your project (Created, Acknowledged for example). Add / edit or remove states."
    },
    {
      "name": "Incident State Timeline",
      "description": "Change state of the incidents (Created to Acknowledged for example)"
    },
    {
      "name": "Incident Team Owner",
      "description": "Add teams as owners to your incidents."
    },
    {
      "name": "Incident Template",
      "description": "Manage incident templates for your project"
    },
    {
      "name": "Incident Template Team Owner",
      "description": "Add teams as owners to your incidents."
    },
    {
      "name": "Incident Template User Owner",
      "description": "Add users as owners to your incident templates."
    },
    {
      "name": "Incident User Owner",
      "description": "Add users as owners to your incidents."
    },
    {
      "name": "Label",
      "description": "Organize resources for your project by using labels / tags."
    },
    {
      "name": "Log",
      "description": "API endpoints for Log"
    },
    {
      "name": "Metric",
      "description": "API endpoints for Metric"
    },
    {
      "name": "Metric Type",
      "description": "List of all the metrics ingested with OpenTelemetry"
    },
    {
      "name": "Monitor",
      "description": "Monitor is anything that monitors your API, Websites, IP, Network or more. You can also create static monitor that does not monitor anything."
    },
    {
      "name": "Monitor Custom Field",
      "description": "Manage custom fields for your monitor"
    },
    {
      "name": "Monitor Feed",
      "description": "Log of the entire monitor state change. This is a log of all the monitor state changes, public notes, more etc."
    },
    {
      "name": "Monitor Group",
      "description": "Monitor Groups are a way to organize your monitors into groups. You can create as many groups as you want and add as many monitors as you want to each group."
    },
    {
      "name": "Monitor Group Resource",
      "description": "Add monitors to your monitor group"
    },
    {
      "name": "Monitor Group Team Owner",
      "description": "Add teams as owners to your monitor groups."
    },
    {
      "name": "Monitor Group User Owner",
      "description": "Add users as owners to your monitor group."
    },
    {
      "name": "Monitor Log",
      "description": "API endpoints for Monitor Log"
    },
    {
      "name": "Monitor Probe",
      "description": "Add probes to monitor your resource from multiple locations around the world."
    },
    {
      "name": "Monitor Secret",
      "description": "Monitor Secret is a secret variable that can be used in monitors. For example you can store auth tokens, passwords, etc. in Monitor Secret and use them in your monitors. Monitor Secret is encrypted and only accessible by the probe."
    },
    {
      "name": "Monitor Status",
      "description": "Manage monitor status in your project. Monitor Status are Operational, Degraded and Offline for example. Add custom status like Monitoring or more."
    },
    {
      "name": "Monitor Status Event",
      "description": "Change state of the monitor (Operational to Offline for example)"
    },
    {
      "name": "Monitor Team Owner",
      "description": "Add teams as owners to your monitors."
    },
    {
      "name": "Monitor User Owner",
      "description": "Add users as owners to your monitors."
    },
    {
      "name": "On Call Duty Policy Feed",
      "description": "Log of the entire onCallDutyPolicy state change. This is a log of all the on call duty policy changes."
    },
    {
      "name": "On Call Time Log",
      "description": "Manage on-call duty user overrides, for example if the user is on leave you can override the on-call duty policy for that user so all the alerts will be routed to the other user."
    },
    {
      "name": "On-Call Duty Execution Log",
      "description": "Logs for on-call duty policy execution."
    },
    {
      "name": "On-Call Duty Execution Log Timeline",
      "description": "Timeline events for on-call duty policy execution log."
    },
    {
      "name": "On-Call Policy",
      "description": "Manage on-call duty, schedules and roster for your project"
    },
    {
      "name": "On-Call Policy Custom Field",
      "description": "Manage custom fields for your on-call policy"
    },
    {
      "name": "On-Call Policy Schedule",
      "description": "Manage schedules and rotations for your on-call duty policy."
    },
    {
      "name": "On-Call Schedule Layer",
      "description": "On-Call Schedule Layers"
    },
    {
      "name": "On-Call Schedule Layer User",
      "description": "On-Call Schedule Layer Users"
    },
    {
      "name": "OnCallDutyPolicy Team Owner",
      "description": "Add teams as owners to your onCallDutyPolicys."
    },
    {
      "name": "OnCallDutyPolicy User Owner",
      "description": "Add users as owners to your onCallDutyPolicys."
    },
    {
      "name": "Probe",
      "description": "Manages custom probes. Deploy probes anywhere in the world and connect it to your project."
    },
    {
      "name": "Probe Owner Team",
      "description": "Add teams as owners to your probes."
    },
    {
      "name": "Probe User Owner",
      "description": "Add users as owners to your probes."
    },
    {
      "name": "Project",
      "description": "OneUptime Project, and everything happens inside it"
    },
    {
      "name": "Schedule's On-Call Duty Escalation Rule",
      "description": "Manage schedules for on-call duty policy escalation rules."
    },
    {
      "name": "Scheduled Event Public Note",
      "description": "Manage public notes for your scheduled event"
    },
    {
      "name": "Scheduled Maintenance Custom Field",
      "description": "Manage custom fields for your scheduled event"
    },
    {
      "name": "Scheduled Maintenance Event",
      "description": "Manage scheduled maintenance event for your project"
    },
    {
      "name": "Scheduled Maintenance Feed",
      "description": "Log of the entire scheduled maintenance state change. This is a log of all the scheduled maintenance state changes, public notes, more etc."
    },
    {
      "name": "Scheduled Maintenance Note Template",
      "description": "Manage scheduled maintenance note templates for your project"
    },
    {
      "name": "Scheduled Maintenance State",
      "description": "Manage different scheduled maintenance state to your project (Scheduled, Ongoing, Completed for example)"
    },
    {
      "name": "Scheduled Maintenance State Timeline",
      "description": "Change state of your scheduled maintenance event."
    },
    {
      "name": "Scheduled Maintenance Team Owner",
      "description": "Add teams as owners to your Scheduled Maintenance event."
    },
    {
      "name": "Scheduled Maintenance Template",
      "description": "Manage scheduled maintenance templates for your project"
    },
    {
      "name": "Scheduled Maintenance Template Team Owner",
      "description": "Add teams as owners to your Scheduled Maintenance Template."
    },
    {
      "name": "Scheduled Maintenance Template User Owner",
      "description": "Add users as owners to your scheduled maintenance template."
    },
    {
      "name": "Scheduled Maintenance User Owner",
      "description": "Add users as owners to your scheduled maintenance event."
    },
    {
      "name": "Service Catalog Monitor",
      "description": "List of monitor - service catalog relationship."
    },
    {
      "name": "Service Catalog Team Owner",
      "description": "Add teams as owners to your Service Catalog."
    },
    {
      "name": "Service Catalog Telemetry Service",
      "description": "List of telemetry service - service catalog relationship."
    },
    {
      "name": "Service Catalog User Owner",
      "description": "Add users as owners to your Service Catalog."
    },
    {
      "name": "Service Code Repository for Copilot",
      "description": "Add services to your code repository to categorize and manage them easily. This will help copilot understand and generate code."
    },
    {
      "name": "Service Dependency",
      "description": "Service Catalog is a collection of services that you have in your organization. It can be a collection of services that you are monitoring or services that you are providing to your customers. It can be anything that you want to keep track of."
    },
    {
      "name": "Service in Service Catalog",
      "description": "Service Catalog is a collection of services that you have in your organization. It can be a collection of services that you are monitoring or services that you are providing to your customers. It can be anything that you want to keep track of."
    },
    {
      "name": "SMS Log",
      "description": "Logs of all the SMS sent out to all users and subscribers for this project."
    },
    {
      "name": "Span",
      "description": "API endpoints for Span"
    },
    {
      "name": "Status Page",
      "description": "Manage status pages for your project."
    },
    {
      "name": "Status Page Announcement",
      "description": "Manage announcements on your status page"
    },
    {
      "name": "Status Page Announcement Template",
      "description": "Manage announcement templates for your status page"
    },
    {
      "name": "Status Page Custom Field",
      "description": "Manage custom fields on your status page"
    },
    {
      "name": "Status Page Domain",
      "description": "Manage custom domains for your status page"
    },
    {
      "name": "Status Page Footer Link",
      "description": "Manage footer links on your status page"
    },
    {
      "name": "Status Page Group",
      "description": "Manage groups on your status page and categorize resources like monitors into these groups."
    },
    {
      "name": "Status Page Header Link",
      "description": "Manage header links on your status page"
    },
    {
      "name": "Status Page History Chart Bar Color",
      "description": "Modify the colors of the history chart bars on Status Page"
    },
    {
      "name": "Status Page Private User",
      "description": " Manage private users on your status page"
    },
    {
      "name": "Status Page Resource",
      "description": "Add resources like monitors to your status page"
    },
    {
      "name": "Status Page SSO",
      "description": "Configure Status Page SSO"
    },
    {
      "name": "Status Page Subscriber",
      "description": "Subscriber that subscribed to your status page"
    },
    {
      "name": "Status Page Team Owner",
      "description": "Add teams as owners to your Status Page."
    },
    {
      "name": "Status Page User Owner",
      "description": "Add users as owners to your Status Page."
    },
    {
      "name": "Table View",
      "description": "Table View is view settings for a table in a project. It contains columns, filters, and other settings."
    },
    {
      "name": "Team",
      "description": "Teams lets your organize users of your project into groups and lets you assign different level of permissions."
    },
    {
      "name": "Team Member",
      "description": "This model connects users and teams"
    },
    {
      "name": "Team On-Call Duty Escalation Rule",
      "description": "Manage on-call duty escalation rule for the on-call policy."
    },
    {
      "name": "Team Permission",
      "description": "Permissions for your OneUptime team"
    },
    {
      "name": "Telemetry Attribute",
      "description": "API endpoints for Telemetry Attribute"
    },
    {
      "name": "Telemetry Ingestion Key",
      "description": "Manage Telemetry Ingestion Keys for your project"
    },
    {
      "name": "Telemetry Service",
      "description": "Telemetry Services are the services that you can use to monitor your services. You can create multiple Telemetry Services and use them to monitor your services."
    },
    {
      "name": "Two Factor Auth",
      "description": "Two Factor Authentication for users"
    },
    {
      "name": "User",
      "description": "A signed up or invited OneUptime user."
    },
    {
      "name": "User Notification Log",
      "description": "Log events for user notifications"
    },
    {
      "name": "User On-Call Log Timeline",
      "description": "Timeline events for user on-call log."
    },
    {
      "name": "User Override",
      "description": "Manage on-call duty user overrides, for example if the user is on leave you can override the on-call duty policy for that user so all the alerts will be routed to the other user."
    },
    {
      "name": "User's On-Call Duty Escalation Rule",
      "description": "Manage on-call duty escalation rule for the on-call policy."
    },
    {
      "name": "Workflow",
      "description": "Integrate your OneUptime project with rest of your software stack."
    },
    {
      "name": "Workflow Log",
      "description": "Logs of the workflows executed"
    },
    {
      "name": "Workflow Variable",
      "description": "Store environment variables or secrets for your workflows."
    },
    {
      "name": "Workspace Notification Rule",
      "description": "Notification Rule for Third Party Workspaces"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "name": {
            "type": "object",
            "description": "Name object",
            "example": {
              "_type": "Name",
              "value": "John Doe"
            }
          },
          "email": {
            "type": "object",
            "description": "Email object",
            "example": {
              "_type": "Email",
              "value": "user@example.com"
            }
          },
          "newUnverifiedTemporaryEmail": {
            "type": "object",
            "description": "Email object",
            "example": {
              "_type": "Email",
              "value": "user@example.com"
            }
          },
          "password": {
            "type": "string",
            "description": "Permissions - Create: [Public], Read: [Logged in User], Update: [Logged in User]",
            "example": "hashed_string_value"
          },
          "isEmailVerified": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "companyName": {
            "type": "string",
            "description": "Permissions - Create: [Public], Read: [Logged in User], Update: [Logged in User]",
            "example": "Example short text"
          },
          "jobRole": {
            "type": "string",
            "description": "Permissions - Create: [Public], Read: [Logged in User], Update: [Logged in User]",
            "example": "Example short text"
          },
          "companySize": {
            "type": "string",
            "description": "Permissions - Create: [Public], Read: [Logged in User], Update: [Logged in User]",
            "example": "Example short text"
          },
          "referral": {
            "type": "string",
            "description": "Permissions - Create: [Public], Read: [Logged in User], Update: [Logged in User]",
            "example": "Example short text"
          },
          "companyPhoneNumber": {
            "type": "object",
            "description": "Phone object",
            "example": {
              "_type": "Phone",
              "value": "+1-555-123-4567"
            }
          },
          "profilePictureFile": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [Logged in User]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "profilePictureId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "twoFactorAuthEnabled": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [Logged in User]",
            "example": true
          },
          "backupCodes": {
            "type": "array",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "items": {
              "type": "string"
            },
            "example": [
              "item1",
              "item2",
              "item3"
            ]
          },
          "timezone": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [Logged in User]",
            "example": "Example short text"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Customer Support], Update: [Customer Support]",
            "example": true
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Customer Support], Update: [Customer Support]",
            "example": true
          },
          "alertPhoneNumber": {
            "type": "object",
            "description": "Phone object",
            "example": {
              "_type": "Phone",
              "value": "+1-555-123-4567"
            }
          },
          "enableTwoFactorAuth": {
            "type": "boolean",
            "description": "Permissions - Create: [Logged in User], Read: [Logged in User], Update: [Logged in User]",
            "example": true
          }
        },
        "required": [
          "email",
          "twoFactorAuthEnabled",
          "isDisabled",
          "isBlocked"
        ]
      },
      "UserQuerySchema": {
        "type": "object",
        "description": "Query schema for User. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "UserSelectSchema": {
        "type": "object",
        "description": "Select schema for User. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "email": true,
          "newUnverifiedTemporaryEmail": true,
          "companyName": true,
          "jobRole": true
        },
        "additionalProperties": false
      },
      "UserSortSchema": {
        "type": "object",
        "description": "Sort schema for User. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "UserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for User. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Probe": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "key": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe], Read: [Project Owner, Project Admin], Update: [Project Owner, Project Admin, Project Member, Edit Probe]",
            "example": "Example short text"
          },
          "name": {
            "type": "object",
            "description": "Name object",
            "example": {
              "_type": "Name",
              "value": "John Doe"
            }
          },
          "description": {
            "type": "object",
            "description": "Name object",
            "example": {
              "_type": "Name",
              "value": "John Doe"
            }
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Public], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "probeVersion": {
            "type": "object",
            "description": "Version object",
            "example": {
              "_type": "Version",
              "value": "1.0.0"
            }
          },
          "lastAlive": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "iconFile": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "iconFileId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe], Read: [Public], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe], Read: [Project Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "shouldAutoEnableProbeOnNewMonitors": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "connectionStatus": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          }
        },
        "required": [
          "key",
          "name",
          "slug",
          "probeVersion",
          "shouldAutoEnableProbeOnNewMonitors"
        ]
      },
      "ProbeCreateSchema": {
        "type": "object",
        "description": "Create schema for Probe model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ProbeReadSchema": {
        "type": "object",
        "description": "Read schema for Probe model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ProbeUpdateSchema": {
        "type": "object",
        "description": "Update schema for Probe model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ProbeDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Probe model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ProbeQuerySchema": {
        "type": "object",
        "description": "Query schema for Probe. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ProbeSelectSchema": {
        "type": "object",
        "description": "Select schema for Probe. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "key": true,
          "name": true,
          "description": true,
          "connectionStatus": true
        },
        "additionalProperties": false
      },
      "ProbeSortSchema": {
        "type": "object",
        "description": "Sort schema for Probe. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ProbeGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Probe. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Project": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing, Edit Project]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "paymentProviderPlanId": {
            "type": "string",
            "description": "Permissions - Create: [Logged in User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner]",
            "example": "Example short text"
          },
          "paymentProviderSubscriptionId": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "paymentProviderMeteredSubscriptionId": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "paymentProviderSubscriptionSeats": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": 42
          },
          "trialEndsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "paymentProviderCustomerId": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "paymentProviderSubscriptionStatus": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "paymentProviderMeteredSubscriptionStatus": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "paymentProviderPromoCode": {
            "type": "string",
            "description": "Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Logged in User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isFeatureFlagMonitorGroupsEnabled": {
            "type": "boolean",
            "description": "Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing, Edit Project]",
            "example": true
          },
          "workflowRunsInLast30Days": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Read Workflow], Update: [No access - you don't have permission for this operation]",
            "example": 42
          },
          "requireSsoForLogin": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Project Admin, Edit Project]",
            "example": true
          },
          "smsOrCallCurrentBalanceInUSDCents": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project], Update: [No access - you don't have permission for this operation]",
            "example": 42
          },
          "autoRechargeSmsOrCallByBalanceInUSD": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project], Update: [Project Owner, Manage Billing]",
            "example": 42
          },
          "autoRechargeSmsOrCallWhenCurrentBalanceFallsInUSD": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project], Update: [Project Owner, Manage Billing]",
            "example": 42
          },
          "enableSmsNotifications": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing]",
            "example": true
          },
          "enableCallNotifications": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing]",
            "example": true
          },
          "enableAutoRechargeSmsOrCallBalance": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing]",
            "example": true
          },
          "planName": {
            "type": "string",
            "description": "Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "reseller": {
            "type": "object",
            "description": "Permissions - Create: [User], Read: [Project Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "resellerId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "resellerPlan": {
            "type": "object",
            "description": "Permissions - Create: [User], Read: [Project Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "resellerPlanId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "letCustomerSupportAccessProject": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project], Update: [Project Owner, Project Admin]",
            "example": true
          }
        },
        "required": [
          "name",
          "slug",
          "requireSsoForLogin",
          "smsOrCallCurrentBalanceInUSDCents",
          "autoRechargeSmsOrCallByBalanceInUSD",
          "autoRechargeSmsOrCallWhenCurrentBalanceFallsInUSD",
          "enableSmsNotifications",
          "enableCallNotifications",
          "enableAutoRechargeSmsOrCallBalance"
        ]
      },
      "ProjectCreateSchema": {
        "type": "object",
        "description": "Create schema for Project model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ProjectReadSchema": {
        "type": "object",
        "description": "Read schema for Project model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ProjectUpdateSchema": {
        "type": "object",
        "description": "Update schema for Project model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ProjectDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Project model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ProjectQuerySchema": {
        "type": "object",
        "description": "Query schema for Project. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ProjectSelectSchema": {
        "type": "object",
        "description": "Select schema for Project. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "paymentProviderPlanId": true,
          "paymentProviderSubscriptionId": true,
          "paymentProviderMeteredSubscriptionId": true,
          "paymentProviderCustomerId": true
        },
        "additionalProperties": false
      },
      "ProjectSortSchema": {
        "type": "object",
        "description": "Sort schema for Project. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ProjectGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Project. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Team": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isPermissionsEditable": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Edit Team, Edit Team Permissions], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isTeamDeleteable": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Edit Team, Edit Team Permissions], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldHaveAtLeastOneMember": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Edit Team, Edit Team Permissions], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isTeamEditable": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Edit Team, Edit Team Permissions], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "name",
          "slug"
        ]
      },
      "TeamCreateSchema": {
        "type": "object",
        "description": "Create schema for Team model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "TeamReadSchema": {
        "type": "object",
        "description": "Read schema for Team model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "TeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for Team model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "TeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Team model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "TeamQuerySchema": {
        "type": "object",
        "description": "Query schema for Team. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "TeamSelectSchema": {
        "type": "object",
        "description": "Select schema for Team. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "TeamSortSchema": {
        "type": "object",
        "description": "Sort schema for Team. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Team. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "TeamMember": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Invite New Members], Read: [Project Owner, Project Admin, Project Member, Read Teams, Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Invite New Members], Read: [Project Owner, Project Admin, Project Member, Read Teams, Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Invite New Members], Read: [Project Owner, Project Admin, Read Teams, Project Member], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "hasAcceptedInvitation": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Invite New Members], Read: [Project Owner, Project Admin, Project Member, Read Teams, Logged in User], Update: [Logged in User]",
            "example": true
          },
          "invitationAcceptedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "userId",
          "hasAcceptedInvitation"
        ]
      },
      "TeamMemberCreateSchema": {
        "type": "object",
        "description": "Create schema for TeamMember model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "TeamMemberReadSchema": {
        "type": "object",
        "description": "Read schema for TeamMember model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "TeamMemberUpdateSchema": {
        "type": "object",
        "description": "Update schema for TeamMember model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "TeamMemberDeleteSchema": {
        "type": "object",
        "description": "Delete schema for TeamMember model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "TeamMemberQuerySchema": {
        "type": "object",
        "description": "Query schema for TeamMember. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "TeamMemberSelectSchema": {
        "type": "object",
        "description": "Select schema for TeamMember. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "TeamMemberSortSchema": {
        "type": "object",
        "description": "Sort schema for TeamMember. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TeamMemberGroupBySchema": {
        "type": "object",
        "description": "Group by schema for TeamMember. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "TeamPermission": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "permission": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Invite New Members, Edit Team Permissions, Edit Team]",
            "example": {
              "read": true,
              "write": false,
              "delete": false
            }
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team Permissions, Edit Team]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "isBlockPermission": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team Permissions, Edit Team]",
            "example": true
          }
        },
        "required": [
          "projectId"
        ]
      },
      "TeamPermissionCreateSchema": {
        "type": "object",
        "description": "Create schema for TeamPermission model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "TeamPermissionReadSchema": {
        "type": "object",
        "description": "Read schema for TeamPermission model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "TeamPermissionUpdateSchema": {
        "type": "object",
        "description": "Update schema for TeamPermission model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "TeamPermissionDeleteSchema": {
        "type": "object",
        "description": "Delete schema for TeamPermission model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "TeamPermissionQuerySchema": {
        "type": "object",
        "description": "Query schema for TeamPermission. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "TeamPermissionSelectSchema": {
        "type": "object",
        "description": "Select schema for TeamPermission. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "TeamPermissionSortSchema": {
        "type": "object",
        "description": "Sort schema for TeamPermission. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TeamPermissionGroupBySchema": {
        "type": "object",
        "description": "Group by schema for TeamPermission. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Read API Key], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "expiresAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "apiKey": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "expiresAt"
        ]
      },
      "ApiKeyCreateSchema": {
        "type": "object",
        "description": "Create schema for ApiKey model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ApiKeyReadSchema": {
        "type": "object",
        "description": "Read schema for ApiKey model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ApiKeyUpdateSchema": {
        "type": "object",
        "description": "Update schema for ApiKey model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ApiKeyDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ApiKey model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ApiKeyQuerySchema": {
        "type": "object",
        "description": "Query schema for ApiKey. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ApiKeySelectSchema": {
        "type": "object",
        "description": "Select schema for ApiKey. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "ApiKeySortSchema": {
        "type": "object",
        "description": "Sort schema for ApiKey. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ApiKeyGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ApiKey. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Label": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [Project Owner, Project Admin, Edit Label]",
            "example": "Example short text"
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [Project Owner, Project Admin, Edit Label]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "color": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          }
        },
        "required": [
          "name",
          "projectId",
          "slug",
          "color"
        ]
      },
      "LabelCreateSchema": {
        "type": "object",
        "description": "Create schema for Label model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "LabelReadSchema": {
        "type": "object",
        "description": "Read schema for Label model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "LabelUpdateSchema": {
        "type": "object",
        "description": "Update schema for Label model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "LabelDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Label model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "LabelQuerySchema": {
        "type": "object",
        "description": "Query schema for Label. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "LabelSelectSchema": {
        "type": "object",
        "description": "Select schema for Label. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "LabelSortSchema": {
        "type": "object",
        "description": "Sort schema for Label. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "LabelGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Label. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ApiKeyPermission": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "apiKey": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "apiKeyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "permission": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
            "example": {
              "read": true,
              "write": false,
              "delete": false
            }
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "isBlockPermission": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
            "example": true
          }
        },
        "required": [
          "apiKeyId",
          "projectId"
        ]
      },
      "ApiKeyPermissionCreateSchema": {
        "type": "object",
        "description": "Create schema for ApiKeyPermission model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ApiKeyPermissionReadSchema": {
        "type": "object",
        "description": "Read schema for ApiKeyPermission model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ApiKeyPermissionUpdateSchema": {
        "type": "object",
        "description": "Update schema for ApiKeyPermission model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ApiKeyPermissionDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ApiKeyPermission model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ApiKeyPermissionQuerySchema": {
        "type": "object",
        "description": "Query schema for ApiKeyPermission. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ApiKeyPermissionSelectSchema": {
        "type": "object",
        "description": "Select schema for ApiKeyPermission. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ApiKeyPermissionSortSchema": {
        "type": "object",
        "description": "Sort schema for ApiKeyPermission. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ApiKeyPermissionGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ApiKeyPermission. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPage": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "Example short text"
          },
          "pageTitle": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "Example short text"
          },
          "pageDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "faviconFile": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "faviconFileId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "logoFile": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "logoFileId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "coverImageFile": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "coverImageFileId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "headerHTML": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "<div><h1>Title</h1><p>Content</p></div>"
          },
          "footerHTML": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "<div><h1>Title</h1><p>Content</p></div>"
          },
          "customCSS": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "body { color: #333; margin: 0; }"
          },
          "customJavaScript": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "function example() { return true; }"
          },
          "isPublicStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "showIncidentLabelsOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "showScheduledEventLabelsOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "enableSubscribers": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "enableEmailSubscribers": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "allowSubscribersToChooseResources": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "allowSubscribersToChooseEventTypes": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "enableSmsSubscribers": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "enableSlackSubscribers": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "copyrightText": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "Example short text"
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "requireSsoForLogin": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page, Public], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "smtpConfig": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "smtpConfigId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "callSmsConfig": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "callSmsConfigId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotifiedOfResourceCreation": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "showIncidentHistoryInDays": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": 42
          },
          "showAnnouncementHistoryInDays": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": 42
          },
          "showScheduledEventHistoryInDays": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": 42
          },
          "overviewPageDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "hidePoweredByOneUptimeBranding": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "defaultBarColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "downtimeMonitorStatuses": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "subscriberTimezones": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isReportEnabled": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "reportStartDateTime": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "reportRecurringInterval": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "sendNextReportBy": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "reportDataInDays": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": 42
          },
          "showOverallUptimePercentOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "overallUptimePercentPrecision": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "Example short text"
          },
          "subscriberEmailNotificationFooterText": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "showIncidentsOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "showAnnouncementsOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "showScheduledMaintenanceEventsOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "showSubscriberPageOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": true
          },
          "ipWhitelist": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "requireSsoForLogin",
          "isOwnerNotifiedOfResourceCreation",
          "showIncidentHistoryInDays",
          "showAnnouncementHistoryInDays",
          "showScheduledEventHistoryInDays"
        ]
      },
      "StatusPageCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPage model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPage model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPage model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPage model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPage. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPage. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "pageTitle": true,
          "copyrightText": true,
          "overallUptimePercentPrecision": true
        },
        "additionalProperties": false
      },
      "StatusPageSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPage. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPage. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicy": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
            "example": "Example short text"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "repeatPolicyIfNoOneAcknowledges": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
            "example": true
          },
          "repeatPolicyIfNoOneAcknowledgesNoOfTimes": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
            "example": true
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "repeatPolicyIfNoOneAcknowledges",
          "repeatPolicyIfNoOneAcknowledgesNoOfTimes"
        ]
      },
      "OnCallDutyPolicyCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicy model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicy model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicy model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicy model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicy. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicySelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicy. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicySortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicy. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicy. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomField": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [Project Owner, Project Admin, Edit On-Call Policy Custom Field]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [Project Owner, Project Admin, Edit On-Call Policy Custom Field]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "type": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [No access - you don't have permission for this operation]",
            "example": {
              "type": "text",
              "required": true
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "OnCallDutyPolicyCustomFieldCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyCustomField model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomFieldReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyCustomField model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomFieldUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyCustomField model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomFieldDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyCustomField model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomFieldQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyCustomField. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomFieldSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyCustomField. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomFieldSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyCustomField. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyCustomFieldGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyCustomField. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRule": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "escalateAfterInMinutes": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
            "example": 42
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "name"
        ]
      },
      "OnCallDutyPolicyEscalationRuleCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyEscalationRule model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyEscalationRule model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyEscalationRule model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyEscalationRule model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyEscalationRule. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyEscalationRule. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyEscalationRule. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyEscalationRule. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyEscalationRule": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "onCallDutyPolicyEscalationRuleId"
        ]
      },
      "OnCallDutyPolicyEscalationRuleTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyEscalationRuleTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeamReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyEscalationRuleTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyEscalationRuleTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyEscalationRuleTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyEscalationRuleTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyEscalationRuleTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyEscalationRuleTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyEscalationRuleTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule User], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule User], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyEscalationRule": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule User], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule User], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule User], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "onCallDutyPolicyEscalationRuleId"
        ]
      },
      "OnCallDutyPolicyEscalationRuleUserCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyEscalationRuleUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUserReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyEscalationRuleUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyEscalationRuleUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyEscalationRuleUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUserQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyEscalationRuleUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUserSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyEscalationRuleUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUserSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyEscalationRuleUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyEscalationRuleUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByIncident": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByIncidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByAlert": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByAlertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "userNotificationEventType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "acknowledgedByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "acknowledgedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "acknowledgedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "acknowledgedByTeamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "lastExecutedEscalationRule": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "lastExecutedEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "status",
          "statusMessage",
          "userNotificationEventType"
        ]
      },
      "OnCallDutyPolicyExecutionLogCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyExecutionLog model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyExecutionLog model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyExecutionLog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyExecutionLog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "status": true,
          "userNotificationEventType": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyExecutionLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyExecutionLog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogTimeline": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByIncident": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByIncidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByAlert": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByAlertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyExecutionLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyExecutionLogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyEscalationRule": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alertSentToUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userNotificationEventType": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "alertSentToUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userBelongsToTeam": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userBelongsToTeamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutySchedule": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyScheduleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "status": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isAcknowledged": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "acknowledgedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "overridedByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "overridedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "onCallDutyPolicyExecutionLogId",
          "onCallDutyPolicyEscalationRuleId",
          "userNotificationEventType",
          "statusMessage",
          "status"
        ]
      },
      "OnCallDutyPolicyExecutionLogTimelineReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyExecutionLogTimeline model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogTimelineQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyExecutionLogTimeline. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogTimelineSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyExecutionLogTimeline. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "userNotificationEventType": true,
          "status": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogTimelineSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyExecutionLogTimeline. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyExecutionLogTimelineGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyExecutionLogTimeline. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverride": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy User Override], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy User Override], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy User Override], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy User Override], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy User Override], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy User Override], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "overrideUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy User Override], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy User Override], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "overrideUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "routeAlertsToUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy User Override], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy User Override], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "routeAlertsToUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "endsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "overrideUserId",
          "routeAlertsToUserId",
          "startsAt",
          "endsAt"
        ]
      },
      "OnCallDutyPolicyUserOverrideCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyUserOverride model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverrideReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyUserOverride model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverrideUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyUserOverride model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverrideDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyUserOverride model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverrideQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyUserOverride. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverrideSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyUserOverride. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverrideSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyUserOverride. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyUserOverrideGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyUserOverride. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Monitor": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "monitorType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": "HTTP"
          },
          "currentMonitorStatus": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "currentMonitorStatusId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitorSteps": {
            "type": "object",
            "description": "MonitorSteps object",
            "example": {
              "_type": "MonitorSteps",
              "value": {
                "monitorStepsInstanceArray": []
              }
            }
          },
          "monitoringInterval": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
            "example": "Example short text"
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isOwnerNotifiedOfResourceCreation": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "disableActiveMonitoring": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Create Monitor]",
            "example": true
          },
          "incomingRequestMonitorHeartbeatCheckedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "telemetryMonitorNextMonitorAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "telemetryMonitorLastMonitorAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "disableActiveMonitoringBecauseOfScheduledMaintenanceEvent": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "disableActiveMonitoringBecauseOfManualIncident": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "serverMonitorRequestReceivedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "serverMonitorSecretKey": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incomingRequestSecretKey": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incomingMonitorRequest": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "serverMonitorResponse": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isAllProbesDisconnectedFromThisMonitor": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isNoProbeEnabledOnThisMonitor": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "monitorType",
          "currentMonitorStatusId",
          "isOwnerNotifiedOfResourceCreation",
          "disableActiveMonitoring",
          "disableActiveMonitoringBecauseOfScheduledMaintenanceEvent",
          "disableActiveMonitoringBecauseOfManualIncident"
        ]
      },
      "MonitorCreateSchema": {
        "type": "object",
        "description": "Create schema for Monitor model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorReadSchema": {
        "type": "object",
        "description": "Read schema for Monitor model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorUpdateSchema": {
        "type": "object",
        "description": "Update schema for Monitor model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Monitor model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorQuerySchema": {
        "type": "object",
        "description": "Query schema for Monitor. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorSelectSchema": {
        "type": "object",
        "description": "Select schema for Monitor. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "monitoringInterval": true
        },
        "additionalProperties": false
      },
      "MonitorSortSchema": {
        "type": "object",
        "description": "Sort schema for Monitor. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Monitor. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorSecret": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "monitors": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Read Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "MonitorSecretCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorSecret model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorSecretReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorSecret model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorSecretUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorSecret model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorSecretDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorSecret model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorSecretQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorSecret. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorSecretSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorSecret. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "MonitorSecretSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorSecret. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorSecretGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorSecret. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorStatus": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "color": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "isOperationalState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
            "example": true
          },
          "isOfflineState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
            "example": true
          },
          "priority": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "color"
        ]
      },
      "MonitorStatusCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorStatus model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorStatusReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorStatus model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorStatusUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorStatus model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorStatusDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorStatus model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorStatusQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorStatus. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorStatusSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorStatus. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "MonitorStatusSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorStatus. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorStatusGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorStatus. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorCustomField": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [Project Owner, Project Admin, Edit Monitor Custom Field]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [Project Owner, Project Admin, Edit Monitor Custom Field]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "type": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [No access - you don't have permission for this operation]",
            "example": {
              "type": "text",
              "required": true
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "MonitorCustomFieldCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorCustomField model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorCustomFieldReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorCustomField model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorCustomFieldUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorCustomField model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorCustomFieldDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorCustomField model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorCustomFieldQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorCustomField. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorCustomFieldSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorCustomField. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "MonitorCustomFieldSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorCustomField. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorCustomFieldGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorCustomField. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentState": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "color": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "isCreatedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
            "example": true
          },
          "isAcknowledgedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
            "example": true
          },
          "isResolvedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
            "example": true
          },
          "order": {
            "type": "integer",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
            "example": 10
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "color"
        ]
      },
      "IncidentStateCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentState model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentStateReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentState model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentStateUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentState model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentStateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentState model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentStateQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentState. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentStateSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentState. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "IncidentStateSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentState. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentStateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentState. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Incident": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitors": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "onCallDutyPolicies": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "currentIncidentState": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "currentIncidentStateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incidentSeverity": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentSeverityId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "changeMonitorStatusTo": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "changeMonitorStatusToId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isStatusPageSubscribersNotifiedOnIncidentCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedOnIncidentCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isOwnerNotifiedOfResourceCreation": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "rootCause": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "createdStateLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "createdCriteriaId": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdIncidentTemplateId": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByProbe": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByProbeId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isCreatedAutomatically": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "remediationNotes": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "telemetryQuery": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "incidentNumber": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
            "example": 42
          },
          "isVisibleOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "title",
          "slug",
          "currentIncidentStateId",
          "incidentSeverityId",
          "isOwnerNotifiedOfResourceCreation"
        ]
      },
      "IncidentCreateSchema": {
        "type": "object",
        "description": "Create schema for Incident model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentReadSchema": {
        "type": "object",
        "description": "Read schema for Incident model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentUpdateSchema": {
        "type": "object",
        "description": "Update schema for Incident model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Incident model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentQuerySchema": {
        "type": "object",
        "description": "Query schema for Incident. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentSelectSchema": {
        "type": "object",
        "description": "Select schema for Incident. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentSortSchema": {
        "type": "object",
        "description": "Sort schema for Incident. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Incident. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentFeed": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incident": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "feedInfoInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "moreInformationInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "incidentFeedEventType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "displayColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "postedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "incidentId",
          "feedInfoInMarkdown",
          "incidentFeedEventType",
          "displayColor"
        ]
      },
      "IncidentFeedCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentFeed model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentFeedReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentFeed model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentFeedQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentFeed. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentFeedSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentFeed. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "incidentFeedEventType": true
        },
        "additionalProperties": false
      },
      "IncidentFeedSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentFeed. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentFeedGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentFeed. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentCustomField": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [Project Owner, Project Admin, Edit Incident Custom Field]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [Project Owner, Project Admin, Edit Incident Custom Field]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "type": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [No access - you don't have permission for this operation]",
            "example": {
              "type": "text",
              "required": true
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "IncidentCustomFieldCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentCustomField model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentCustomFieldReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentCustomField model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentCustomFieldUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentCustomField model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentCustomFieldDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentCustomField model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentCustomFieldQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentCustomField. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentCustomFieldSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentCustomField. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "IncidentCustomFieldSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentCustomField. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentCustomFieldGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentCustomField. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentStateTimeline": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incident": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incidentState": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [Project Owner, Project Admin, Project Member, Edit Incident State Timeline]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentStateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isStatusPageSubscribersNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "stateChangeLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "rootCause": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "endsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "incidentId",
          "incidentStateId",
          "isOwnerNotified"
        ]
      },
      "IncidentStateTimelineCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentStateTimeline model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentStateTimelineReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentStateTimeline model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentStateTimelineUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentStateTimeline model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentStateTimelineDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentStateTimeline model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentStateTimelineQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentStateTimeline. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentStateTimelineSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentStateTimeline. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentStateTimelineSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentStateTimeline. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentStateTimelineGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentStateTimeline. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentInternalNote": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Internal Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incident": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Internal Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Internal Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "note": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Internal Note], Update: [Project Owner, Project Admin, Project Member, Edit Incident Internal Note]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Internal Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "incidentId",
          "isOwnerNotified"
        ]
      },
      "IncidentInternalNoteCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentInternalNote model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentInternalNoteReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentInternalNote model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentInternalNoteUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentInternalNote model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentInternalNoteDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentInternalNote model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentInternalNoteQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentInternalNote. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentInternalNoteSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentInternalNote. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentInternalNoteSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentInternalNote. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentInternalNoteGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentInternalNote. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentPublicNote": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incident": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "note": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [Project Owner, Project Admin, Project Member, Edit Incident Status Page Note]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "isStatusPageSubscribersNotifiedOnNoteCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedOnNoteCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "postedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "incidentId",
          "isOwnerNotified"
        ]
      },
      "IncidentPublicNoteCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentPublicNote model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentPublicNoteReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentPublicNote model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentPublicNoteUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentPublicNote model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentPublicNoteDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentPublicNote model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentPublicNoteQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentPublicNote. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentPublicNoteSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentPublicNote. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentPublicNoteSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentPublicNote. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentPublicNoteGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentPublicNote. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentTemplate": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "templateName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "example": "Example short text"
          },
          "templateDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitors": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "onCallDutyPolicies": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "incidentSeverity": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentSeverityId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "changeMonitorStatusTo": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "changeMonitorStatusToId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "title",
          "templateName",
          "templateDescription",
          "slug"
        ]
      },
      "IncidentTemplateCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentTemplate model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentTemplateReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentTemplate model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentTemplateUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentTemplate model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentTemplateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentTemplate model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentTemplateQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentTemplate. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentTemplateSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentTemplate. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "templateName": true
        },
        "additionalProperties": false
      },
      "IncidentTemplateSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentTemplate. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentTemplateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentTemplate. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate Team Owner], Read: [Project Owner, Project Admin, Project Member, Read IncidentTemplate Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate Team Owner], Read: [Project Owner, Project Admin, Project Member, Read IncidentTemplate Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incidentTemplate": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate Team Owner], Read: [Project Owner, Project Admin, Project Member, Read IncidentTemplate Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentTemplateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate Team Owner], Read: [Project Owner, Project Admin, Project Member, Read IncidentTemplate Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate Team Owner], Read: [Project Owner, Project Admin, Project Member, Read IncidentTemplate Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "incidentTemplateId",
          "isOwnerNotified"
        ]
      },
      "IncidentTemplateOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentTemplateOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentTemplateOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentTemplateOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentTemplateOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentTemplateOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentTemplateOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentTemplateOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentTemplateOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate User Owner], Read: [Project Owner, Project Admin, Project Member, Project Member, Read IncidentTemplate User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate User Owner], Read: [Project Owner, Project Admin, Project Member, Project Member, Read IncidentTemplate User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incidentTemplate": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate User Owner], Read: [Project Owner, Project Admin, Project Member, Project Member, Read IncidentTemplate User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentTemplateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate User Owner], Read: [Project Owner, Project Admin, Project Member, Project Member, Read IncidentTemplate User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create IncidentTemplate User Owner], Read: [Project Owner, Project Admin, Project Member, Project Member, Read IncidentTemplate User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "incidentTemplateId",
          "isOwnerNotified"
        ]
      },
      "IncidentTemplateOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentTemplateOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentTemplateOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentTemplateOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentTemplateOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentTemplateOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentTemplateOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentTemplateOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentTemplateOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentTemplateOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incident": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "incidentId",
          "isOwnerNotified"
        ]
      },
      "IncidentOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident User Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident User Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "incident": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident User Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "incidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident User Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident User Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "incidentId",
          "isOwnerNotified"
        ]
      },
      "IncidentOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "IncidentOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentSeverity": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "color": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "order": {
            "type": "integer",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
            "example": 10
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "color"
        ]
      },
      "IncidentSeverityCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentSeverity model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentSeverityReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentSeverity model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentSeverityUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentSeverity model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentSeverityDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentSeverity model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentSeverityQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentSeverity. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentSeveritySelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentSeverity. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "IncidentSeveritySortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentSeverity. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentSeverityGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentSeverity. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplate": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "note": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "templateName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
            "example": "Example short text"
          },
          "templateDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "templateName",
          "templateDescription"
        ]
      },
      "IncidentNoteTemplateCreateSchema": {
        "type": "object",
        "description": "Create schema for IncidentNoteTemplate model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplateReadSchema": {
        "type": "object",
        "description": "Read schema for IncidentNoteTemplate model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplateUpdateSchema": {
        "type": "object",
        "description": "Update schema for IncidentNoteTemplate model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for IncidentNoteTemplate model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplateQuerySchema": {
        "type": "object",
        "description": "Query schema for IncidentNoteTemplate. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplateSelectSchema": {
        "type": "object",
        "description": "Select schema for IncidentNoteTemplate. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "templateName": true
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplateSortSchema": {
        "type": "object",
        "description": "Sort schema for IncidentNoteTemplate. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "IncidentNoteTemplateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for IncidentNoteTemplate. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertState": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "color": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "isCreatedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
            "example": true
          },
          "isAcknowledgedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
            "example": true
          },
          "isResolvedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
            "example": true
          },
          "order": {
            "type": "integer",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
            "example": 10
          }
        },
        "required": [
          "projectId",
          "name",
          "color"
        ]
      },
      "AlertStateCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertState model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertStateReadSchema": {
        "type": "object",
        "description": "Read schema for AlertState model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertStateUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertState model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertStateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertState model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertStateQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertState. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertStateSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertState. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "AlertStateSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertState. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertStateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertState. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Alert": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicies": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "currentAlertState": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "currentAlertStateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alertSeverity": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "alertSeverityId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitorStatusWhenThisAlertWasCreated": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorStatusWhenThisAlertWasCreatedId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isOwnerNotifiedOfAlertCreation": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "rootCause": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "createdStateLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "createdCriteriaId": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByProbe": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByProbeId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isCreatedAutomatically": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "remediationNotes": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "telemetryQuery": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "alertNumber": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "title",
          "currentAlertStateId",
          "alertSeverityId",
          "isOwnerNotifiedOfAlertCreation"
        ]
      },
      "AlertCreateSchema": {
        "type": "object",
        "description": "Create schema for Alert model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertReadSchema": {
        "type": "object",
        "description": "Read schema for Alert model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertUpdateSchema": {
        "type": "object",
        "description": "Update schema for Alert model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Alert model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertQuerySchema": {
        "type": "object",
        "description": "Query schema for Alert. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertSelectSchema": {
        "type": "object",
        "description": "Select schema for Alert. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "AlertSortSchema": {
        "type": "object",
        "description": "Sort schema for Alert. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Alert. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertFeed": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alert": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "alertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "feedInfoInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "moreInformationInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "alertFeedEventType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "displayColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "postedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "alertId",
          "feedInfoInMarkdown",
          "alertFeedEventType",
          "displayColor"
        ]
      },
      "AlertFeedCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertFeed model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertFeedReadSchema": {
        "type": "object",
        "description": "Read schema for AlertFeed model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertFeedQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertFeed. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertFeedSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertFeed. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "alertFeedEventType": true
        },
        "additionalProperties": false
      },
      "AlertFeedSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertFeed. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertFeedGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertFeed. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertCustomField": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [Project Owner, Project Admin, Edit Alert Custom Field]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [Project Owner, Project Admin, Edit Alert Custom Field]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "type": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [No access - you don't have permission for this operation]",
            "example": {
              "type": "text",
              "required": true
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "AlertCustomFieldCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertCustomField model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertCustomFieldReadSchema": {
        "type": "object",
        "description": "Read schema for AlertCustomField model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertCustomFieldUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertCustomField model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertCustomFieldDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertCustomField model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertCustomFieldQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertCustomField. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertCustomFieldSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertCustomField. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "AlertCustomFieldSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertCustomField. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertCustomFieldGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertCustomField. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertStateTimeline": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alert": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "alertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alertState": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [Project Owner, Project Admin, Project Member, Edit  Alert State  Timeline]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "alertStateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "stateChangeLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "rootCause": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "endsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "alertId",
          "alertStateId",
          "isOwnerNotified"
        ]
      },
      "AlertStateTimelineCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertStateTimeline model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertStateTimelineReadSchema": {
        "type": "object",
        "description": "Read schema for AlertStateTimeline model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertStateTimelineUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertStateTimeline model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertStateTimelineDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertStateTimeline model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertStateTimelineQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertStateTimeline. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertStateTimelineSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertStateTimeline. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "AlertStateTimelineSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertStateTimeline. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertStateTimelineGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertStateTimeline. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertInternalNote": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Alert Internal Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alert": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Alert Internal Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "alertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Alert Internal Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "note": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Alert Internal Note], Update: [Project Owner, Project Admin, Project Member, Edit Alert Internal Note]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Alert Internal Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "alertId",
          "isOwnerNotified"
        ]
      },
      "AlertInternalNoteCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertInternalNote model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertInternalNoteReadSchema": {
        "type": "object",
        "description": "Read schema for AlertInternalNote model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertInternalNoteUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertInternalNote model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertInternalNoteDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertInternalNote model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertInternalNoteQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertInternalNote. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertInternalNoteSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertInternalNote. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "AlertInternalNoteSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertInternalNote. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertInternalNoteGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertInternalNote. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alert": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "alertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "alertId",
          "isOwnerNotified"
        ]
      },
      "AlertOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for AlertOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "AlertOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert User Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert User Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "alert": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert User Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "alertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert User Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert User Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "alertId",
          "isOwnerNotified"
        ]
      },
      "AlertOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for AlertOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "AlertOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertSeverity": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "color": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "order": {
            "type": "integer",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
            "example": 10
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "color"
        ]
      },
      "AlertSeverityCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertSeverity model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertSeverityReadSchema": {
        "type": "object",
        "description": "Read schema for AlertSeverity model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertSeverityUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertSeverity model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertSeverityDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertSeverity model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertSeverityQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertSeverity. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertSeveritySelectSchema": {
        "type": "object",
        "description": "Select schema for AlertSeverity. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "AlertSeveritySortSchema": {
        "type": "object",
        "description": "Sort schema for AlertSeverity. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertSeverityGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertSeverity. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "AlertNoteTemplate": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "note": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "templateName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
            "example": "Example short text"
          },
          "templateDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "templateName",
          "templateDescription"
        ]
      },
      "AlertNoteTemplateCreateSchema": {
        "type": "object",
        "description": "Create schema for AlertNoteTemplate model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "AlertNoteTemplateReadSchema": {
        "type": "object",
        "description": "Read schema for AlertNoteTemplate model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "AlertNoteTemplateUpdateSchema": {
        "type": "object",
        "description": "Update schema for AlertNoteTemplate model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "AlertNoteTemplateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for AlertNoteTemplate model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "AlertNoteTemplateQuerySchema": {
        "type": "object",
        "description": "Query schema for AlertNoteTemplate. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "AlertNoteTemplateSelectSchema": {
        "type": "object",
        "description": "Select schema for AlertNoteTemplate. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "templateName": true
        },
        "additionalProperties": false
      },
      "AlertNoteTemplateSortSchema": {
        "type": "object",
        "description": "Sort schema for AlertNoteTemplate. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "AlertNoteTemplateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for AlertNoteTemplate. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorStatusTimeline": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status Timeline], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status Timeline], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status Timeline], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitorStatus": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status Timeline], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status Timeline]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorStatusId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status Timeline], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "statusChangeLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "rootCause": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status Timeline], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "endsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "monitorId",
          "monitorStatusId",
          "isOwnerNotified"
        ]
      },
      "MonitorStatusTimelineCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorStatusTimeline model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorStatusTimelineReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorStatusTimeline model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorStatusTimelineUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorStatusTimeline model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorStatusTimelineDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorStatusTimeline model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorStatusTimelineQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorStatusTimeline. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorStatusTimelineSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorStatusTimeline. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "MonitorStatusTimelineSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorStatusTimeline. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorStatusTimelineGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorStatusTimeline. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Domain": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Domain], Read: [Project Owner, Project Admin, Project Member, Read Domain], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "domain": {
            "type": "object",
            "description": "Domain object",
            "example": {
              "_type": "Domain",
              "value": "example.com"
            }
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Domain], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Domain], Read: [Project Owner, Project Admin, Project Member, Read Domain], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Domain], Update: [Project Owner, Project Admin, Edit Domain]",
            "example": true
          },
          "domainVerificationText": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Domain], Read: [Project Owner, Project Admin, Project Member, Read Domain], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          }
        },
        "required": [
          "projectId",
          "domain",
          "slug"
        ]
      },
      "DomainCreateSchema": {
        "type": "object",
        "description": "Create schema for Domain model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "DomainReadSchema": {
        "type": "object",
        "description": "Read schema for Domain model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "DomainUpdateSchema": {
        "type": "object",
        "description": "Update schema for Domain model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "DomainDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Domain model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "DomainQuerySchema": {
        "type": "object",
        "description": "Query schema for Domain. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "DomainSelectSchema": {
        "type": "object",
        "description": "Select schema for Domain. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "domainVerificationText": true
        },
        "additionalProperties": false
      },
      "DomainSortSchema": {
        "type": "object",
        "description": "Sort schema for Domain. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "DomainGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Domain. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageGroup": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
            "example": 42
          },
          "isExpandedByDefault": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
            "example": true
          },
          "showCurrentStatus": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
            "example": true
          },
          "showUptimePercent": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
            "example": true
          },
          "uptimePercentPrecision": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
            "example": "Example short text"
          }
        },
        "required": [
          "projectId",
          "statusPageId",
          "name",
          "slug"
        ]
      },
      "StatusPageGroupCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageGroup model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageGroupReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageGroup model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageGroupUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageGroup model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageGroupDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageGroup model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageGroupQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageGroup. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageGroupSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageGroup. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "uptimePercentPrecision": true
        },
        "additionalProperties": false
      },
      "StatusPageGroupSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageGroup. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageGroupGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageGroup. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageDomain": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "domain": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "domainId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "subdomain": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
            "example": "Example short text"
          },
          "fullDomain": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isCnameVerified": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isSslOrdered": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isSslProvisioned": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "customCertificate": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "customCertificateKey": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "isCustomCertificate": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "domainId",
          "statusPageId",
          "subdomain",
          "fullDomain",
          "isCnameVerified",
          "isSslOrdered",
          "isSslProvisioned"
        ]
      },
      "StatusPageDomainCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageDomain model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageDomainReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageDomain model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageDomainUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageDomain model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageDomainDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageDomain model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageDomainQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageDomain. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageDomainSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageDomain. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "subdomain": true,
          "fullDomain": true,
          "cnameVerificationToken": true
        },
        "additionalProperties": false
      },
      "StatusPageDomainSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageDomain. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageDomainGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageDomain. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageCustomField": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [Project Owner, Project Admin, Edit Status Page Custom Field]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [Project Owner, Project Admin, Edit Status Page Custom Field]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "type": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [No access - you don't have permission for this operation]",
            "example": {
              "type": "text",
              "required": true
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "StatusPageCustomFieldCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageCustomField model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageCustomFieldReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageCustomField model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageCustomFieldUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageCustomField model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageCustomFieldDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageCustomField model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageCustomFieldQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageCustomField. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageCustomFieldSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageCustomField. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "StatusPageCustomFieldSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageCustomField. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageCustomFieldGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageCustomField. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageResource": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitorGroup": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorGroupId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPageGroup": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageGroupId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "displayName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": "Example short text"
          },
          "displayDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "displayTooltip": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "showCurrentStatus": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": true
          },
          "showUptimePercent": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": true
          },
          "uptimePercentPrecision": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": "Example short text"
          },
          "showStatusHistoryChart": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": true
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "statusPageId",
          "displayName"
        ]
      },
      "StatusPageResourceCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageResource model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageResourceReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageResource model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageResourceUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageResource model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageResourceDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageResource model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageResourceQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageResource. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageResourceSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageResource. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "displayName": true,
          "uptimePercentPrecision": true
        },
        "additionalProperties": false
      },
      "StatusPageResourceSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageResource. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageResourceGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageResource. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncement": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPages": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
            "example": "Example short text"
          },
          "showAnnouncementAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "endAnnouncementAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isStatusPageSubscribersNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "title",
          "showAnnouncementAt",
          "description",
          "isOwnerNotified"
        ]
      },
      "StatusPageAnnouncementCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageAnnouncement model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageAnnouncement model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageAnnouncement model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageAnnouncement model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageAnnouncement. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageAnnouncement. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "title": true
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageAnnouncement. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageAnnouncement. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplate": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "templateName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
            "example": "Example short text"
          },
          "templateDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "statusPages": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "shouldStatusPageSubscribersBeNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
            "example": true
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "templateName",
          "title",
          "description"
        ]
      },
      "StatusPageAnnouncementTemplateCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageAnnouncementTemplate model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplateReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageAnnouncementTemplate model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplateUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageAnnouncementTemplate model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageAnnouncementTemplate model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplateQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageAnnouncementTemplate. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplateSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageAnnouncementTemplate. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "templateName": true,
          "title": true
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplateSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageAnnouncementTemplate. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageAnnouncementTemplateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageAnnouncementTemplate. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageSubscriber": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "subscriberEmail": {
            "type": "object",
            "description": "Email object",
            "example": {
              "_type": "Email",
              "value": "user@example.com"
            }
          },
          "subscriberPhone": {
            "type": "object",
            "description": "Phone object",
            "example": {
              "_type": "Phone",
              "value": "+1-555-123-4567"
            }
          },
          "subscriberWebhook": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": "https://short.url/abc123"
          },
          "slackWorkspaceName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": "Example short text"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isSubscriptionConfirmed": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": true
          },
          "isUnsubscribed": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": true
          },
          "sendYouHaveSubscribedMessage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isSubscribedToAllResources": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": true
          },
          "isSubscribedToAllEventTypes": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": true
          },
          "statusPageResources": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "statusPageEventTypes": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "internalNote": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
            "example": "# Heading\n\nThis is **markdown** content"
          }
        },
        "required": [
          "projectId",
          "statusPageId"
        ]
      },
      "StatusPageSubscriberCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageSubscriber model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageSubscriberReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageSubscriber model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageSubscriberUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageSubscriber model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageSubscriberDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageSubscriber model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageSubscriberQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageSubscriber. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageSubscriberSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageSubscriber. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "subscriberEmail": true,
          "slackWorkspaceName": true,
          "subscriptionConfirmationToken": true
        },
        "additionalProperties": false
      },
      "StatusPageSubscriberSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageSubscriber. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageSubscriberGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageSubscriber. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageFooterLink": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
            "example": "Example short text"
          },
          "link": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
            "example": "https://short.url/abc123"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "statusPageId",
          "title",
          "link"
        ]
      },
      "StatusPageFooterLinkCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageFooterLink model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageFooterLinkReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageFooterLink model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageFooterLinkUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageFooterLink model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageFooterLinkDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageFooterLink model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageFooterLinkQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageFooterLink. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageFooterLinkSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageFooterLink. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "title": true
        },
        "additionalProperties": false
      },
      "StatusPageFooterLinkSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageFooterLink. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageFooterLinkGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageFooterLink. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLink": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
            "example": "Example short text"
          },
          "link": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
            "example": "https://short.url/abc123"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "statusPageId",
          "title",
          "link"
        ]
      },
      "StatusPageHeaderLinkCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageHeaderLink model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLinkReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageHeaderLink model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLinkUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageHeaderLink model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLinkDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageHeaderLink model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLinkQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageHeaderLink. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLinkSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageHeaderLink. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "title": true
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLinkSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageHeaderLink. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageHeaderLinkGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageHeaderLink. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "email": {
            "type": "object",
            "description": "Email object",
            "example": {
              "_type": "Email",
              "value": "user@example.com"
            }
          },
          "password": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [Project Owner, Project Admin, Project Member, Edit Status Page PrivateUser]",
            "example": "hashed_string_value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isSsoUser": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "statusPageId"
        ]
      },
      "StatusPagePrivateUserCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPagePrivateUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUserReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPagePrivateUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPagePrivateUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPagePrivateUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUserQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPagePrivateUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUserSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPagePrivateUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "email": true,
          "resetPasswordToken": true
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUserSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPagePrivateUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPagePrivateUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPagePrivateUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRule": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "uptimePercentGreaterThanOrEqualTo": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [Project Owner, Project Admin, Project Member, Edit Status Page History Chart Bar Color Rule]",
            "example": 42
          },
          "barColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [Project Owner, Project Admin, Project Member, Edit Status Page History Chart Bar Color Rule]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "statusPageId",
          "uptimePercentGreaterThanOrEqualTo",
          "barColor"
        ]
      },
      "StatusPageHistoryChartBarColorRuleCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageHistoryChartBarColorRule model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRuleReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageHistoryChartBarColorRule model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRuleUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageHistoryChartBarColorRule model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRuleDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageHistoryChartBarColorRule model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRuleQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageHistoryChartBarColorRule. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRuleSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageHistoryChartBarColorRule. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRuleSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageHistoryChartBarColorRule. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageHistoryChartBarColorRuleGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageHistoryChartBarColorRule. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceState": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "color": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "isScheduledState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
            "example": true
          },
          "isOngoingState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
            "example": true
          },
          "isEndedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
            "example": true
          },
          "isResolvedState": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
            "example": true
          },
          "order": {
            "type": "integer",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
            "example": 10
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "color"
        ]
      },
      "ScheduledMaintenanceStateCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceState model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceState model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceState model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceState model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceState. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceState. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceState. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceState. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenance": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitors": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "statusPages": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "currentScheduledMaintenanceState": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "currentScheduledMaintenanceStateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "changeMonitorStatusTo": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "changeMonitorStatusToId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "endsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "isStatusPageSubscribersNotifiedOnEventScheduled": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedOnEventCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToOngoing": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToEnded": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isOwnerNotifiedOfResourceCreation": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "sendSubscriberNotificationsOnBeforeTheEvent": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "nextSubscriberNotificationBeforeTheEventAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "scheduledMaintenanceNumber": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
            "example": 42
          },
          "isVisibleOnStatusPage": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "title",
          "slug",
          "currentScheduledMaintenanceStateId",
          "startsAt",
          "endsAt",
          "isOwnerNotifiedOfResourceCreation"
        ]
      },
      "ScheduledMaintenanceCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenance model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenance model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenance model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenance model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenance. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenance. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "title": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenance. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenance. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimeline": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenance": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenanceState": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State Timeline]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceStateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isStatusPageSubscribersNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "endsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "scheduledMaintenanceId",
          "scheduledMaintenanceStateId",
          "isOwnerNotified"
        ]
      },
      "ScheduledMaintenanceStateTimelineCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceStateTimeline model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimelineReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceStateTimeline model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimelineUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceStateTimeline model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimelineDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceStateTimeline model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimelineQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceStateTimeline. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimelineSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceStateTimeline. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimelineSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceStateTimeline. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceStateTimelineGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceStateTimeline. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNote": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenance": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "note": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Status Page Note]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "isStatusPageSubscribersNotifiedOnNoteCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedOnNoteCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "postedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "scheduledMaintenanceId",
          "isOwnerNotified"
        ]
      },
      "ScheduledMaintenancePublicNoteCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenancePublicNote model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNoteReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenancePublicNote model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNoteUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenancePublicNote model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNoteDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenancePublicNote model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNoteQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenancePublicNote. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNoteSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenancePublicNote. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNoteSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenancePublicNote. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenancePublicNoteGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenancePublicNote. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomField": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [Project Owner, Project Admin, Edit Scheduled Maintenance Custom Field]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [Project Owner, Project Admin, Edit Scheduled Maintenance Custom Field]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "type": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [No access - you don't have permission for this operation]",
            "example": {
              "type": "text",
              "required": true
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "ScheduledMaintenanceCustomFieldCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceCustomField model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomFieldReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceCustomField model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomFieldUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceCustomField model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomFieldDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceCustomField model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomFieldQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceCustomField. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomFieldSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceCustomField. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomFieldSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceCustomField. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceCustomFieldGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceCustomField. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceFeed": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenance": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "feedInfoInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "moreInformationInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "scheduledMaintenanceFeedEventType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "displayColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "postedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "scheduledMaintenanceId",
          "feedInfoInMarkdown",
          "scheduledMaintenanceFeedEventType",
          "displayColor"
        ]
      },
      "ScheduledMaintenanceFeedCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceFeed model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceFeedReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceFeed model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceFeedQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceFeed. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceFeedSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceFeed. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "scheduledMaintenanceFeedEventType": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceFeedSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceFeed. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceFeedGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceFeed. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
            "example": true
          },
          "graph": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          }
        },
        "required": [
          "projectId",
          "name",
          "slug"
        ]
      },
      "WorkflowCreateSchema": {
        "type": "object",
        "description": "Create schema for Workflow model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "WorkflowReadSchema": {
        "type": "object",
        "description": "Read schema for Workflow model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "WorkflowUpdateSchema": {
        "type": "object",
        "description": "Update schema for Workflow model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "WorkflowDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Workflow model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "WorkflowQuerySchema": {
        "type": "object",
        "description": "Query schema for Workflow. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "WorkflowSelectSchema": {
        "type": "object",
        "description": "Select schema for Workflow. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "triggerId": true
        },
        "additionalProperties": false
      },
      "WorkflowSortSchema": {
        "type": "object",
        "description": "Sort schema for Workflow. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "WorkflowGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Workflow. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "WorkflowVariable": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "workflow": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "workflowId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [Project Owner, Project Admin, Edit Workflow Variables]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [Project Owner, Project Admin, Edit Workflow Variables]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "isSecret": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name",
          "isSecret"
        ]
      },
      "WorkflowVariableCreateSchema": {
        "type": "object",
        "description": "Create schema for WorkflowVariable model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "WorkflowVariableReadSchema": {
        "type": "object",
        "description": "Read schema for WorkflowVariable model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "WorkflowVariableUpdateSchema": {
        "type": "object",
        "description": "Update schema for WorkflowVariable model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "WorkflowVariableDeleteSchema": {
        "type": "object",
        "description": "Delete schema for WorkflowVariable model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "WorkflowVariableQuerySchema": {
        "type": "object",
        "description": "Query schema for WorkflowVariable. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "WorkflowVariableSelectSchema": {
        "type": "object",
        "description": "Select schema for WorkflowVariable. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "WorkflowVariableSortSchema": {
        "type": "object",
        "description": "Sort schema for WorkflowVariable. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "WorkflowVariableGroupBySchema": {
        "type": "object",
        "description": "Group by schema for WorkflowVariable. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "WorkflowLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Workflow Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "workflow": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Workflow Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "workflowId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "logs": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Workflow Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "workflowStatus": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Workflow Log], Update: [No access - you don't have permission for this operation]",
            "example": "In Progress"
          },
          "startedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "completedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "workflowId",
          "workflowStatus"
        ]
      },
      "WorkflowLogCreateSchema": {
        "type": "object",
        "description": "Create schema for WorkflowLog model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "WorkflowLogReadSchema": {
        "type": "object",
        "description": "Read schema for WorkflowLog model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "WorkflowLogUpdateSchema": {
        "type": "object",
        "description": "Update schema for WorkflowLog model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "WorkflowLogDeleteSchema": {
        "type": "object",
        "description": "Delete schema for WorkflowLog model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "WorkflowLogQuerySchema": {
        "type": "object",
        "description": "Query schema for WorkflowLog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "WorkflowLogSelectSchema": {
        "type": "object",
        "description": "Select schema for WorkflowLog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "WorkflowLogSortSchema": {
        "type": "object",
        "description": "Sort schema for WorkflowLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "WorkflowLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for WorkflowLog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageSSO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page SSO], Read: [Project Owner, Project Admin, Project Member, Read Status Page SSO], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "signatureMethod": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": "Example short text"
          },
          "digestMethod": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": "Example short text"
          },
          "signOnURL": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO, Project User, Public], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": "https://www.example.com/path/to/resource?param=value"
          },
          "issuerURL": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": "https://www.example.com/path/to/resource?param=value"
          },
          "publicCertificate": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
            "example": true
          },
          "isTested": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "statusPageId",
          "name",
          "description",
          "signatureMethod",
          "digestMethod",
          "signOnURL",
          "issuerURL",
          "publicCertificate"
        ]
      },
      "StatusPageSSOCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageSSO model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageSSOReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageSSO model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageSSOUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageSSO model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageSSODeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageSSO model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageSSOQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageSSO. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageSSOSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageSSO. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "signatureMethod": true,
          "digestMethod": true
        },
        "additionalProperties": false
      },
      "StatusPageSSOSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageSSO. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageSSOGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageSSO. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorProbe": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Probe], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "probe": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Probe], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "probeId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Probe], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "lastPingAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "nextPingAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Probe], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Probe], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Probe]",
            "example": true
          },
          "lastMonitoringLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "probeId",
          "monitorId",
          "isEnabled"
        ]
      },
      "MonitorProbeCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorProbe model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorProbeReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorProbe model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorProbeUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorProbe model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorProbeDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorProbe model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorProbeQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorProbe. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorProbeSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorProbe. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "MonitorProbeSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorProbe. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorProbeGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorProbe. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "monitorId",
          "isOwnerNotified"
        ]
      },
      "MonitorOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "monitorId",
          "isOwnerNotified"
        ]
      },
      "MonitorOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "MonitorOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenance": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "scheduledMaintenanceId",
          "isOwnerNotified"
        ]
      },
      "ScheduledMaintenanceOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenance": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "scheduledMaintenanceId",
          "isOwnerNotified"
        ]
      },
      "ScheduledMaintenanceOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "statusPageId",
          "isOwnerNotified"
        ]
      },
      "StatusPageOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page User Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page User Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusPage": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page User Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "statusPageId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page User Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page User Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "statusPageId",
          "isOwnerNotified"
        ]
      },
      "StatusPageOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for StatusPageOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for StatusPageOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for StatusPageOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for StatusPageOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for StatusPageOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for StatusPageOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for StatusPageOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "StatusPageOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for StatusPageOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "SmsLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read SMS Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "toNumber": {
            "type": "object",
            "description": "Phone object",
            "example": {
              "_type": "Phone",
              "value": "+1-555-123-4567"
            }
          },
          "fromNumber": {
            "type": "object",
            "description": "Phone object",
            "example": {
              "_type": "Phone",
              "value": "+1-555-123-4567"
            }
          },
          "smsText": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read SMS Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read SMS Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "status": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read SMS Log], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "smsCostInUSDCents": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read SMS Log], Update: [No access - you don't have permission for this operation]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "toNumber",
          "status",
          "smsCostInUSDCents"
        ]
      },
      "SmsLogReadSchema": {
        "type": "object",
        "description": "Read schema for SmsLog model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "SmsLogQuerySchema": {
        "type": "object",
        "description": "Query schema for SmsLog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "SmsLogSelectSchema": {
        "type": "object",
        "description": "Select schema for SmsLog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "status": true
        },
        "additionalProperties": false
      },
      "SmsLogSortSchema": {
        "type": "object",
        "description": "Sort schema for SmsLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "SmsLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for SmsLog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "CallLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Call Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "toNumber": {
            "type": "object",
            "description": "Phone object",
            "example": {
              "_type": "Phone",
              "value": "+1-555-123-4567"
            }
          },
          "fromNumber": {
            "type": "object",
            "description": "Phone object",
            "example": {
              "_type": "Phone",
              "value": "+1-555-123-4567"
            }
          },
          "callData": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Call Log], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Call Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "status": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Call Log], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "callCostInUSDCents": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Call Log], Update: [No access - you don't have permission for this operation]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "toNumber",
          "fromNumber",
          "status",
          "callCostInUSDCents"
        ]
      },
      "CallLogReadSchema": {
        "type": "object",
        "description": "Read schema for CallLog model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "CallLogQuerySchema": {
        "type": "object",
        "description": "Query schema for CallLog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "CallLogSelectSchema": {
        "type": "object",
        "description": "Select schema for CallLog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "status": true
        },
        "additionalProperties": false
      },
      "CallLogSortSchema": {
        "type": "object",
        "description": "Sort schema for CallLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "CallLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for CallLog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "EmailLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Email Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "toEmail": {
            "type": "object",
            "description": "Email object",
            "example": {
              "_type": "Email",
              "value": "user@example.com"
            }
          },
          "fromEmail": {
            "type": "object",
            "description": "Email object",
            "example": {
              "_type": "Email",
              "value": "user@example.com"
            }
          },
          "subject": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Email Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Email Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "status": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Email Log], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "projectSmtpConfig": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Email Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectSmtpConfigId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "subject",
          "status"
        ]
      },
      "EmailLogReadSchema": {
        "type": "object",
        "description": "Read schema for EmailLog model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "EmailLogQuerySchema": {
        "type": "object",
        "description": "Query schema for EmailLog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "EmailLogSelectSchema": {
        "type": "object",
        "description": "Select schema for EmailLog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "toEmail": true,
          "fromEmail": true,
          "status": true
        },
        "additionalProperties": false
      },
      "EmailLogSortSchema": {
        "type": "object",
        "description": "Sort schema for EmailLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "EmailLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for EmailLog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "UserOnCallLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userBelongsToTeam": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userBelongsToTeamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyExecutionLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyExecutionLogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyEscalationRule": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByIncident": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByIncidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByAlert": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByAlertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "userNotificationEventType": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "onCallDutyPolicyExecutionLogTimeline": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyExecutionLogTimelineId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "acknowledgedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "acknowledgedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "onCallDutySchedule": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyScheduleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "overridedByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "overridedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "onCallDutyPolicyExecutionLogId",
          "onCallDutyPolicyEscalationRuleId",
          "status",
          "userNotificationEventType",
          "onCallDutyPolicyExecutionLogTimelineId",
          "statusMessage"
        ]
      },
      "UserOnCallLogQuerySchema": {
        "type": "object",
        "description": "Query schema for UserOnCallLog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "UserOnCallLogSelectSchema": {
        "type": "object",
        "description": "Select schema for UserOnCallLog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "status": true,
          "userNotificationEventType": true
        },
        "additionalProperties": false
      },
      "UserOnCallLogSortSchema": {
        "type": "object",
        "description": "Sort schema for UserOnCallLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "UserOnCallLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for UserOnCallLog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "UserOnCallLogTimeline": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userOnCallLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userNotificationLogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userNotificationRule": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userNotificationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByIncident": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByIncidentId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "triggeredByAlert": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "triggeredByAlertId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyExecutionLog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyExecutionLogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyExecutionLogTimeline": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyExecutionLogTimelineId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyEscalationRule": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userNotificationEventType": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "onCallDutyPolicyEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userBelongsToTeam": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userBelongsToTeamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "status": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isAcknowledged": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": true
          },
          "acknowledgedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "userCall": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userCallId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userSms": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userSmsId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userEmail": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userEmailId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "userNotificationLogId",
          "userNotificationRuleId",
          "onCallDutyPolicyId",
          "onCallDutyPolicyExecutionLogId",
          "onCallDutyPolicyExecutionLogTimelineId",
          "userNotificationEventType",
          "onCallDutyPolicyEscalationRuleId",
          "statusMessage",
          "status"
        ]
      },
      "UserOnCallLogTimelineQuerySchema": {
        "type": "object",
        "description": "Query schema for UserOnCallLogTimeline. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "UserOnCallLogTimelineSelectSchema": {
        "type": "object",
        "description": "Select schema for UserOnCallLogTimeline. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "userNotificationEventType": true,
          "status": true
        },
        "additionalProperties": false
      },
      "UserOnCallLogTimelineSortSchema": {
        "type": "object",
        "description": "Sort schema for UserOnCallLogTimeline. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "UserOnCallLogTimelineGroupBySchema": {
        "type": "object",
        "description": "Group by schema for UserOnCallLogTimeline. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplate": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "templateName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "example": "Example short text"
          },
          "templateDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "title": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitors": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "statusPages": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "changeMonitorStatusTo": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "changeMonitorStatusToId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "firstEventScheduledAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "firstEventStartsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "firstEventEndsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "recurringInterval": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isRecurringEvent": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
            "example": true
          },
          "scheduleNextEventAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "shouldStatusPageSubscribersBeNotifiedOnEventCreated": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToOngoing": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
            "example": true
          },
          "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToEnded": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
            "example": true
          },
          "customFields": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "sendSubscriberNotificationsOnBeforeTheEvent": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "templateName",
          "templateDescription",
          "title",
          "slug"
        ]
      },
      "ScheduledMaintenanceTemplateCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceTemplate model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceTemplate model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceTemplate model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceTemplate model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceTemplate. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceTemplate. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "templateName": true,
          "title": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceTemplate. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceTemplate. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenanceTemplate": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceTemplateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "teamId",
          "scheduledMaintenanceTemplateId"
        ]
      },
      "ScheduledMaintenanceTemplateOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceTemplateOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceTemplateOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceTemplateOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceTemplateOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceTemplateOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceTemplateOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceTemplateOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceTemplateOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "scheduledMaintenanceTemplate": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "scheduledMaintenanceTemplateId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance User Owner], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "userId",
          "scheduledMaintenanceTemplateId"
        ]
      },
      "ScheduledMaintenanceTemplateOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceTemplateOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceTemplateOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceTemplateOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceTemplateOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceTemplateOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceTemplateOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceTemplateOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceTemplateOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceTemplateOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplate": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "note": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "templateName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
            "example": "Example short text"
          },
          "templateDescription": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "templateName",
          "templateDescription"
        ]
      },
      "ScheduledMaintenanceNoteTemplateCreateSchema": {
        "type": "object",
        "description": "Create schema for ScheduledMaintenanceNoteTemplate model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplateReadSchema": {
        "type": "object",
        "description": "Read schema for ScheduledMaintenanceNoteTemplate model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplateUpdateSchema": {
        "type": "object",
        "description": "Update schema for ScheduledMaintenanceNoteTemplate model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplateDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ScheduledMaintenanceNoteTemplate model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplateQuerySchema": {
        "type": "object",
        "description": "Query schema for ScheduledMaintenanceNoteTemplate. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplateSelectSchema": {
        "type": "object",
        "description": "Select schema for ScheduledMaintenanceNoteTemplate. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "templateName": true
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplateSortSchema": {
        "type": "object",
        "description": "Sort schema for ScheduledMaintenanceNoteTemplate. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ScheduledMaintenanceNoteTemplateGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ScheduledMaintenanceNoteTemplate. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorGroup": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          }
        },
        "required": [
          "projectId",
          "name",
          "slug"
        ]
      },
      "MonitorGroupCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorGroup model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorGroupReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorGroup model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorGroupUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorGroup model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorGroupDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorGroup model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorGroupQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorGroup. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorGroupSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorGroup. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "MonitorGroupSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorGroup. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorGroupGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorGroup. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitorGroup": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorGroupId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "monitorGroupId",
          "isOwnerNotified"
        ]
      },
      "MonitorGroupOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorGroupOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorGroupOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorGroupOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorGroupOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorGroupOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorGroupOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorGroupOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorGroupOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitorGroup": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorGroupId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "monitorGroupId",
          "isOwnerNotified"
        ]
      },
      "MonitorGroupOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorGroupOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorGroupOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorGroupOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorGroupOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorGroupOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorGroupOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorGroupOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorGroupOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorGroupOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorGroupResource": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Resource], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Resource], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitorGroup": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Resource], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Resource], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorGroupId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Resource], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Resource], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group Resource]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group Resource], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group Resource], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "monitorGroupId",
          "monitorId"
        ]
      },
      "MonitorGroupResourceCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorGroupResource model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorGroupResourceReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorGroupResource model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorGroupResourceUpdateSchema": {
        "type": "object",
        "description": "Update schema for MonitorGroupResource model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MonitorGroupResourceDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MonitorGroupResource model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MonitorGroupResourceQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorGroupResource. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorGroupResourceSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorGroupResource. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "MonitorGroupResourceSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorGroupResource. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorGroupResourceGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorGroupResource. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "TelemetryService": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "telemetryServiceToken": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "retainTelemetryDataForDays": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
            "example": 42
          },
          "serviceColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          }
        },
        "required": [
          "projectId",
          "name",
          "slug"
        ]
      },
      "TelemetryServiceCreateSchema": {
        "type": "object",
        "description": "Create schema for TelemetryService model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "TelemetryServiceReadSchema": {
        "type": "object",
        "description": "Read schema for TelemetryService model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "TelemetryServiceUpdateSchema": {
        "type": "object",
        "description": "Update schema for TelemetryService model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "TelemetryServiceDeleteSchema": {
        "type": "object",
        "description": "Delete schema for TelemetryService model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "TelemetryServiceQuerySchema": {
        "type": "object",
        "description": "Query schema for TelemetryService. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "TelemetryServiceSelectSchema": {
        "type": "object",
        "description": "Select schema for TelemetryService. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "TelemetryServiceSortSchema": {
        "type": "object",
        "description": "Sort schema for TelemetryService. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TelemetryServiceGroupBySchema": {
        "type": "object",
        "description": "Group by schema for TelemetryService. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicySchedule": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
            "example": "Example short text"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "currentUserOnRoster": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "currentUserIdOnRoster": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "nextUserOnRoster": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "nextUserIdOnRoster": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "rosterHandoffAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "rosterNextHandoffAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "rosterNextStartAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "rosterStartAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "name",
          "slug"
        ]
      },
      "OnCallDutyPolicyScheduleCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicySchedule model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicySchedule model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicySchedule model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicySchedule model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicySchedule. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicySchedule. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicySchedule. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicySchedule. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayer": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicySchedule": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyScheduleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Edit On-Call Schedule Layer]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Edit On-Call Schedule Layer]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
            "example": 42
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "rotation": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "handOffTime": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "restrictionTimes": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyScheduleId",
          "name",
          "startsAt",
          "handOffTime"
        ]
      },
      "OnCallDutyPolicyScheduleLayerCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyScheduleLayer model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyScheduleLayer model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyScheduleLayer model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyScheduleLayer model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyScheduleLayer. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyScheduleLayer. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyScheduleLayer. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyScheduleLayer. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicySchedule": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyScheduleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyScheduleLayer": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyScheduleLayerId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "order": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
            "example": 42
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyScheduleId",
          "onCallDutyPolicyScheduleLayerId",
          "userId"
        ]
      },
      "OnCallDutyPolicyScheduleLayerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyScheduleLayerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUserReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyScheduleLayerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyScheduleLayerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyScheduleLayerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyScheduleLayerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyScheduleLayerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyScheduleLayerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyScheduleLayerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyScheduleLayerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyFeed": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "feedInfoInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "moreInformationInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "onCallDutyPolicyFeedEventType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "displayColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "postedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "feedInfoInMarkdown",
          "onCallDutyPolicyFeedEventType",
          "displayColor"
        ]
      },
      "OnCallDutyPolicyFeedCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyFeed model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyFeedReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyFeed model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyFeedQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyFeed. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyFeedSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyFeed. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "onCallDutyPolicyFeedEventType": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyFeedSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyFeed. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyFeedGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyFeed. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Team Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Team Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Team Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Team Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Team Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Team Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "onCallDutyPolicyId",
          "isOwnerNotified"
        ]
      },
      "OnCallDutyPolicyOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy User Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy User Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy User Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy User Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy User Owner], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy User Owner], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "onCallDutyPolicyId",
          "isOwnerNotified"
        ]
      },
      "OnCallDutyPolicyOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleSchedule": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicy": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicySchedule": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyScheduleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyEscalationRule": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "onCallDutyPolicyEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule Schedule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "onCallDutyPolicyId",
          "onCallDutyPolicyEscalationRuleId"
        ]
      },
      "OnCallDutyPolicyEscalationRuleScheduleCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyEscalationRuleSchedule model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleScheduleReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyEscalationRuleSchedule model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleScheduleUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyEscalationRuleSchedule model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleScheduleDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyEscalationRuleSchedule model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleScheduleQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyEscalationRuleSchedule. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleScheduleSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyEscalationRuleSchedule. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleScheduleSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyEscalationRuleSchedule. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyEscalationRuleScheduleGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyEscalationRuleSchedule. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "serviceColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "serviceLanguage": {
            "type": "string",
            "description": "Service Language",
            "example": "Example short text"
          },
          "techStack": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "name",
          "slug"
        ]
      },
      "ServiceCatalogCreateSchema": {
        "type": "object",
        "description": "Create schema for ServiceCatalog model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ServiceCatalogReadSchema": {
        "type": "object",
        "description": "Read schema for ServiceCatalog model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ServiceCatalogUpdateSchema": {
        "type": "object",
        "description": "Update schema for ServiceCatalog model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ServiceCatalogDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ServiceCatalog model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ServiceCatalogQuerySchema": {
        "type": "object",
        "description": "Query schema for ServiceCatalog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ServiceCatalogSelectSchema": {
        "type": "object",
        "description": "Select schema for ServiceCatalog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "serviceLanguage": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogSortSchema": {
        "type": "object",
        "description": "Sort schema for ServiceCatalog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ServiceCatalogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ServiceCatalog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog Team Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "teamId",
          "serviceCatalogId"
        ]
      },
      "ServiceCatalogOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for ServiceCatalogOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for ServiceCatalogOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for ServiceCatalogOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ServiceCatalogOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for ServiceCatalogOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for ServiceCatalogOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for ServiceCatalogOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ServiceCatalogOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog User Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog User Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog User Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog User Owner], Read: [Project Owner, Project Admin, Project Member, Read Service Catalog User Owner], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "userId",
          "serviceCatalogId"
        ]
      },
      "ServiceCatalogOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for ServiceCatalogOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for ServiceCatalogOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for ServiceCatalogOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ServiceCatalogOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for ServiceCatalogOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for ServiceCatalogOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for ServiceCatalogOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ServiceCatalogOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ServiceCatalogOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependency": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Dependency], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Dependency], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Dependency], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Dependency], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "dependencyServiceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Dependency], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Dependency], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "dependencyServiceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Dependency], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Dependency], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "serviceCatalogId",
          "dependencyServiceCatalogId"
        ]
      },
      "ServiceCatlogDependencyCreateSchema": {
        "type": "object",
        "description": "Create schema for ServiceCatlogDependency model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependencyReadSchema": {
        "type": "object",
        "description": "Read schema for ServiceCatlogDependency model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependencyUpdateSchema": {
        "type": "object",
        "description": "Update schema for ServiceCatlogDependency model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependencyDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ServiceCatlogDependency model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependencyQuerySchema": {
        "type": "object",
        "description": "Query schema for ServiceCatlogDependency. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependencySelectSchema": {
        "type": "object",
        "description": "Select schema for ServiceCatlogDependency. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependencySortSchema": {
        "type": "object",
        "description": "Sort schema for ServiceCatlogDependency. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ServiceCatlogDependencyGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ServiceCatlogDependency. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitor": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Monitor], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Monitor], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Monitor], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Monitor], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Monitor], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Monitor], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Monitor], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Monitor], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "serviceCatalogId",
          "monitorId"
        ]
      },
      "ServiceCatalogMonitorCreateSchema": {
        "type": "object",
        "description": "Create schema for ServiceCatalogMonitor model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitorReadSchema": {
        "type": "object",
        "description": "Read schema for ServiceCatalogMonitor model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitorUpdateSchema": {
        "type": "object",
        "description": "Update schema for ServiceCatalogMonitor model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitorDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ServiceCatalogMonitor model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitorQuerySchema": {
        "type": "object",
        "description": "Query schema for ServiceCatalogMonitor. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitorSelectSchema": {
        "type": "object",
        "description": "Select schema for ServiceCatalogMonitor. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitorSortSchema": {
        "type": "object",
        "description": "Sort schema for ServiceCatalogMonitor. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ServiceCatalogMonitorGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ServiceCatalogMonitor. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryService": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Telemetry Service], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Telemetry Service], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "telemetryService": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Telemetry Service], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "telemetryServiceId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog Telemetry Service], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "serviceCatalogId",
          "telemetryServiceId"
        ]
      },
      "ServiceCatalogTelemetryServiceCreateSchema": {
        "type": "object",
        "description": "Create schema for ServiceCatalogTelemetryService model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryServiceReadSchema": {
        "type": "object",
        "description": "Read schema for ServiceCatalogTelemetryService model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryServiceUpdateSchema": {
        "type": "object",
        "description": "Update schema for ServiceCatalogTelemetryService model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryServiceDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ServiceCatalogTelemetryService model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryServiceQuerySchema": {
        "type": "object",
        "description": "Query schema for ServiceCatalogTelemetryService. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryServiceSelectSchema": {
        "type": "object",
        "description": "Select schema for ServiceCatalogTelemetryService. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryServiceSortSchema": {
        "type": "object",
        "description": "Sort schema for ServiceCatalogTelemetryService. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ServiceCatalogTelemetryServiceGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ServiceCatalogTelemetryService. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "CopilotCodeRepository": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "secretToken": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "mainBranchName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
            "example": "Example short text"
          },
          "repositoryHostedAt": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
            "example": "Example short text"
          },
          "organizationName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
            "example": "Example short text"
          },
          "repositoryName": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
            "example": "Example short text"
          },
          "lastCopilotRunDateTime": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "name",
          "slug",
          "mainBranchName",
          "repositoryHostedAt",
          "organizationName",
          "repositoryName"
        ]
      },
      "CopilotCodeRepositoryCreateSchema": {
        "type": "object",
        "description": "Create schema for CopilotCodeRepository model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "CopilotCodeRepositoryReadSchema": {
        "type": "object",
        "description": "Read schema for CopilotCodeRepository model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "CopilotCodeRepositoryUpdateSchema": {
        "type": "object",
        "description": "Update schema for CopilotCodeRepository model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "CopilotCodeRepositoryDeleteSchema": {
        "type": "object",
        "description": "Delete schema for CopilotCodeRepository model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "CopilotCodeRepositoryQuerySchema": {
        "type": "object",
        "description": "Query schema for CopilotCodeRepository. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "CopilotCodeRepositorySelectSchema": {
        "type": "object",
        "description": "Select schema for CopilotCodeRepository. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "mainBranchName": true,
          "repositoryHostedAt": true,
          "organizationName": true,
          "repositoryName": true
        },
        "additionalProperties": false
      },
      "CopilotCodeRepositorySortSchema": {
        "type": "object",
        "description": "Sort schema for CopilotCodeRepository. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "CopilotCodeRepositoryGroupBySchema": {
        "type": "object",
        "description": "Group by schema for CopilotCodeRepository. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "CopilotAction": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "codeRepository": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "codeRepositoryId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "commitHash": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "copilotActionType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceRepository": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceRepositoryId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "copilotPullRequest": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "copilotPullRequestId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "copilotActionStatus": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "copilotActionProp": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "statusMessage": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "logs": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "isPriority": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [Project Owner, Project Admin, Project Member, Edit Copilot Event]",
            "example": true
          },
          "statusChangedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "codeRepositoryId",
          "serviceCatalogId",
          "serviceRepositoryId"
        ]
      },
      "CopilotActionCreateSchema": {
        "type": "object",
        "description": "Create schema for CopilotAction model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "CopilotActionReadSchema": {
        "type": "object",
        "description": "Read schema for CopilotAction model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "CopilotActionUpdateSchema": {
        "type": "object",
        "description": "Update schema for CopilotAction model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "CopilotActionDeleteSchema": {
        "type": "object",
        "description": "Delete schema for CopilotAction model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "CopilotActionQuerySchema": {
        "type": "object",
        "description": "Query schema for CopilotAction. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "CopilotActionSelectSchema": {
        "type": "object",
        "description": "Select schema for CopilotAction. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "copilotActionType": true,
          "copilotActionStatus": true
        },
        "additionalProperties": false
      },
      "CopilotActionSortSchema": {
        "type": "object",
        "description": "Sort schema for CopilotAction. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "CopilotActionGroupBySchema": {
        "type": "object",
        "description": "Group by schema for CopilotAction. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepository": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "servicePathInRepository": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "limitNumberOfOpenPullRequestsCount": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
            "example": 42
          },
          "enablePullRequests": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
            "example": true
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "codeRepository": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "codeRepositoryId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "servicePathInRepository",
          "enablePullRequests",
          "codeRepositoryId",
          "serviceCatalogId"
        ]
      },
      "ServiceCopilotCodeRepositoryCreateSchema": {
        "type": "object",
        "description": "Create schema for ServiceCopilotCodeRepository model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepositoryReadSchema": {
        "type": "object",
        "description": "Read schema for ServiceCopilotCodeRepository model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepositoryUpdateSchema": {
        "type": "object",
        "description": "Update schema for ServiceCopilotCodeRepository model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepositoryDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ServiceCopilotCodeRepository model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepositoryQuerySchema": {
        "type": "object",
        "description": "Query schema for ServiceCopilotCodeRepository. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepositorySelectSchema": {
        "type": "object",
        "description": "Select schema for ServiceCopilotCodeRepository. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepositorySortSchema": {
        "type": "object",
        "description": "Sort schema for ServiceCopilotCodeRepository. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ServiceCopilotCodeRepositoryGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ServiceCopilotCodeRepository. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "CopilotPullRequest": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "codeRepository": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "codeRepositoryId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceCatalog": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceCatalogId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "serviceRepository": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "serviceRepositoryId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "pullRequestId": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "copilotPullRequestStatus": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "isSetupPullRequest": {
            "type": "boolean",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "codeRepositoryId"
        ]
      },
      "CopilotPullRequestReadSchema": {
        "type": "object",
        "description": "Read schema for CopilotPullRequest model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "CopilotPullRequestQuerySchema": {
        "type": "object",
        "description": "Query schema for CopilotPullRequest. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "CopilotPullRequestSelectSchema": {
        "type": "object",
        "description": "Select schema for CopilotPullRequest. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "pullRequestId": true,
          "copilotPullRequestStatus": true
        },
        "additionalProperties": false
      },
      "CopilotPullRequestSortSchema": {
        "type": "object",
        "description": "Sort schema for CopilotPullRequest. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "CopilotPullRequestGroupBySchema": {
        "type": "object",
        "description": "Group by schema for CopilotPullRequest. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "CopilotActionType": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "codeRepository": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "codeRepositoryId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "actionType": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "priority": {
            "type": "number",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "codeRepositoryId",
          "actionType",
          "priority"
        ]
      },
      "CopilotActionTypeCreateSchema": {
        "type": "object",
        "description": "Create schema for CopilotActionType model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "CopilotActionTypeReadSchema": {
        "type": "object",
        "description": "Read schema for CopilotActionType model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "CopilotActionTypeUpdateSchema": {
        "type": "object",
        "description": "Update schema for CopilotActionType model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "CopilotActionTypeDeleteSchema": {
        "type": "object",
        "description": "Delete schema for CopilotActionType model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "CopilotActionTypeQuerySchema": {
        "type": "object",
        "description": "Query schema for CopilotActionType. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "CopilotActionTypeSelectSchema": {
        "type": "object",
        "description": "Select schema for CopilotActionType. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "actionType": true
        },
        "additionalProperties": false
      },
      "CopilotActionTypeSortSchema": {
        "type": "object",
        "description": "Sort schema for CopilotActionType. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "CopilotActionTypeGroupBySchema": {
        "type": "object",
        "description": "Group by schema for CopilotActionType. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeam": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner Team], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "team": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner Team], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "probe": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner Team], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "probeId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner Team], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner Team], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner Team], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner Team], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "teamId",
          "probeId",
          "isOwnerNotified"
        ]
      },
      "ProbeOwnerTeamCreateSchema": {
        "type": "object",
        "description": "Create schema for ProbeOwnerTeam model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeamReadSchema": {
        "type": "object",
        "description": "Read schema for ProbeOwnerTeam model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeamUpdateSchema": {
        "type": "object",
        "description": "Update schema for ProbeOwnerTeam model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeamDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ProbeOwnerTeam model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeamQuerySchema": {
        "type": "object",
        "description": "Query schema for ProbeOwnerTeam. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeamSelectSchema": {
        "type": "object",
        "description": "Select schema for ProbeOwnerTeam. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeamSortSchema": {
        "type": "object",
        "description": "Sort schema for ProbeOwnerTeam. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ProbeOwnerTeamGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ProbeOwnerTeam. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "ProbeOwnerUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner User], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner User], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "probe": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner User], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "probeId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner User], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner User], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isOwnerNotified": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe Owner User], Read: [Project Owner, Project Admin, Project Member, Read Probe Owner User], Update: [No access - you don't have permission for this operation]",
            "example": true
          }
        },
        "required": [
          "projectId",
          "userId",
          "probeId",
          "isOwnerNotified"
        ]
      },
      "ProbeOwnerUserCreateSchema": {
        "type": "object",
        "description": "Create schema for ProbeOwnerUser model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "ProbeOwnerUserReadSchema": {
        "type": "object",
        "description": "Read schema for ProbeOwnerUser model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "ProbeOwnerUserUpdateSchema": {
        "type": "object",
        "description": "Update schema for ProbeOwnerUser model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "ProbeOwnerUserDeleteSchema": {
        "type": "object",
        "description": "Delete schema for ProbeOwnerUser model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "ProbeOwnerUserQuerySchema": {
        "type": "object",
        "description": "Query schema for ProbeOwnerUser. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "ProbeOwnerUserSelectSchema": {
        "type": "object",
        "description": "Select schema for ProbeOwnerUser. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "ProbeOwnerUserSortSchema": {
        "type": "object",
        "description": "Sort schema for ProbeOwnerUser. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ProbeOwnerUserGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ProbeOwnerUser. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "UserTwoFactorAuth": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Logged in User], Read: [Logged in User], Update: [Logged in User]",
            "example": "Example short text"
          },
          "twoFactorOtpUrl": {
            "type": "string",
            "description": "Permissions - Create: [Logged in User], Read: [Logged in User], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "isVerified": {
            "type": "boolean",
            "description": "Permissions - Create: [Logged in User], Read: [Logged in User], Update: [Logged in User]",
            "example": true
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        }
      },
      "UserTwoFactorAuthQuerySchema": {
        "type": "object",
        "description": "Query schema for UserTwoFactorAuth. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "UserTwoFactorAuthSelectSchema": {
        "type": "object",
        "description": "Select schema for UserTwoFactorAuth. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "UserTwoFactorAuthSortSchema": {
        "type": "object",
        "description": "Sort schema for UserTwoFactorAuth. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "UserTwoFactorAuthGroupBySchema": {
        "type": "object",
        "description": "Group by schema for UserTwoFactorAuth. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKey": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [Project Owner, Project Admin, Edit Telemetry Ingestion Key]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [Project Owner, Project Admin, Edit Telemetry Ingestion Key]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "secretKey": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "TelemetryIngestionKeyCreateSchema": {
        "type": "object",
        "description": "Create schema for TelemetryIngestionKey model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKeyReadSchema": {
        "type": "object",
        "description": "Read schema for TelemetryIngestionKey model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKeyUpdateSchema": {
        "type": "object",
        "description": "Update schema for TelemetryIngestionKey model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKeyDeleteSchema": {
        "type": "object",
        "description": "Delete schema for TelemetryIngestionKey model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKeyQuerySchema": {
        "type": "object",
        "description": "Query schema for TelemetryIngestionKey. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKeySelectSchema": {
        "type": "object",
        "description": "Select schema for TelemetryIngestionKey. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKeySortSchema": {
        "type": "object",
        "description": "Sort schema for TelemetryIngestionKey. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TelemetryIngestionKeyGroupBySchema": {
        "type": "object",
        "description": "Group by schema for TelemetryIngestionKey. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "TelemetryException": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "telemetryService": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "telemetryServiceId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "message": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "stackTrace": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "exceptionType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "fingerprint": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "example": "Example short text"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "markedAsResolvedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "markedAsArchivedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "firstSeenAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "lastSeenAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "assignToUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "assignToUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "assignToTeam": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "assignToTeamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "markedAsResolvedByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "markedAsResolvedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "markedAsArchivedByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "markedAsArchivedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "isResolved": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "example": true
          },
          "isArchived": {
            "type": "boolean",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "example": true
          },
          "occuranceCount": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "telemetryServiceId",
          "isResolved",
          "isArchived",
          "occuranceCount"
        ]
      },
      "TelemetryExceptionCreateSchema": {
        "type": "object",
        "description": "Create schema for TelemetryException model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "TelemetryExceptionReadSchema": {
        "type": "object",
        "description": "Read schema for TelemetryException model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "TelemetryExceptionUpdateSchema": {
        "type": "object",
        "description": "Update schema for TelemetryException model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "TelemetryExceptionDeleteSchema": {
        "type": "object",
        "description": "Delete schema for TelemetryException model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "TelemetryExceptionQuerySchema": {
        "type": "object",
        "description": "Query schema for TelemetryException. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "TelemetryExceptionSelectSchema": {
        "type": "object",
        "description": "Select schema for TelemetryException. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "fingerprint": true
        },
        "additionalProperties": false
      },
      "TelemetryExceptionSortSchema": {
        "type": "object",
        "description": "Sort schema for TelemetryException. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TelemetryExceptionGroupBySchema": {
        "type": "object",
        "description": "Group by schema for TelemetryException. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "TableView": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
            "example": "Example short text"
          },
          "tableId": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "query": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "sort": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "itemsOnPage": {
            "type": "number",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
            "example": 42
          }
        },
        "required": [
          "projectId",
          "name",
          "tableId",
          "itemsOnPage"
        ]
      },
      "TableViewCreateSchema": {
        "type": "object",
        "description": "Create schema for TableView model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "TableViewReadSchema": {
        "type": "object",
        "description": "Read schema for TableView model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "TableViewUpdateSchema": {
        "type": "object",
        "description": "Update schema for TableView model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "TableViewDeleteSchema": {
        "type": "object",
        "description": "Delete schema for TableView model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "TableViewQuerySchema": {
        "type": "object",
        "description": "Query schema for TableView. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "TableViewSelectSchema": {
        "type": "object",
        "description": "Select schema for TableView. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true,
          "tableId": true
        },
        "additionalProperties": false
      },
      "TableViewSortSchema": {
        "type": "object",
        "description": "Sort schema for TableView. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TableViewGroupBySchema": {
        "type": "object",
        "description": "Group by schema for TableView. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
            "example": "Example short text"
          },
          "slug": {
            "type": "string",
            "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [No access - you don't have permission for this operation]",
            "example": "example-slug-value"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "labels": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Project Member, Edit Dashboard]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "dashboardViewConfig": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "name",
          "slug"
        ]
      },
      "DashboardCreateSchema": {
        "type": "object",
        "description": "Create schema for Dashboard model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "DashboardReadSchema": {
        "type": "object",
        "description": "Read schema for Dashboard model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "DashboardUpdateSchema": {
        "type": "object",
        "description": "Update schema for Dashboard model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "DashboardDeleteSchema": {
        "type": "object",
        "description": "Delete schema for Dashboard model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "DashboardQuerySchema": {
        "type": "object",
        "description": "Query schema for Dashboard. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "DashboardSelectSchema": {
        "type": "object",
        "description": "Select schema for Dashboard. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "DashboardSortSchema": {
        "type": "object",
        "description": "Sort schema for Dashboard. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "DashboardGroupBySchema": {
        "type": "object",
        "description": "Group by schema for Dashboard. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRule": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "notificationRule": {
            "type": "object",
            "description": "Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "eventType": {
            "type": "string",
            "description": "Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
            "example": "Example short text"
          },
          "workspaceType": {
            "type": "string",
            "description": "Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
            "example": "This is an example of longer text content that might be stored in this field."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name",
          "eventType",
          "workspaceType"
        ]
      },
      "WorkspaceNotificationRuleCreateSchema": {
        "type": "object",
        "description": "Create schema for WorkspaceNotificationRule model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRuleReadSchema": {
        "type": "object",
        "description": "Read schema for WorkspaceNotificationRule model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRuleUpdateSchema": {
        "type": "object",
        "description": "Update schema for WorkspaceNotificationRule model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRuleDeleteSchema": {
        "type": "object",
        "description": "Delete schema for WorkspaceNotificationRule model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRuleQuerySchema": {
        "type": "object",
        "description": "Query schema for WorkspaceNotificationRule. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRuleSelectSchema": {
        "type": "object",
        "description": "Select schema for WorkspaceNotificationRule. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "eventType": true
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRuleSortSchema": {
        "type": "object",
        "description": "Sort schema for WorkspaceNotificationRule. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "WorkspaceNotificationRuleGroupBySchema": {
        "type": "object",
        "description": "Group by schema for WorkspaceNotificationRule. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MonitorFeed": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "monitor": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "monitorId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "feedInfoInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "moreInformationInMarkdown": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
            "example": "# Heading\n\nThis is **markdown** content"
          },
          "monitorFeedEventType": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
            "example": "Example short text"
          },
          "displayColor": {
            "type": "object",
            "description": "Color object",
            "example": {
              "_type": "Color",
              "value": "#ff0000"
            }
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "postedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "monitorId",
          "feedInfoInMarkdown",
          "monitorFeedEventType",
          "displayColor"
        ]
      },
      "MonitorFeedCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorFeed model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MonitorFeedReadSchema": {
        "type": "object",
        "description": "Read schema for MonitorFeed model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MonitorFeedQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorFeed. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorFeedSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorFeed. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "monitorFeedEventType": true
        },
        "additionalProperties": false
      },
      "MonitorFeedSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorFeed. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorFeedGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorFeed. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "MetricType": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "telemetryServices": {
            "type": "array",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the entity"
                }
              }
            },
            "example": [
              {
                "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            ]
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
            "example": "Example short text"
          },
          "description": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "unit": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "deletedByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "projectId",
          "name"
        ]
      },
      "MetricTypeCreateSchema": {
        "type": "object",
        "description": "Create schema for MetricType model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "MetricTypeReadSchema": {
        "type": "object",
        "description": "Read schema for MetricType model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "MetricTypeUpdateSchema": {
        "type": "object",
        "description": "Update schema for MetricType model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "MetricTypeDeleteSchema": {
        "type": "object",
        "description": "Delete schema for MetricType model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "MetricTypeQuerySchema": {
        "type": "object",
        "description": "Query schema for MetricType. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MetricTypeSelectSchema": {
        "type": "object",
        "description": "Select schema for MetricType. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true,
          "name": true
        },
        "additionalProperties": false
      },
      "MetricTypeSortSchema": {
        "type": "object",
        "description": "Sort schema for MetricType. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MetricTypeGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MetricType. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "updatedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "deletedAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "version": {
            "type": "number",
            "description": "Version",
            "example": 42
          },
          "project": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member], Read: [Project Owner, Project Admin, Project Member, Create On-Call Policy Time Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "projectId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyScheduleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "onCallDutyPolicyEscalationRuleId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "moreInfo": {
            "type": "string",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member], Read: [Project Owner, Project Admin, Project Member, Create On-Call Policy Time Log], Update: [No access - you don't have permission for this operation]",
            "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
          },
          "createdByUser": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member], Read: [Project Owner, Project Admin, Project Member, Create On-Call Policy Time Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "createdByUserId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "type": "object",
            "description": "Permissions - Create: [Project Owner, Project Admin, Project Member], Read: [Project Owner, Project Admin, Project Member, Create On-Call Policy Time Log], Update: [No access - you don't have permission for this operation]",
            "properties": {
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the entity",
                "example": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
              }
            },
            "example": {
              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            }
          },
          "userId": {
            "type": "string",
            "description": "A unique identifier for an object, represented as a UUID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "startsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          },
          "endsAt": {
            "type": "object",
            "description": "A date time object.",
            "example": {
              "_type": "DateTime",
              "value": "2023-10-01T12:00:00Z"
            }
          }
        },
        "required": [
          "projectId",
          "userId",
          "startsAt"
        ]
      },
      "OnCallDutyPolicyTimeLogCreateSchema": {
        "type": "object",
        "description": "Create schema for OnCallDutyPolicyTimeLog model. Create",
        "example": {
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLogReadSchema": {
        "type": "object",
        "description": "Read schema for OnCallDutyPolicyTimeLog model. Read",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "John Doe",
          "email": "john@example.com",
          "description": "Example user description",
          "createdAt": "2023-01-15T12:30:00.000Z",
          "updatedAt": "2023-01-15T12:30:00.000Z",
          "version": 1
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLogUpdateSchema": {
        "type": "object",
        "description": "Update schema for OnCallDutyPolicyTimeLog model. Update",
        "example": {
          "name": "Jane Doe",
          "email": "jane@example.com"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLogDeleteSchema": {
        "type": "object",
        "description": "Delete schema for OnCallDutyPolicyTimeLog model. Delete",
        "example": {
          "_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLogQuerySchema": {
        "type": "object",
        "description": "Query schema for OnCallDutyPolicyTimeLog. Each field can use various operators based on its data type.",
        "example": {
          "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
          "createdAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLogSelectSchema": {
        "type": "object",
        "description": "Select schema for OnCallDutyPolicyTimeLog. Set fields to true to include them in the response.",
        "example": {
          "_id": true,
          "createdAt": true,
          "updatedAt": true
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLogSortSchema": {
        "type": "object",
        "description": "Sort schema for OnCallDutyPolicyTimeLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "OnCallDutyPolicyTimeLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for OnCallDutyPolicyTimeLog. Only one field can be set to true for grouping.",
        "example": {
          "createdAt": true
        },
        "additionalProperties": false
      },
      "LogItem": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "severityText": {
            "type": "string",
            "description": "Severity Text",
            "example": "Example text value"
          },
          "severityNumber": {
            "type": "number",
            "description": "Severity Number",
            "example": 42
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "body": {
            "type": "string",
            "description": "Log Body",
            "example": "Example text value"
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "time",
          "timeUnixNano",
          "severityText",
          "severityNumber"
        ]
      },
      "LogItemCreateSchema": {
        "type": "object",
        "description": "Create schema for LogItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "time": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "LogItemReadSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "severityText": {
            "type": "string",
            "description": "Severity Text",
            "example": "Example text value"
          },
          "severityNumber": {
            "type": "number",
            "description": "Severity Number",
            "example": 42
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "body": {
            "type": "string",
            "description": "Log Body",
            "example": "Example text value"
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "time",
          "timeUnixNano",
          "severityText",
          "severityNumber"
        ]
      },
      "LogItemUpdateSchema": {
        "type": "object",
        "description": "Create schema for LogItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "time": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "LogItemDeleteSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "severityText": {
            "type": "string",
            "description": "Severity Text",
            "example": "Example text value"
          },
          "severityNumber": {
            "type": "number",
            "description": "Severity Number",
            "example": 42
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "body": {
            "type": "string",
            "description": "Log Body",
            "example": "Example text value"
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "time",
          "timeUnixNano",
          "severityText",
          "severityNumber"
        ]
      },
      "LogItemQuerySchema": {
        "type": "object",
        "description": "Query schema for LogItem. Each field can use various operators based on its data type.",
        "example": {
          "time": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "severityText": {
            "_type": "EqualTo",
            "value": "example text"
          }
        },
        "additionalProperties": false
      },
      "LogItemSelectSchema": {
        "type": "object",
        "description": "Select schema for LogItem. Set fields to true to include them in the response.",
        "example": {
          "projectId": true,
          "serviceId": true,
          "time": true
        },
        "additionalProperties": false
      },
      "LogItemSortSchema": {
        "type": "object",
        "description": "Sort schema for LogItem. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "LogItemGroupBySchema": {
        "type": "object",
        "description": "Group by schema for LogItem. Only one field can be set to true for grouping.",
        "example": {
          "projectId": true
        },
        "additionalProperties": false
      },
      "SpanItem": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "startTimeUnixNano": {
            "type": "number",
            "description": "Start Time in Unix Nano",
            "example": 1000000
          },
          "durationUnixNano": {
            "type": "number",
            "description": "Duration in Unix Nano",
            "example": 1000000
          },
          "endTimeUnixNano": {
            "type": "number",
            "description": "End Time",
            "example": 1000000
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "parentSpanId": {
            "type": "string",
            "description": "Parent Span ID",
            "example": "Example text value"
          },
          "traceState": {
            "type": "string",
            "description": "Trace State",
            "example": "Example text value"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "events": {
            "type": "array",
            "description": "Events",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "key": "value"
              },
              {
                "key2": "value2"
              }
            ]
          },
          "links": {
            "type": "object",
            "description": "Links",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 42
          },
          "statusMessage": {
            "type": "string",
            "description": "Status Message",
            "example": "Example text value"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Example text value"
          },
          "kind": {
            "type": "string",
            "description": "Kind",
            "example": "Example text value"
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "startTime",
          "endTime",
          "startTimeUnixNano",
          "durationUnixNano",
          "endTimeUnixNano",
          "traceId",
          "spanId",
          "events"
        ]
      },
      "SpanItemCreateSchema": {
        "type": "object",
        "description": "Create schema for SpanItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "startTime": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "SpanItemReadSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "startTimeUnixNano": {
            "type": "number",
            "description": "Start Time in Unix Nano",
            "example": 1000000
          },
          "durationUnixNano": {
            "type": "number",
            "description": "Duration in Unix Nano",
            "example": 1000000
          },
          "endTimeUnixNano": {
            "type": "number",
            "description": "End Time",
            "example": 1000000
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "parentSpanId": {
            "type": "string",
            "description": "Parent Span ID",
            "example": "Example text value"
          },
          "traceState": {
            "type": "string",
            "description": "Trace State",
            "example": "Example text value"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "events": {
            "type": "array",
            "description": "Events",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "key": "value"
              },
              {
                "key2": "value2"
              }
            ]
          },
          "links": {
            "type": "object",
            "description": "Links",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 42
          },
          "statusMessage": {
            "type": "string",
            "description": "Status Message",
            "example": "Example text value"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Example text value"
          },
          "kind": {
            "type": "string",
            "description": "Kind",
            "example": "Example text value"
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "startTime",
          "endTime",
          "startTimeUnixNano",
          "durationUnixNano",
          "endTimeUnixNano",
          "traceId",
          "spanId",
          "events"
        ]
      },
      "SpanItemUpdateSchema": {
        "type": "object",
        "description": "Create schema for SpanItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "startTime": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "SpanItemDeleteSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "startTimeUnixNano": {
            "type": "number",
            "description": "Start Time in Unix Nano",
            "example": 1000000
          },
          "durationUnixNano": {
            "type": "number",
            "description": "Duration in Unix Nano",
            "example": 1000000
          },
          "endTimeUnixNano": {
            "type": "number",
            "description": "End Time",
            "example": 1000000
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "parentSpanId": {
            "type": "string",
            "description": "Parent Span ID",
            "example": "Example text value"
          },
          "traceState": {
            "type": "string",
            "description": "Trace State",
            "example": "Example text value"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "events": {
            "type": "array",
            "description": "Events",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "key": "value"
              },
              {
                "key2": "value2"
              }
            ]
          },
          "links": {
            "type": "object",
            "description": "Links",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 42
          },
          "statusMessage": {
            "type": "string",
            "description": "Status Message",
            "example": "Example text value"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Example text value"
          },
          "kind": {
            "type": "string",
            "description": "Kind",
            "example": "Example text value"
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "startTime",
          "endTime",
          "startTimeUnixNano",
          "durationUnixNano",
          "endTimeUnixNano",
          "traceId",
          "spanId",
          "events"
        ]
      },
      "SpanItemQuerySchema": {
        "type": "object",
        "description": "Query schema for SpanItem. Each field can use various operators based on its data type.",
        "example": {
          "startTime": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "endTime": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "SpanItemSelectSchema": {
        "type": "object",
        "description": "Select schema for SpanItem. Set fields to true to include them in the response.",
        "example": {
          "projectId": true,
          "serviceId": true,
          "startTime": true
        },
        "additionalProperties": false
      },
      "SpanItemSortSchema": {
        "type": "object",
        "description": "Sort schema for SpanItem. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "SpanItemGroupBySchema": {
        "type": "object",
        "description": "Group by schema for SpanItem. Only one field can be set to true for grouping.",
        "example": {
          "projectId": true
        },
        "additionalProperties": false
      },
      "MetricItem": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceType": {
            "type": "string",
            "description": "Service Type",
            "example": "Example text value"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Example text value"
          },
          "aggregationTemporality": {
            "type": "string",
            "description": "Aggregation Temporality",
            "example": "Example text value"
          },
          "metricPointType": {
            "type": "string",
            "description": "Metric Point Type",
            "example": "Example text value"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "startTimeUnixNano": {
            "type": "number",
            "description": "Start Time (in Unix Nano)",
            "example": 1000000
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isMonotonic": {
            "type": "boolean",
            "description": "Is Monotonic",
            "example": true
          },
          "count": {
            "type": "number",
            "description": "Count",
            "example": 42
          },
          "sum": {
            "type": "number",
            "description": "Sum",
            "example": 123.45
          },
          "value": {
            "type": "number",
            "description": "Value",
            "example": 123.45
          },
          "min": {
            "type": "number",
            "description": "Min",
            "example": 123.45
          },
          "max": {
            "type": "number",
            "description": "Max",
            "example": 123.45
          },
          "bucketCounts": {
            "type": "array",
            "description": "Bucket Counts",
            "items": {
              "type": "number"
            },
            "example": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "explicitBounds": {
            "type": "array",
            "description": "Explicit Bonds",
            "items": {
              "type": "number"
            },
            "example": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "name",
          "time",
          "timeUnixNano",
          "bucketCounts",
          "explicitBounds"
        ]
      },
      "MetricItemCreateSchema": {
        "type": "object",
        "description": "Create schema for MetricItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceType": "example text"
        },
        "additionalProperties": false
      },
      "MetricItemReadSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceType": {
            "type": "string",
            "description": "Service Type",
            "example": "Example text value"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Example text value"
          },
          "aggregationTemporality": {
            "type": "string",
            "description": "Aggregation Temporality",
            "example": "Example text value"
          },
          "metricPointType": {
            "type": "string",
            "description": "Metric Point Type",
            "example": "Example text value"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "startTimeUnixNano": {
            "type": "number",
            "description": "Start Time (in Unix Nano)",
            "example": 1000000
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isMonotonic": {
            "type": "boolean",
            "description": "Is Monotonic",
            "example": true
          },
          "count": {
            "type": "number",
            "description": "Count",
            "example": 42
          },
          "sum": {
            "type": "number",
            "description": "Sum",
            "example": 123.45
          },
          "value": {
            "type": "number",
            "description": "Value",
            "example": 123.45
          },
          "min": {
            "type": "number",
            "description": "Min",
            "example": 123.45
          },
          "max": {
            "type": "number",
            "description": "Max",
            "example": 123.45
          },
          "bucketCounts": {
            "type": "array",
            "description": "Bucket Counts",
            "items": {
              "type": "number"
            },
            "example": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "explicitBounds": {
            "type": "array",
            "description": "Explicit Bonds",
            "items": {
              "type": "number"
            },
            "example": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "name",
          "time",
          "timeUnixNano",
          "bucketCounts",
          "explicitBounds"
        ]
      },
      "MetricItemUpdateSchema": {
        "type": "object",
        "description": "Create schema for MetricItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceType": "example text"
        },
        "additionalProperties": false
      },
      "MetricItemDeleteSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceType": {
            "type": "string",
            "description": "Service Type",
            "example": "Example text value"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Example text value"
          },
          "aggregationTemporality": {
            "type": "string",
            "description": "Aggregation Temporality",
            "example": "Example text value"
          },
          "metricPointType": {
            "type": "string",
            "description": "Metric Point Type",
            "example": "Example text value"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "startTimeUnixNano": {
            "type": "number",
            "description": "Start Time (in Unix Nano)",
            "example": 1000000
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          },
          "isMonotonic": {
            "type": "boolean",
            "description": "Is Monotonic",
            "example": true
          },
          "count": {
            "type": "number",
            "description": "Count",
            "example": 42
          },
          "sum": {
            "type": "number",
            "description": "Sum",
            "example": 123.45
          },
          "value": {
            "type": "number",
            "description": "Value",
            "example": 123.45
          },
          "min": {
            "type": "number",
            "description": "Min",
            "example": 123.45
          },
          "max": {
            "type": "number",
            "description": "Max",
            "example": 123.45
          },
          "bucketCounts": {
            "type": "array",
            "description": "Bucket Counts",
            "items": {
              "type": "number"
            },
            "example": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "explicitBounds": {
            "type": "array",
            "description": "Explicit Bonds",
            "items": {
              "type": "number"
            },
            "example": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "name",
          "time",
          "timeUnixNano",
          "bucketCounts",
          "explicitBounds"
        ]
      },
      "MetricItemQuerySchema": {
        "type": "object",
        "description": "Query schema for MetricItem. Each field can use various operators based on its data type.",
        "example": {
          "serviceType": {
            "_type": "EqualTo",
            "value": "example text"
          },
          "name": {
            "_type": "EqualTo",
            "value": "example text"
          }
        },
        "additionalProperties": false
      },
      "MetricItemSelectSchema": {
        "type": "object",
        "description": "Select schema for MetricItem. Set fields to true to include them in the response.",
        "example": {
          "projectId": true,
          "serviceId": true,
          "serviceType": true
        },
        "additionalProperties": false
      },
      "MetricItemSortSchema": {
        "type": "object",
        "description": "Sort schema for MetricItem. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MetricItemGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MetricItem. Only one field can be set to true for grouping.",
        "example": {
          "projectId": true
        },
        "additionalProperties": false
      },
      "TelemetryAttribute": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "telemetryType": {
            "type": "string",
            "description": "Telemetry Type",
            "example": "Example text value"
          },
          "attributes": {
            "type": "array",
            "description": "Attributes",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "key": "value"
              },
              {
                "key2": "value2"
              }
            ]
          }
        },
        "required": [
          "projectId",
          "telemetryType",
          "attributes"
        ]
      },
      "TelemetryAttributeCreateSchema": {
        "type": "object",
        "description": "Create schema for TelemetryAttribute",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "telemetryType": "example text",
          "attributes": [
            {
              "key": "value"
            }
          ]
        },
        "additionalProperties": false
      },
      "TelemetryAttributeReadSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "telemetryType": {
            "type": "string",
            "description": "Telemetry Type",
            "example": "Example text value"
          },
          "attributes": {
            "type": "array",
            "description": "Attributes",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "key": "value"
              },
              {
                "key2": "value2"
              }
            ]
          }
        },
        "required": [
          "projectId",
          "telemetryType",
          "attributes"
        ]
      },
      "TelemetryAttributeUpdateSchema": {
        "type": "object",
        "description": "Create schema for TelemetryAttribute",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "telemetryType": "example text",
          "attributes": [
            {
              "key": "value"
            }
          ]
        },
        "additionalProperties": false
      },
      "TelemetryAttributeDeleteSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "telemetryType": {
            "type": "string",
            "description": "Telemetry Type",
            "example": "Example text value"
          },
          "attributes": {
            "type": "array",
            "description": "Attributes",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "key": "value"
              },
              {
                "key2": "value2"
              }
            ]
          }
        },
        "required": [
          "projectId",
          "telemetryType",
          "attributes"
        ]
      },
      "TelemetryAttributeQuerySchema": {
        "type": "object",
        "description": "Query schema for TelemetryAttribute. Each field can use various operators based on its data type.",
        "example": {
          "telemetryType": {
            "_type": "EqualTo",
            "value": "example text"
          }
        },
        "additionalProperties": false
      },
      "TelemetryAttributeSelectSchema": {
        "type": "object",
        "description": "Select schema for TelemetryAttribute. Set fields to true to include them in the response.",
        "example": {
          "projectId": true,
          "telemetryType": true,
          "attributes": true
        },
        "additionalProperties": false
      },
      "TelemetryAttributeSortSchema": {
        "type": "object",
        "description": "Sort schema for TelemetryAttribute. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "TelemetryAttributeGroupBySchema": {
        "type": "object",
        "description": "Group by schema for TelemetryAttribute. Only one field can be set to true for grouping.",
        "example": {
          "projectId": true
        },
        "additionalProperties": false
      },
      "ExceptionItem": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "exceptionType": {
            "type": "string",
            "description": "Exception Type",
            "example": "Example text value"
          },
          "stackTrace": {
            "type": "string",
            "description": "Stack Trace",
            "example": "Example text value"
          },
          "message": {
            "type": "string",
            "description": "Exception Message",
            "example": "Example text value"
          },
          "spanStatusCode": {
            "type": "number",
            "description": "Span Status Code",
            "example": 42
          },
          "escaped": {
            "type": "boolean",
            "description": "Exception Escaped",
            "example": true
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint",
            "example": "Example text value"
          },
          "spanName": {
            "type": "string",
            "description": "Span Name",
            "example": "Example text value"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "time",
          "timeUnixNano",
          "fingerprint"
        ]
      },
      "ExceptionItemCreateSchema": {
        "type": "object",
        "description": "Create schema for ExceptionItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "time": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "ExceptionItemReadSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "exceptionType": {
            "type": "string",
            "description": "Exception Type",
            "example": "Example text value"
          },
          "stackTrace": {
            "type": "string",
            "description": "Stack Trace",
            "example": "Example text value"
          },
          "message": {
            "type": "string",
            "description": "Exception Message",
            "example": "Example text value"
          },
          "spanStatusCode": {
            "type": "number",
            "description": "Span Status Code",
            "example": 42
          },
          "escaped": {
            "type": "boolean",
            "description": "Exception Escaped",
            "example": true
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint",
            "example": "Example text value"
          },
          "spanName": {
            "type": "string",
            "description": "Span Name",
            "example": "Example text value"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "time",
          "timeUnixNano",
          "fingerprint"
        ]
      },
      "ExceptionItemUpdateSchema": {
        "type": "object",
        "description": "Create schema for ExceptionItem",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "time": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "ExceptionItemDeleteSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "timeUnixNano": {
            "type": "number",
            "description": "Time (in Unix Nano)",
            "example": 1000000
          },
          "exceptionType": {
            "type": "string",
            "description": "Exception Type",
            "example": "Example text value"
          },
          "stackTrace": {
            "type": "string",
            "description": "Stack Trace",
            "example": "Example text value"
          },
          "message": {
            "type": "string",
            "description": "Exception Message",
            "example": "Example text value"
          },
          "spanStatusCode": {
            "type": "number",
            "description": "Span Status Code",
            "example": 42
          },
          "escaped": {
            "type": "boolean",
            "description": "Exception Escaped",
            "example": true
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID",
            "example": "Example text value"
          },
          "spanId": {
            "type": "string",
            "description": "Span ID",
            "example": "Example text value"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint",
            "example": "Example text value"
          },
          "spanName": {
            "type": "string",
            "description": "Span Name",
            "example": "Example text value"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "serviceId",
          "time",
          "timeUnixNano",
          "fingerprint"
        ]
      },
      "ExceptionItemQuerySchema": {
        "type": "object",
        "description": "Query schema for ExceptionItem. Each field can use various operators based on its data type.",
        "example": {
          "time": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          },
          "exceptionType": {
            "_type": "EqualTo",
            "value": "example text"
          }
        },
        "additionalProperties": false
      },
      "ExceptionItemSelectSchema": {
        "type": "object",
        "description": "Select schema for ExceptionItem. Set fields to true to include them in the response.",
        "example": {
          "projectId": true,
          "serviceId": true,
          "time": true
        },
        "additionalProperties": false
      },
      "ExceptionItemSortSchema": {
        "type": "object",
        "description": "Sort schema for ExceptionItem. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "ExceptionItemGroupBySchema": {
        "type": "object",
        "description": "Group by schema for ExceptionItem. Only one field can be set to true for grouping.",
        "example": {
          "projectId": true
        },
        "additionalProperties": false
      },
      "MonitorLog": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "monitorId": {
            "type": "string",
            "description": "Monitor ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "logBody": {
            "type": "object",
            "description": "Log Body",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "monitorId",
          "time"
        ]
      },
      "MonitorLogCreateSchema": {
        "type": "object",
        "description": "Create schema for MonitorLog",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "monitorId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "time": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "MonitorLogReadSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "monitorId": {
            "type": "string",
            "description": "Monitor ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "logBody": {
            "type": "object",
            "description": "Log Body",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "monitorId",
          "time"
        ]
      },
      "MonitorLogUpdateSchema": {
        "type": "object",
        "description": "Create schema for MonitorLog",
        "example": {
          "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "monitorId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "time": "2023-01-15T12:30:00.000Z"
        },
        "additionalProperties": false
      },
      "MonitorLogDeleteSchema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "monitorId": {
            "type": "string",
            "description": "Monitor ID",
            "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "time": {
            "type": "string",
            "description": "Time",
            "format": "date-time",
            "example": "2023-01-15T12:30:00.000Z"
          },
          "logBody": {
            "type": "object",
            "description": "Log Body",
            "example": {
              "key": "value",
              "nested": {
                "data": 123
              }
            }
          }
        },
        "required": [
          "projectId",
          "monitorId",
          "time"
        ]
      },
      "MonitorLogQuerySchema": {
        "type": "object",
        "description": "Query schema for MonitorLog. Each field can use various operators based on its data type.",
        "example": {
          "time": {
            "_type": "GreaterThan",
            "value": "2023-01-01T00:00:00.000Z"
          }
        },
        "additionalProperties": false
      },
      "MonitorLogSelectSchema": {
        "type": "object",
        "description": "Select schema for MonitorLog. Set fields to true to include them in the response.",
        "example": {
          "projectId": true,
          "monitorId": true,
          "time": true
        },
        "additionalProperties": false
      },
      "MonitorLogSortSchema": {
        "type": "object",
        "description": "Sort schema for MonitorLog. Only sortable fields are included.",
        "example": {
          "createdAt": "DESC"
        },
        "additionalProperties": false
      },
      "MonitorLogGroupBySchema": {
        "type": "object",
        "description": "Group by schema for MonitorLog. Only one field can be set to true for grouping.",
        "example": {
          "projectId": true
        },
        "additionalProperties": false
      }
    },
    "parameters": {},
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "APIKey",
        "description": "API key for authentication. Required for all API requests."
      }
    }
  },
  "paths": {
    "/user/get-list": {
      "post": {
        "operationId": "listUser",
        "summary": "List User",
        "description": "Endpoint to list all User items",
        "tags": [
          "User"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/UserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/UserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/user/count": {
      "post": {
        "operationId": "countUser",
        "summary": "Count User",
        "description": "Endpoint to count User items",
        "tags": [
          "User"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe/get-list": {
      "post": {
        "operationId": "listProbe",
        "summary": "List Probe",
        "description": "Endpoint to list all Probe items",
        "tags": [
          "Probe"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProbeQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ProbeSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Probe"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe/count": {
      "post": {
        "operationId": "countProbe",
        "summary": "Count Probe",
        "description": "Endpoint to count Probe items",
        "tags": [
          "Probe"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProbeQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe": {
      "post": {
        "operationId": "createProbe",
        "summary": "Create Probe",
        "description": "Endpoint to create a new Probe",
        "tags": [
          "Probe"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProbeCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe/{id}": {
      "post": {
        "operationId": "getProbe",
        "summary": "Get Probe",
        "description": "Endpoint to retrieve a single Probe by ID",
        "tags": [
          "Probe"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ProbeSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Probe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateProbe",
        "summary": "Update Probe",
        "description": "Endpoint to update an existing Probe",
        "tags": [
          "Probe"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProbeUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteProbe",
        "summary": "Delete Probe",
        "description": "Endpoint to delete a Probe",
        "tags": [
          "Probe"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/project/get-list": {
      "post": {
        "operationId": "listProject",
        "summary": "List Project",
        "description": "Endpoint to list all Project items",
        "tags": [
          "Project"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProjectQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProjectSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ProjectSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/project/count": {
      "post": {
        "operationId": "countProject",
        "summary": "Count Project",
        "description": "Endpoint to count Project items",
        "tags": [
          "Project"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProjectQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/project": {
      "post": {
        "operationId": "createProject",
        "summary": "Create Project",
        "description": "Endpoint to create a new Project",
        "tags": [
          "Project"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProjectCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProjectSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/project/{id}": {
      "post": {
        "operationId": "getProject",
        "summary": "Get Project",
        "description": "Endpoint to retrieve a single Project by ID",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Project to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ProjectSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateProject",
        "summary": "Update Project",
        "description": "Endpoint to update an existing Project",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Project to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProjectUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProjectSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteProject",
        "summary": "Delete Project",
        "description": "Endpoint to delete a Project",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Project to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team/get-list": {
      "post": {
        "operationId": "listTeam",
        "summary": "List Team",
        "description": "Endpoint to list all Team items",
        "tags": [
          "Team"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Team"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team/count": {
      "post": {
        "operationId": "countTeam",
        "summary": "Count Team",
        "description": "Endpoint to count Team items",
        "tags": [
          "Team"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team": {
      "post": {
        "operationId": "createTeam",
        "summary": "Create Team",
        "description": "Endpoint to create a new Team",
        "tags": [
          "Team"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team/{id}": {
      "post": {
        "operationId": "getTeam",
        "summary": "Get Team",
        "description": "Endpoint to retrieve a single Team by ID",
        "tags": [
          "Team"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Team"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTeam",
        "summary": "Update Team",
        "description": "Endpoint to update an existing Team",
        "tags": [
          "Team"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTeam",
        "summary": "Delete Team",
        "description": "Endpoint to delete a Team",
        "tags": [
          "Team"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-member/get-list": {
      "post": {
        "operationId": "listTeamMember",
        "summary": "List Team Member",
        "description": "Endpoint to list all Team Member items",
        "tags": [
          "Team Member"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TeamMemberQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamMemberSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TeamMemberSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TeamMember"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-member/count": {
      "post": {
        "operationId": "countTeamMember",
        "summary": "Count Team Member",
        "description": "Endpoint to count Team Member items",
        "tags": [
          "Team Member"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TeamMemberQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-member": {
      "post": {
        "operationId": "createTeamMember",
        "summary": "Create Team Member",
        "description": "Endpoint to create a new Team Member",
        "tags": [
          "Team Member"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TeamMemberCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamMemberSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamMemberReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-member/{id}": {
      "post": {
        "operationId": "getTeamMember",
        "summary": "Get Team Member",
        "description": "Endpoint to retrieve a single Team Member by ID",
        "tags": [
          "Team Member"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team Member to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TeamMemberSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamMember"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTeamMember",
        "summary": "Update Team Member",
        "description": "Endpoint to update an existing Team Member",
        "tags": [
          "Team Member"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team Member to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TeamMemberUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamMemberSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamMemberReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTeamMember",
        "summary": "Delete Team Member",
        "description": "Endpoint to delete a Team Member",
        "tags": [
          "Team Member"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team Member to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-permission/get-list": {
      "post": {
        "operationId": "listTeamPermission",
        "summary": "List Team Permission",
        "description": "Endpoint to list all Team Permission items",
        "tags": [
          "Team Permission"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TeamPermissionQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamPermissionSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TeamPermissionSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TeamPermission"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-permission/count": {
      "post": {
        "operationId": "countTeamPermission",
        "summary": "Count Team Permission",
        "description": "Endpoint to count Team Permission items",
        "tags": [
          "Team Permission"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TeamPermissionQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-permission": {
      "post": {
        "operationId": "createTeamPermission",
        "summary": "Create Team Permission",
        "description": "Endpoint to create a new Team Permission",
        "tags": [
          "Team Permission"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TeamPermissionCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamPermissionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamPermissionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/team-permission/{id}": {
      "post": {
        "operationId": "getTeamPermission",
        "summary": "Get Team Permission",
        "description": "Endpoint to retrieve a single Team Permission by ID",
        "tags": [
          "Team Permission"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team Permission to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TeamPermissionSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamPermission"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTeamPermission",
        "summary": "Update Team Permission",
        "description": "Endpoint to update an existing Team Permission",
        "tags": [
          "Team Permission"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team Permission to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TeamPermissionUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TeamPermissionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TeamPermissionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTeamPermission",
        "summary": "Delete Team Permission",
        "description": "Endpoint to delete a Team Permission",
        "tags": [
          "Team Permission"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team Permission to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key/get-list": {
      "post": {
        "operationId": "listApiKey",
        "summary": "List API Key",
        "description": "Endpoint to list all API Key items",
        "tags": [
          "API Key"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ApiKeyQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ApiKeySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ApiKeySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ApiKey"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key/count": {
      "post": {
        "operationId": "countApiKey",
        "summary": "Count API Key",
        "description": "Endpoint to count API Key items",
        "tags": [
          "API Key"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ApiKeyQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key": {
      "post": {
        "operationId": "createApiKey",
        "summary": "Create API Key",
        "description": "Endpoint to create a new API Key",
        "tags": [
          "API Key"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ApiKeyCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ApiKeySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ApiKeyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key/{id}": {
      "post": {
        "operationId": "getApiKey",
        "summary": "Get API Key",
        "description": "Endpoint to retrieve a single API Key by ID",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the API Key to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ApiKeySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ApiKey"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateApiKey",
        "summary": "Update API Key",
        "description": "Endpoint to update an existing API Key",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the API Key to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ApiKeyUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ApiKeySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ApiKeyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteApiKey",
        "summary": "Delete API Key",
        "description": "Endpoint to delete a API Key",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the API Key to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/label/get-list": {
      "post": {
        "operationId": "listLabel",
        "summary": "List Label",
        "description": "Endpoint to list all Label items",
        "tags": [
          "Label"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/LabelQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/LabelSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/LabelSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/label/count": {
      "post": {
        "operationId": "countLabel",
        "summary": "Count Label",
        "description": "Endpoint to count Label items",
        "tags": [
          "Label"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/LabelQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/label": {
      "post": {
        "operationId": "createLabel",
        "summary": "Create Label",
        "description": "Endpoint to create a new Label",
        "tags": [
          "Label"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/LabelCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/LabelSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LabelReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/label/{id}": {
      "post": {
        "operationId": "getLabel",
        "summary": "Get Label",
        "description": "Endpoint to retrieve a single Label by ID",
        "tags": [
          "Label"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Label to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/LabelSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Label"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateLabel",
        "summary": "Update Label",
        "description": "Endpoint to update an existing Label",
        "tags": [
          "Label"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Label to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/LabelUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/LabelSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LabelReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteLabel",
        "summary": "Delete Label",
        "description": "Endpoint to delete a Label",
        "tags": [
          "Label"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Label to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key-permission/get-list": {
      "post": {
        "operationId": "listApiKeyPermission",
        "summary": "List API Key Permission",
        "description": "Endpoint to list all API Key Permission items",
        "tags": [
          "API Key Permission"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ApiKeyPermissionQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ApiKeyPermissionSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ApiKeyPermissionSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ApiKeyPermission"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key-permission/count": {
      "post": {
        "operationId": "countApiKeyPermission",
        "summary": "Count API Key Permission",
        "description": "Endpoint to count API Key Permission items",
        "tags": [
          "API Key Permission"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ApiKeyPermissionQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key-permission": {
      "post": {
        "operationId": "createApiKeyPermission",
        "summary": "Create API Key Permission",
        "description": "Endpoint to create a new API Key Permission",
        "tags": [
          "API Key Permission"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ApiKeyPermissionCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ApiKeyPermissionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ApiKeyPermissionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/api-key-permission/{id}": {
      "post": {
        "operationId": "getApiKeyPermission",
        "summary": "Get API Key Permission",
        "description": "Endpoint to retrieve a single API Key Permission by ID",
        "tags": [
          "API Key Permission"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the API Key Permission to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ApiKeyPermissionSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ApiKeyPermission"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateApiKeyPermission",
        "summary": "Update API Key Permission",
        "description": "Endpoint to update an existing API Key Permission",
        "tags": [
          "API Key Permission"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the API Key Permission to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ApiKeyPermissionUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ApiKeyPermissionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ApiKeyPermissionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteApiKeyPermission",
        "summary": "Delete API Key Permission",
        "description": "Endpoint to delete a API Key Permission",
        "tags": [
          "API Key Permission"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the API Key Permission to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page/get-list": {
      "post": {
        "operationId": "listStatusPage",
        "summary": "List Status Page",
        "description": "Endpoint to list all Status Page items",
        "tags": [
          "Status Page"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPage"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page/count": {
      "post": {
        "operationId": "countStatusPage",
        "summary": "Count Status Page",
        "description": "Endpoint to count Status Page items",
        "tags": [
          "Status Page"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page": {
      "post": {
        "operationId": "createStatusPage",
        "summary": "Create Status Page",
        "description": "Endpoint to create a new Status Page",
        "tags": [
          "Status Page"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page/{id}": {
      "post": {
        "operationId": "getStatusPage",
        "summary": "Get Status Page",
        "description": "Endpoint to retrieve a single Status Page by ID",
        "tags": [
          "Status Page"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPage"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPage",
        "summary": "Update Status Page",
        "description": "Endpoint to update an existing Status Page",
        "tags": [
          "Status Page"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPage",
        "summary": "Delete Status Page",
        "description": "Endpoint to delete a Status Page",
        "tags": [
          "Status Page"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicy",
        "summary": "List On-Call Policy",
        "description": "Endpoint to list all On-Call Policy items",
        "tags": [
          "On-Call Policy"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicy"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy/count": {
      "post": {
        "operationId": "countOnCallDutyPolicy",
        "summary": "Count On-Call Policy",
        "description": "Endpoint to count On-Call Policy items",
        "tags": [
          "On-Call Policy"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy": {
      "post": {
        "operationId": "createOnCallDutyPolicy",
        "summary": "Create On-Call Policy",
        "description": "Endpoint to create a new On-Call Policy",
        "tags": [
          "On-Call Policy"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicy",
        "summary": "Get On-Call Policy",
        "description": "Endpoint to retrieve a single On-Call Policy by ID",
        "tags": [
          "On-Call Policy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicy",
        "summary": "Update On-Call Policy",
        "description": "Endpoint to update an existing On-Call Policy",
        "tags": [
          "On-Call Policy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicy",
        "summary": "Delete On-Call Policy",
        "description": "Endpoint to delete a On-Call Policy",
        "tags": [
          "On-Call Policy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-custom-field/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyCustomField",
        "summary": "List On-Call Policy Custom Field",
        "description": "Endpoint to list all On-Call Policy Custom Field items",
        "tags": [
          "On-Call Policy Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyCustomField"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-custom-field/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyCustomField",
        "summary": "Count On-Call Policy Custom Field",
        "description": "Endpoint to count On-Call Policy Custom Field items",
        "tags": [
          "On-Call Policy Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-custom-field": {
      "post": {
        "operationId": "createOnCallDutyPolicyCustomField",
        "summary": "Create On-Call Policy Custom Field",
        "description": "Endpoint to create a new On-Call Policy Custom Field",
        "tags": [
          "On-Call Policy Custom Field"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-custom-field/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyCustomField",
        "summary": "Get On-Call Policy Custom Field",
        "description": "Endpoint to retrieve a single On-Call Policy Custom Field by ID",
        "tags": [
          "On-Call Policy Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy Custom Field to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyCustomField"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyCustomField",
        "summary": "Update On-Call Policy Custom Field",
        "description": "Endpoint to update an existing On-Call Policy Custom Field",
        "tags": [
          "On-Call Policy Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy Custom Field to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyCustomField",
        "summary": "Delete On-Call Policy Custom Field",
        "description": "Endpoint to delete a On-Call Policy Custom Field",
        "tags": [
          "On-Call Policy Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy Custom Field to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyEscalationRule",
        "summary": "List Escalation Rule",
        "description": "Endpoint to list all Escalation Rule items",
        "tags": [
          "Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRule"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyEscalationRule",
        "summary": "Count Escalation Rule",
        "description": "Endpoint to count Escalation Rule items",
        "tags": [
          "Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule": {
      "post": {
        "operationId": "createOnCallDutyPolicyEscalationRule",
        "summary": "Create Escalation Rule",
        "description": "Endpoint to create a new Escalation Rule",
        "tags": [
          "Escalation Rule"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyEscalationRule",
        "summary": "Get Escalation Rule",
        "description": "Endpoint to retrieve a single Escalation Rule by ID",
        "tags": [
          "Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Escalation Rule to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyEscalationRule",
        "summary": "Update Escalation Rule",
        "description": "Endpoint to update an existing Escalation Rule",
        "tags": [
          "Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Escalation Rule to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyEscalationRule",
        "summary": "Delete Escalation Rule",
        "description": "Endpoint to delete a Escalation Rule",
        "tags": [
          "Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Escalation Rule to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-team/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyEscalationRuleTeam",
        "summary": "List Team On-Call Duty Escalation Rule",
        "description": "Endpoint to list all Team On-Call Duty Escalation Rule items",
        "tags": [
          "Team On-Call Duty Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-team/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyEscalationRuleTeam",
        "summary": "Count Team On-Call Duty Escalation Rule",
        "description": "Endpoint to count Team On-Call Duty Escalation Rule items",
        "tags": [
          "Team On-Call Duty Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-team": {
      "post": {
        "operationId": "createOnCallDutyPolicyEscalationRuleTeam",
        "summary": "Create Team On-Call Duty Escalation Rule",
        "description": "Endpoint to create a new Team On-Call Duty Escalation Rule",
        "tags": [
          "Team On-Call Duty Escalation Rule"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-team/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyEscalationRuleTeam",
        "summary": "Get Team On-Call Duty Escalation Rule",
        "description": "Endpoint to retrieve a single Team On-Call Duty Escalation Rule by ID",
        "tags": [
          "Team On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team On-Call Duty Escalation Rule to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyEscalationRuleTeam",
        "summary": "Update Team On-Call Duty Escalation Rule",
        "description": "Endpoint to update an existing Team On-Call Duty Escalation Rule",
        "tags": [
          "Team On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team On-Call Duty Escalation Rule to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyEscalationRuleTeam",
        "summary": "Delete Team On-Call Duty Escalation Rule",
        "description": "Endpoint to delete a Team On-Call Duty Escalation Rule",
        "tags": [
          "Team On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Team On-Call Duty Escalation Rule to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-user/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyEscalationRuleUser",
        "summary": "List User's On-Call Duty Escalation Rule",
        "description": "Endpoint to list all User's On-Call Duty Escalation Rule items",
        "tags": [
          "User's On-Call Duty Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-user/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyEscalationRuleUser",
        "summary": "Count User's On-Call Duty Escalation Rule",
        "description": "Endpoint to count User's On-Call Duty Escalation Rule items",
        "tags": [
          "User's On-Call Duty Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-user": {
      "post": {
        "operationId": "createOnCallDutyPolicyEscalationRuleUser",
        "summary": "Create User's On-Call Duty Escalation Rule",
        "description": "Endpoint to create a new User's On-Call Duty Escalation Rule",
        "tags": [
          "User's On-Call Duty Escalation Rule"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-user/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyEscalationRuleUser",
        "summary": "Get User's On-Call Duty Escalation Rule",
        "description": "Endpoint to retrieve a single User's On-Call Duty Escalation Rule by ID",
        "tags": [
          "User's On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the User's On-Call Duty Escalation Rule to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyEscalationRuleUser",
        "summary": "Update User's On-Call Duty Escalation Rule",
        "description": "Endpoint to update an existing User's On-Call Duty Escalation Rule",
        "tags": [
          "User's On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the User's On-Call Duty Escalation Rule to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyEscalationRuleUser",
        "summary": "Delete User's On-Call Duty Escalation Rule",
        "description": "Endpoint to delete a User's On-Call Duty Escalation Rule",
        "tags": [
          "User's On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the User's On-Call Duty Escalation Rule to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-execution-log/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyExecutionLog",
        "summary": "List On-Call Duty Execution Log",
        "description": "Endpoint to list all On-Call Duty Execution Log items",
        "tags": [
          "On-Call Duty Execution Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-execution-log/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyExecutionLog",
        "summary": "Count On-Call Duty Execution Log",
        "description": "Endpoint to count On-Call Duty Execution Log items",
        "tags": [
          "On-Call Duty Execution Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-execution-log": {
      "post": {
        "operationId": "createOnCallDutyPolicyExecutionLog",
        "summary": "Create On-Call Duty Execution Log",
        "description": "Endpoint to create a new On-Call Duty Execution Log",
        "tags": [
          "On-Call Duty Execution Log"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-execution-log/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyExecutionLog",
        "summary": "Get On-Call Duty Execution Log",
        "description": "Endpoint to retrieve a single On-Call Duty Execution Log by ID",
        "tags": [
          "On-Call Duty Execution Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Duty Execution Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-execution-log-timeline/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyExecutionLogTimeline",
        "summary": "List On-Call Duty Execution Log Timeline",
        "description": "Endpoint to list all On-Call Duty Execution Log Timeline items",
        "tags": [
          "On-Call Duty Execution Log Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogTimelineQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogTimelineSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogTimelineSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogTimeline"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-execution-log-timeline/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyExecutionLogTimeline",
        "summary": "Count On-Call Duty Execution Log Timeline",
        "description": "Endpoint to count On-Call Duty Execution Log Timeline items",
        "tags": [
          "On-Call Duty Execution Log Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogTimelineQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-execution-log-timeline/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyExecutionLogTimeline",
        "summary": "Get On-Call Duty Execution Log Timeline",
        "description": "Endpoint to retrieve a single On-Call Duty Execution Log Timeline by ID",
        "tags": [
          "On-Call Duty Execution Log Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Duty Execution Log Timeline to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogTimelineSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyExecutionLogTimeline"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-user-override/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyUserOverride",
        "summary": "List User Override",
        "description": "Endpoint to list all User Override items",
        "tags": [
          "User Override"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyUserOverride"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-user-override/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyUserOverride",
        "summary": "Count User Override",
        "description": "Endpoint to count User Override items",
        "tags": [
          "User Override"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-user-override": {
      "post": {
        "operationId": "createOnCallDutyPolicyUserOverride",
        "summary": "Create User Override",
        "description": "Endpoint to create a new User Override",
        "tags": [
          "User Override"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-user-override/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyUserOverride",
        "summary": "Get User Override",
        "description": "Endpoint to retrieve a single User Override by ID",
        "tags": [
          "User Override"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the User Override to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyUserOverride"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyUserOverride",
        "summary": "Update User Override",
        "description": "Endpoint to update an existing User Override",
        "tags": [
          "User Override"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the User Override to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyUserOverrideReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyUserOverride",
        "summary": "Delete User Override",
        "description": "Endpoint to delete a User Override",
        "tags": [
          "User Override"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the User Override to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor/get-list": {
      "post": {
        "operationId": "listMonitor",
        "summary": "List Monitor",
        "description": "Endpoint to list all Monitor items",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitor"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor/count": {
      "post": {
        "operationId": "countMonitor",
        "summary": "Count Monitor",
        "description": "Endpoint to count Monitor items",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor": {
      "post": {
        "operationId": "createMonitor",
        "summary": "Create Monitor",
        "description": "Endpoint to create a new Monitor",
        "tags": [
          "Monitor"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor/{id}": {
      "post": {
        "operationId": "getMonitor",
        "summary": "Get Monitor",
        "description": "Endpoint to retrieve a single Monitor by ID",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Monitor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitor",
        "summary": "Update Monitor",
        "description": "Endpoint to update an existing Monitor",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitor",
        "summary": "Delete Monitor",
        "description": "Endpoint to delete a Monitor",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-secret/get-list": {
      "post": {
        "operationId": "listMonitorSecret",
        "summary": "List Monitor Secret",
        "description": "Endpoint to list all Monitor Secret items",
        "tags": [
          "Monitor Secret"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorSecretQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorSecretSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorSecretSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorSecret"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-secret/count": {
      "post": {
        "operationId": "countMonitorSecret",
        "summary": "Count Monitor Secret",
        "description": "Endpoint to count Monitor Secret items",
        "tags": [
          "Monitor Secret"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorSecretQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-secret": {
      "post": {
        "operationId": "createMonitorSecret",
        "summary": "Create Monitor Secret",
        "description": "Endpoint to create a new Monitor Secret",
        "tags": [
          "Monitor Secret"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorSecretCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorSecretSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorSecretReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-secret/{id}": {
      "post": {
        "operationId": "getMonitorSecret",
        "summary": "Get Monitor Secret",
        "description": "Endpoint to retrieve a single Monitor Secret by ID",
        "tags": [
          "Monitor Secret"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Secret to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorSecretSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorSecret"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorSecret",
        "summary": "Update Monitor Secret",
        "description": "Endpoint to update an existing Monitor Secret",
        "tags": [
          "Monitor Secret"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Secret to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorSecretUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorSecretSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorSecretReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorSecret",
        "summary": "Delete Monitor Secret",
        "description": "Endpoint to delete a Monitor Secret",
        "tags": [
          "Monitor Secret"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Secret to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status/get-list": {
      "post": {
        "operationId": "listMonitorStatus",
        "summary": "List Monitor Status",
        "description": "Endpoint to list all Monitor Status items",
        "tags": [
          "Monitor Status"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorStatusQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorStatusSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorStatus"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status/count": {
      "post": {
        "operationId": "countMonitorStatus",
        "summary": "Count Monitor Status",
        "description": "Endpoint to count Monitor Status items",
        "tags": [
          "Monitor Status"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorStatusQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status": {
      "post": {
        "operationId": "createMonitorStatus",
        "summary": "Create Monitor Status",
        "description": "Endpoint to create a new Monitor Status",
        "tags": [
          "Monitor Status"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorStatusCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorStatusReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status/{id}": {
      "post": {
        "operationId": "getMonitorStatus",
        "summary": "Get Monitor Status",
        "description": "Endpoint to retrieve a single Monitor Status by ID",
        "tags": [
          "Monitor Status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Status to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorStatus",
        "summary": "Update Monitor Status",
        "description": "Endpoint to update an existing Monitor Status",
        "tags": [
          "Monitor Status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Status to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorStatusUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorStatusReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorStatus",
        "summary": "Delete Monitor Status",
        "description": "Endpoint to delete a Monitor Status",
        "tags": [
          "Monitor Status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Status to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-custom-field/get-list": {
      "post": {
        "operationId": "listMonitorCustomField",
        "summary": "List Monitor Custom Field",
        "description": "Endpoint to list all Monitor Custom Field items",
        "tags": [
          "Monitor Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorCustomFieldQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorCustomFieldSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorCustomFieldSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorCustomField"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-custom-field/count": {
      "post": {
        "operationId": "countMonitorCustomField",
        "summary": "Count Monitor Custom Field",
        "description": "Endpoint to count Monitor Custom Field items",
        "tags": [
          "Monitor Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorCustomFieldQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-custom-field": {
      "post": {
        "operationId": "createMonitorCustomField",
        "summary": "Create Monitor Custom Field",
        "description": "Endpoint to create a new Monitor Custom Field",
        "tags": [
          "Monitor Custom Field"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorCustomFieldCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-custom-field/{id}": {
      "post": {
        "operationId": "getMonitorCustomField",
        "summary": "Get Monitor Custom Field",
        "description": "Endpoint to retrieve a single Monitor Custom Field by ID",
        "tags": [
          "Monitor Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Custom Field to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorCustomFieldSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorCustomField"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorCustomField",
        "summary": "Update Monitor Custom Field",
        "description": "Endpoint to update an existing Monitor Custom Field",
        "tags": [
          "Monitor Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Custom Field to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorCustomFieldUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorCustomField",
        "summary": "Delete Monitor Custom Field",
        "description": "Endpoint to delete a Monitor Custom Field",
        "tags": [
          "Monitor Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Custom Field to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state/get-list": {
      "post": {
        "operationId": "listIncidentState",
        "summary": "List Incident State",
        "description": "Endpoint to list all Incident State items",
        "tags": [
          "Incident State"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentStateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentStateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentState"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state/count": {
      "post": {
        "operationId": "countIncidentState",
        "summary": "Count Incident State",
        "description": "Endpoint to count Incident State items",
        "tags": [
          "Incident State"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentStateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state": {
      "post": {
        "operationId": "createIncidentState",
        "summary": "Create Incident State",
        "description": "Endpoint to create a new Incident State",
        "tags": [
          "Incident State"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentStateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentStateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state/{id}": {
      "post": {
        "operationId": "getIncidentState",
        "summary": "Get Incident State",
        "description": "Endpoint to retrieve a single Incident State by ID",
        "tags": [
          "Incident State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident State to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentState",
        "summary": "Update Incident State",
        "description": "Endpoint to update an existing Incident State",
        "tags": [
          "Incident State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident State to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentStateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentStateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentState",
        "summary": "Delete Incident State",
        "description": "Endpoint to delete a Incident State",
        "tags": [
          "Incident State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident State to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident/get-list": {
      "post": {
        "operationId": "listIncident",
        "summary": "List Incident",
        "description": "Endpoint to list all Incident items",
        "tags": [
          "Incident"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Incident"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident/count": {
      "post": {
        "operationId": "countIncident",
        "summary": "Count Incident",
        "description": "Endpoint to count Incident items",
        "tags": [
          "Incident"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident": {
      "post": {
        "operationId": "createIncident",
        "summary": "Create Incident",
        "description": "Endpoint to create a new Incident",
        "tags": [
          "Incident"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident/{id}": {
      "post": {
        "operationId": "getIncident",
        "summary": "Get Incident",
        "description": "Endpoint to retrieve a single Incident by ID",
        "tags": [
          "Incident"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Incident"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncident",
        "summary": "Update Incident",
        "description": "Endpoint to update an existing Incident",
        "tags": [
          "Incident"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncident",
        "summary": "Delete Incident",
        "description": "Endpoint to delete a Incident",
        "tags": [
          "Incident"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-feed/get-list": {
      "post": {
        "operationId": "listIncidentFeed",
        "summary": "List Incident Feed",
        "description": "Endpoint to list all Incident Feed items",
        "tags": [
          "Incident Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentFeedQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentFeedSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentFeedSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentFeed"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-feed/count": {
      "post": {
        "operationId": "countIncidentFeed",
        "summary": "Count Incident Feed",
        "description": "Endpoint to count Incident Feed items",
        "tags": [
          "Incident Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentFeedQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-feed": {
      "post": {
        "operationId": "createIncidentFeed",
        "summary": "Create Incident Feed",
        "description": "Endpoint to create a new Incident Feed",
        "tags": [
          "Incident Feed"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentFeedCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentFeedSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentFeedReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-feed/{id}": {
      "post": {
        "operationId": "getIncidentFeed",
        "summary": "Get Incident Feed",
        "description": "Endpoint to retrieve a single Incident Feed by ID",
        "tags": [
          "Incident Feed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Feed to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentFeedSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentFeed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-custom-field/get-list": {
      "post": {
        "operationId": "listIncidentCustomField",
        "summary": "List Incident Custom Field",
        "description": "Endpoint to list all Incident Custom Field items",
        "tags": [
          "Incident Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentCustomFieldQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentCustomFieldSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentCustomFieldSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentCustomField"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-custom-field/count": {
      "post": {
        "operationId": "countIncidentCustomField",
        "summary": "Count Incident Custom Field",
        "description": "Endpoint to count Incident Custom Field items",
        "tags": [
          "Incident Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentCustomFieldQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-custom-field": {
      "post": {
        "operationId": "createIncidentCustomField",
        "summary": "Create Incident Custom Field",
        "description": "Endpoint to create a new Incident Custom Field",
        "tags": [
          "Incident Custom Field"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentCustomFieldCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-custom-field/{id}": {
      "post": {
        "operationId": "getIncidentCustomField",
        "summary": "Get Incident Custom Field",
        "description": "Endpoint to retrieve a single Incident Custom Field by ID",
        "tags": [
          "Incident Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Custom Field to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentCustomFieldSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentCustomField"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentCustomField",
        "summary": "Update Incident Custom Field",
        "description": "Endpoint to update an existing Incident Custom Field",
        "tags": [
          "Incident Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Custom Field to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentCustomFieldUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentCustomField",
        "summary": "Delete Incident Custom Field",
        "description": "Endpoint to delete a Incident Custom Field",
        "tags": [
          "Incident Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Custom Field to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state-timeline/get-list": {
      "post": {
        "operationId": "listIncidentStateTimeline",
        "summary": "List Incident State Timeline",
        "description": "Endpoint to list all Incident State Timeline items",
        "tags": [
          "Incident State Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentStateTimelineQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateTimelineSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentStateTimelineSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentStateTimeline"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state-timeline/count": {
      "post": {
        "operationId": "countIncidentStateTimeline",
        "summary": "Count Incident State Timeline",
        "description": "Endpoint to count Incident State Timeline items",
        "tags": [
          "Incident State Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentStateTimelineQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state-timeline": {
      "post": {
        "operationId": "createIncidentStateTimeline",
        "summary": "Create Incident State Timeline",
        "description": "Endpoint to create a new Incident State Timeline",
        "tags": [
          "Incident State Timeline"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentStateTimelineCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentStateTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-state-timeline/{id}": {
      "post": {
        "operationId": "getIncidentStateTimeline",
        "summary": "Get Incident State Timeline",
        "description": "Endpoint to retrieve a single Incident State Timeline by ID",
        "tags": [
          "Incident State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident State Timeline to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateTimelineSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentStateTimeline"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentStateTimeline",
        "summary": "Update Incident State Timeline",
        "description": "Endpoint to update an existing Incident State Timeline",
        "tags": [
          "Incident State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident State Timeline to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentStateTimelineUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentStateTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentStateTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentStateTimeline",
        "summary": "Delete Incident State Timeline",
        "description": "Endpoint to delete a Incident State Timeline",
        "tags": [
          "Incident State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident State Timeline to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-internal-note/get-list": {
      "post": {
        "operationId": "listIncidentInternalNote",
        "summary": "List Incident Internal Note",
        "description": "Endpoint to list all Incident Internal Note items",
        "tags": [
          "Incident Internal Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentInternalNoteQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentInternalNoteSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentInternalNoteSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentInternalNote"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-internal-note/count": {
      "post": {
        "operationId": "countIncidentInternalNote",
        "summary": "Count Incident Internal Note",
        "description": "Endpoint to count Incident Internal Note items",
        "tags": [
          "Incident Internal Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentInternalNoteQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-internal-note": {
      "post": {
        "operationId": "createIncidentInternalNote",
        "summary": "Create Incident Internal Note",
        "description": "Endpoint to create a new Incident Internal Note",
        "tags": [
          "Incident Internal Note"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentInternalNoteCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentInternalNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentInternalNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-internal-note/{id}": {
      "post": {
        "operationId": "getIncidentInternalNote",
        "summary": "Get Incident Internal Note",
        "description": "Endpoint to retrieve a single Incident Internal Note by ID",
        "tags": [
          "Incident Internal Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Internal Note to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentInternalNoteSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentInternalNote"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentInternalNote",
        "summary": "Update Incident Internal Note",
        "description": "Endpoint to update an existing Incident Internal Note",
        "tags": [
          "Incident Internal Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Internal Note to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentInternalNoteUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentInternalNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentInternalNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentInternalNote",
        "summary": "Delete Incident Internal Note",
        "description": "Endpoint to delete a Incident Internal Note",
        "tags": [
          "Incident Internal Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Internal Note to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-public-note/get-list": {
      "post": {
        "operationId": "listIncidentPublicNote",
        "summary": "List Incident Public Note",
        "description": "Endpoint to list all Incident Public Note items",
        "tags": [
          "Incident Public Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentPublicNoteQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentPublicNoteSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentPublicNoteSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentPublicNote"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-public-note/count": {
      "post": {
        "operationId": "countIncidentPublicNote",
        "summary": "Count Incident Public Note",
        "description": "Endpoint to count Incident Public Note items",
        "tags": [
          "Incident Public Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentPublicNoteQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-public-note": {
      "post": {
        "operationId": "createIncidentPublicNote",
        "summary": "Create Incident Public Note",
        "description": "Endpoint to create a new Incident Public Note",
        "tags": [
          "Incident Public Note"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentPublicNoteCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentPublicNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentPublicNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-public-note/{id}": {
      "post": {
        "operationId": "getIncidentPublicNote",
        "summary": "Get Incident Public Note",
        "description": "Endpoint to retrieve a single Incident Public Note by ID",
        "tags": [
          "Incident Public Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Public Note to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentPublicNoteSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentPublicNote"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentPublicNote",
        "summary": "Update Incident Public Note",
        "description": "Endpoint to update an existing Incident Public Note",
        "tags": [
          "Incident Public Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Public Note to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentPublicNoteUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentPublicNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentPublicNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentPublicNote",
        "summary": "Delete Incident Public Note",
        "description": "Endpoint to delete a Incident Public Note",
        "tags": [
          "Incident Public Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Public Note to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-templates/get-list": {
      "post": {
        "operationId": "listIncidentTemplate",
        "summary": "List Incident Template",
        "description": "Endpoint to list all Incident Template items",
        "tags": [
          "Incident Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentTemplateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentTemplateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentTemplate"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-templates/count": {
      "post": {
        "operationId": "countIncidentTemplate",
        "summary": "Count Incident Template",
        "description": "Endpoint to count Incident Template items",
        "tags": [
          "Incident Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentTemplateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-templates": {
      "post": {
        "operationId": "createIncidentTemplate",
        "summary": "Create Incident Template",
        "description": "Endpoint to create a new Incident Template",
        "tags": [
          "Incident Template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentTemplateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-templates/{id}": {
      "post": {
        "operationId": "getIncidentTemplate",
        "summary": "Get Incident Template",
        "description": "Endpoint to retrieve a single Incident Template by ID",
        "tags": [
          "Incident Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentTemplate",
        "summary": "Update Incident Template",
        "description": "Endpoint to update an existing Incident Template",
        "tags": [
          "Incident Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentTemplateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentTemplate",
        "summary": "Delete Incident Template",
        "description": "Endpoint to delete a Incident Template",
        "tags": [
          "Incident Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-team/get-list": {
      "post": {
        "operationId": "listIncidentTemplateOwnerTeam",
        "summary": "List Incident Template Team Owner",
        "description": "Endpoint to list all Incident Template Team Owner items",
        "tags": [
          "Incident Template Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentTemplateOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-team/count": {
      "post": {
        "operationId": "countIncidentTemplateOwnerTeam",
        "summary": "Count Incident Template Team Owner",
        "description": "Endpoint to count Incident Template Team Owner items",
        "tags": [
          "Incident Template Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-team": {
      "post": {
        "operationId": "createIncidentTemplateOwnerTeam",
        "summary": "Create Incident Template Team Owner",
        "description": "Endpoint to create a new Incident Template Team Owner",
        "tags": [
          "Incident Template Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-team/{id}": {
      "post": {
        "operationId": "getIncidentTemplateOwnerTeam",
        "summary": "Get Incident Template Team Owner",
        "description": "Endpoint to retrieve a single Incident Template Team Owner by ID",
        "tags": [
          "Incident Template Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentTemplateOwnerTeam",
        "summary": "Update Incident Template Team Owner",
        "description": "Endpoint to update an existing Incident Template Team Owner",
        "tags": [
          "Incident Template Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentTemplateOwnerTeam",
        "summary": "Delete Incident Template Team Owner",
        "description": "Endpoint to delete a Incident Template Team Owner",
        "tags": [
          "Incident Template Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-user/get-list": {
      "post": {
        "operationId": "listIncidentTemplateOwnerUser",
        "summary": "List Incident Template User Owner",
        "description": "Endpoint to list all Incident Template User Owner items",
        "tags": [
          "Incident Template User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentTemplateOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-user/count": {
      "post": {
        "operationId": "countIncidentTemplateOwnerUser",
        "summary": "Count Incident Template User Owner",
        "description": "Endpoint to count Incident Template User Owner items",
        "tags": [
          "Incident Template User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-user": {
      "post": {
        "operationId": "createIncidentTemplateOwnerUser",
        "summary": "Create Incident Template User Owner",
        "description": "Endpoint to create a new Incident Template User Owner",
        "tags": [
          "Incident Template User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-template-owner-user/{id}": {
      "post": {
        "operationId": "getIncidentTemplateOwnerUser",
        "summary": "Get Incident Template User Owner",
        "description": "Endpoint to retrieve a single Incident Template User Owner by ID",
        "tags": [
          "Incident Template User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentTemplateOwnerUser",
        "summary": "Update Incident Template User Owner",
        "description": "Endpoint to update an existing Incident Template User Owner",
        "tags": [
          "Incident Template User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentTemplateOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentTemplateOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentTemplateOwnerUser",
        "summary": "Delete Incident Template User Owner",
        "description": "Endpoint to delete a Incident Template User Owner",
        "tags": [
          "Incident Template User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Template User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-team/get-list": {
      "post": {
        "operationId": "listIncidentOwnerTeam",
        "summary": "List Incident Team Owner",
        "description": "Endpoint to list all Incident Team Owner items",
        "tags": [
          "Incident Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-team/count": {
      "post": {
        "operationId": "countIncidentOwnerTeam",
        "summary": "Count Incident Team Owner",
        "description": "Endpoint to count Incident Team Owner items",
        "tags": [
          "Incident Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-team": {
      "post": {
        "operationId": "createIncidentOwnerTeam",
        "summary": "Create Incident Team Owner",
        "description": "Endpoint to create a new Incident Team Owner",
        "tags": [
          "Incident Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-team/{id}": {
      "post": {
        "operationId": "getIncidentOwnerTeam",
        "summary": "Get Incident Team Owner",
        "description": "Endpoint to retrieve a single Incident Team Owner by ID",
        "tags": [
          "Incident Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentOwnerTeam",
        "summary": "Update Incident Team Owner",
        "description": "Endpoint to update an existing Incident Team Owner",
        "tags": [
          "Incident Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentOwnerTeam",
        "summary": "Delete Incident Team Owner",
        "description": "Endpoint to delete a Incident Team Owner",
        "tags": [
          "Incident Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-user/get-list": {
      "post": {
        "operationId": "listIncidentOwnerUser",
        "summary": "List Incident User Owner",
        "description": "Endpoint to list all Incident User Owner items",
        "tags": [
          "Incident User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-user/count": {
      "post": {
        "operationId": "countIncidentOwnerUser",
        "summary": "Count Incident User Owner",
        "description": "Endpoint to count Incident User Owner items",
        "tags": [
          "Incident User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-user": {
      "post": {
        "operationId": "createIncidentOwnerUser",
        "summary": "Create Incident User Owner",
        "description": "Endpoint to create a new Incident User Owner",
        "tags": [
          "Incident User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-owner-user/{id}": {
      "post": {
        "operationId": "getIncidentOwnerUser",
        "summary": "Get Incident User Owner",
        "description": "Endpoint to retrieve a single Incident User Owner by ID",
        "tags": [
          "Incident User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentOwnerUser",
        "summary": "Update Incident User Owner",
        "description": "Endpoint to update an existing Incident User Owner",
        "tags": [
          "Incident User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentOwnerUser",
        "summary": "Delete Incident User Owner",
        "description": "Endpoint to delete a Incident User Owner",
        "tags": [
          "Incident User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-severity/get-list": {
      "post": {
        "operationId": "listIncidentSeverity",
        "summary": "List Incident Severity",
        "description": "Endpoint to list all Incident Severity items",
        "tags": [
          "Incident Severity"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentSeverityQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentSeveritySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentSeveritySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentSeverity"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-severity/count": {
      "post": {
        "operationId": "countIncidentSeverity",
        "summary": "Count Incident Severity",
        "description": "Endpoint to count Incident Severity items",
        "tags": [
          "Incident Severity"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentSeverityQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-severity": {
      "post": {
        "operationId": "createIncidentSeverity",
        "summary": "Create Incident Severity",
        "description": "Endpoint to create a new Incident Severity",
        "tags": [
          "Incident Severity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentSeverityCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentSeveritySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentSeverityReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-severity/{id}": {
      "post": {
        "operationId": "getIncidentSeverity",
        "summary": "Get Incident Severity",
        "description": "Endpoint to retrieve a single Incident Severity by ID",
        "tags": [
          "Incident Severity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Severity to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentSeveritySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentSeverity"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentSeverity",
        "summary": "Update Incident Severity",
        "description": "Endpoint to update an existing Incident Severity",
        "tags": [
          "Incident Severity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Severity to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentSeverityUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentSeveritySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentSeverityReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentSeverity",
        "summary": "Delete Incident Severity",
        "description": "Endpoint to delete a Incident Severity",
        "tags": [
          "Incident Severity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Severity to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-note-template/get-list": {
      "post": {
        "operationId": "listIncidentNoteTemplate",
        "summary": "List Incident Note Template",
        "description": "Endpoint to list all Incident Note Template items",
        "tags": [
          "Incident Note Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentNoteTemplate"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-note-template/count": {
      "post": {
        "operationId": "countIncidentNoteTemplate",
        "summary": "Count Incident Note Template",
        "description": "Endpoint to count Incident Note Template items",
        "tags": [
          "Incident Note Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-note-template": {
      "post": {
        "operationId": "createIncidentNoteTemplate",
        "summary": "Create Incident Note Template",
        "description": "Endpoint to create a new Incident Note Template",
        "tags": [
          "Incident Note Template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentNoteTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/incident-note-template/{id}": {
      "post": {
        "operationId": "getIncidentNoteTemplate",
        "summary": "Get Incident Note Template",
        "description": "Endpoint to retrieve a single Incident Note Template by ID",
        "tags": [
          "Incident Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Note Template to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentNoteTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateIncidentNoteTemplate",
        "summary": "Update Incident Note Template",
        "description": "Endpoint to update an existing Incident Note Template",
        "tags": [
          "Incident Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Note Template to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/IncidentNoteTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IncidentNoteTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteIncidentNoteTemplate",
        "summary": "Delete Incident Note Template",
        "description": "Endpoint to delete a Incident Note Template",
        "tags": [
          "Incident Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Incident Note Template to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state/get-list": {
      "post": {
        "operationId": "listAlertState",
        "summary": "List Alert State",
        "description": "Endpoint to list all Alert State items",
        "tags": [
          "Alert State"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertStateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertStateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertStateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertState"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state/count": {
      "post": {
        "operationId": "countAlertState",
        "summary": "Count Alert State",
        "description": "Endpoint to count Alert State items",
        "tags": [
          "Alert State"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertStateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state": {
      "post": {
        "operationId": "createAlertState",
        "summary": "Create Alert State",
        "description": "Endpoint to create a new Alert State",
        "tags": [
          "Alert State"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertStateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertStateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertStateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state/{id}": {
      "post": {
        "operationId": "getAlertState",
        "summary": "Get Alert State",
        "description": "Endpoint to retrieve a single Alert State by ID",
        "tags": [
          "Alert State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert State to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertStateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertState",
        "summary": "Update Alert State",
        "description": "Endpoint to update an existing Alert State",
        "tags": [
          "Alert State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert State to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertStateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertStateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertStateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertState",
        "summary": "Delete Alert State",
        "description": "Endpoint to delete a Alert State",
        "tags": [
          "Alert State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert State to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert/get-list": {
      "post": {
        "operationId": "listAlert",
        "summary": "List Alert",
        "description": "Endpoint to list all Alert items",
        "tags": [
          "Alert"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Alert"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert/count": {
      "post": {
        "operationId": "countAlert",
        "summary": "Count Alert",
        "description": "Endpoint to count Alert items",
        "tags": [
          "Alert"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert": {
      "post": {
        "operationId": "createAlert",
        "summary": "Create Alert",
        "description": "Endpoint to create a new Alert",
        "tags": [
          "Alert"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert/{id}": {
      "post": {
        "operationId": "getAlert",
        "summary": "Get Alert",
        "description": "Endpoint to retrieve a single Alert by ID",
        "tags": [
          "Alert"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Alert"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlert",
        "summary": "Update Alert",
        "description": "Endpoint to update an existing Alert",
        "tags": [
          "Alert"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlert",
        "summary": "Delete Alert",
        "description": "Endpoint to delete a Alert",
        "tags": [
          "Alert"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-feed/get-list": {
      "post": {
        "operationId": "listAlertFeed",
        "summary": "List Alert Feed",
        "description": "Endpoint to list all Alert Feed items",
        "tags": [
          "Alert Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertFeedQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertFeedSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertFeedSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertFeed"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-feed/count": {
      "post": {
        "operationId": "countAlertFeed",
        "summary": "Count Alert Feed",
        "description": "Endpoint to count Alert Feed items",
        "tags": [
          "Alert Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertFeedQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-feed": {
      "post": {
        "operationId": "createAlertFeed",
        "summary": "Create Alert Feed",
        "description": "Endpoint to create a new Alert Feed",
        "tags": [
          "Alert Feed"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertFeedCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertFeedSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertFeedReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-feed/{id}": {
      "post": {
        "operationId": "getAlertFeed",
        "summary": "Get Alert Feed",
        "description": "Endpoint to retrieve a single Alert Feed by ID",
        "tags": [
          "Alert Feed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Feed to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertFeedSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertFeed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-custom-field/get-list": {
      "post": {
        "operationId": "listAlertCustomField",
        "summary": "List Alert Custom Field",
        "description": "Endpoint to list all Alert Custom Field items",
        "tags": [
          "Alert Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertCustomFieldQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertCustomFieldSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertCustomFieldSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertCustomField"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-custom-field/count": {
      "post": {
        "operationId": "countAlertCustomField",
        "summary": "Count Alert Custom Field",
        "description": "Endpoint to count Alert Custom Field items",
        "tags": [
          "Alert Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertCustomFieldQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-custom-field": {
      "post": {
        "operationId": "createAlertCustomField",
        "summary": "Create Alert Custom Field",
        "description": "Endpoint to create a new Alert Custom Field",
        "tags": [
          "Alert Custom Field"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertCustomFieldCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-custom-field/{id}": {
      "post": {
        "operationId": "getAlertCustomField",
        "summary": "Get Alert Custom Field",
        "description": "Endpoint to retrieve a single Alert Custom Field by ID",
        "tags": [
          "Alert Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Custom Field to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertCustomFieldSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertCustomField"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertCustomField",
        "summary": "Update Alert Custom Field",
        "description": "Endpoint to update an existing Alert Custom Field",
        "tags": [
          "Alert Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Custom Field to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertCustomFieldUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertCustomField",
        "summary": "Delete Alert Custom Field",
        "description": "Endpoint to delete a Alert Custom Field",
        "tags": [
          "Alert Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Custom Field to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state-timeline/get-list": {
      "post": {
        "operationId": "listAlertStateTimeline",
        "summary": "List Alert State Timeline",
        "description": "Endpoint to list all Alert State Timeline items",
        "tags": [
          "Alert State Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertStateTimelineQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertStateTimelineSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertStateTimelineSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertStateTimeline"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state-timeline/count": {
      "post": {
        "operationId": "countAlertStateTimeline",
        "summary": "Count Alert State Timeline",
        "description": "Endpoint to count Alert State Timeline items",
        "tags": [
          "Alert State Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertStateTimelineQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state-timeline": {
      "post": {
        "operationId": "createAlertStateTimeline",
        "summary": "Create Alert State Timeline",
        "description": "Endpoint to create a new Alert State Timeline",
        "tags": [
          "Alert State Timeline"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertStateTimelineCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertStateTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertStateTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-state-timeline/{id}": {
      "post": {
        "operationId": "getAlertStateTimeline",
        "summary": "Get Alert State Timeline",
        "description": "Endpoint to retrieve a single Alert State Timeline by ID",
        "tags": [
          "Alert State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert State Timeline to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertStateTimelineSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertStateTimeline"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertStateTimeline",
        "summary": "Update Alert State Timeline",
        "description": "Endpoint to update an existing Alert State Timeline",
        "tags": [
          "Alert State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert State Timeline to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertStateTimelineUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertStateTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertStateTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertStateTimeline",
        "summary": "Delete Alert State Timeline",
        "description": "Endpoint to delete a Alert State Timeline",
        "tags": [
          "Alert State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert State Timeline to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-internal-note/get-list": {
      "post": {
        "operationId": "listAlertInternalNote",
        "summary": "List Alert Internal Note",
        "description": "Endpoint to list all Alert Internal Note items",
        "tags": [
          "Alert Internal Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertInternalNoteQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertInternalNoteSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertInternalNoteSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertInternalNote"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-internal-note/count": {
      "post": {
        "operationId": "countAlertInternalNote",
        "summary": "Count Alert Internal Note",
        "description": "Endpoint to count Alert Internal Note items",
        "tags": [
          "Alert Internal Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertInternalNoteQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-internal-note": {
      "post": {
        "operationId": "createAlertInternalNote",
        "summary": "Create Alert Internal Note",
        "description": "Endpoint to create a new Alert Internal Note",
        "tags": [
          "Alert Internal Note"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertInternalNoteCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertInternalNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertInternalNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-internal-note/{id}": {
      "post": {
        "operationId": "getAlertInternalNote",
        "summary": "Get Alert Internal Note",
        "description": "Endpoint to retrieve a single Alert Internal Note by ID",
        "tags": [
          "Alert Internal Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Internal Note to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertInternalNoteSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertInternalNote"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertInternalNote",
        "summary": "Update Alert Internal Note",
        "description": "Endpoint to update an existing Alert Internal Note",
        "tags": [
          "Alert Internal Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Internal Note to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertInternalNoteUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertInternalNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertInternalNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertInternalNote",
        "summary": "Delete Alert Internal Note",
        "description": "Endpoint to delete a Alert Internal Note",
        "tags": [
          "Alert Internal Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Internal Note to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-team/get-list": {
      "post": {
        "operationId": "listAlertOwnerTeam",
        "summary": "List Alert Team Owner",
        "description": "Endpoint to list all Alert Team Owner items",
        "tags": [
          "Alert Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-team/count": {
      "post": {
        "operationId": "countAlertOwnerTeam",
        "summary": "Count Alert Team Owner",
        "description": "Endpoint to count Alert Team Owner items",
        "tags": [
          "Alert Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-team": {
      "post": {
        "operationId": "createAlertOwnerTeam",
        "summary": "Create Alert Team Owner",
        "description": "Endpoint to create a new Alert Team Owner",
        "tags": [
          "Alert Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-team/{id}": {
      "post": {
        "operationId": "getAlertOwnerTeam",
        "summary": "Get Alert Team Owner",
        "description": "Endpoint to retrieve a single Alert Team Owner by ID",
        "tags": [
          "Alert Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertOwnerTeam",
        "summary": "Update Alert Team Owner",
        "description": "Endpoint to update an existing Alert Team Owner",
        "tags": [
          "Alert Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertOwnerTeam",
        "summary": "Delete Alert Team Owner",
        "description": "Endpoint to delete a Alert Team Owner",
        "tags": [
          "Alert Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-user/get-list": {
      "post": {
        "operationId": "listAlertOwnerUser",
        "summary": "List Alert User Owner",
        "description": "Endpoint to list all Alert User Owner items",
        "tags": [
          "Alert User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-user/count": {
      "post": {
        "operationId": "countAlertOwnerUser",
        "summary": "Count Alert User Owner",
        "description": "Endpoint to count Alert User Owner items",
        "tags": [
          "Alert User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-user": {
      "post": {
        "operationId": "createAlertOwnerUser",
        "summary": "Create Alert User Owner",
        "description": "Endpoint to create a new Alert User Owner",
        "tags": [
          "Alert User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-owner-user/{id}": {
      "post": {
        "operationId": "getAlertOwnerUser",
        "summary": "Get Alert User Owner",
        "description": "Endpoint to retrieve a single Alert User Owner by ID",
        "tags": [
          "Alert User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertOwnerUser",
        "summary": "Update Alert User Owner",
        "description": "Endpoint to update an existing Alert User Owner",
        "tags": [
          "Alert User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertOwnerUser",
        "summary": "Delete Alert User Owner",
        "description": "Endpoint to delete a Alert User Owner",
        "tags": [
          "Alert User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-severity/get-list": {
      "post": {
        "operationId": "listAlertSeverity",
        "summary": "List Alert Severity",
        "description": "Endpoint to list all Alert Severity items",
        "tags": [
          "Alert Severity"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertSeverityQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertSeveritySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertSeveritySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertSeverity"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-severity/count": {
      "post": {
        "operationId": "countAlertSeverity",
        "summary": "Count Alert Severity",
        "description": "Endpoint to count Alert Severity items",
        "tags": [
          "Alert Severity"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertSeverityQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-severity": {
      "post": {
        "operationId": "createAlertSeverity",
        "summary": "Create Alert Severity",
        "description": "Endpoint to create a new Alert Severity",
        "tags": [
          "Alert Severity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertSeverityCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertSeveritySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertSeverityReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-severity/{id}": {
      "post": {
        "operationId": "getAlertSeverity",
        "summary": "Get Alert Severity",
        "description": "Endpoint to retrieve a single Alert Severity by ID",
        "tags": [
          "Alert Severity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Severity to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertSeveritySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertSeverity"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertSeverity",
        "summary": "Update Alert Severity",
        "description": "Endpoint to update an existing Alert Severity",
        "tags": [
          "Alert Severity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Severity to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertSeverityUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertSeveritySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertSeverityReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertSeverity",
        "summary": "Delete Alert Severity",
        "description": "Endpoint to delete a Alert Severity",
        "tags": [
          "Alert Severity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Severity to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-note-template/get-list": {
      "post": {
        "operationId": "listAlertNoteTemplate",
        "summary": "List Alert Note Template",
        "description": "Endpoint to list all Alert Note Template items",
        "tags": [
          "Alert Note Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertNoteTemplateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertNoteTemplateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/AlertNoteTemplateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertNoteTemplate"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-note-template/count": {
      "post": {
        "operationId": "countAlertNoteTemplate",
        "summary": "Count Alert Note Template",
        "description": "Endpoint to count Alert Note Template items",
        "tags": [
          "Alert Note Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/AlertNoteTemplateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-note-template": {
      "post": {
        "operationId": "createAlertNoteTemplate",
        "summary": "Create Alert Note Template",
        "description": "Endpoint to create a new Alert Note Template",
        "tags": [
          "Alert Note Template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertNoteTemplateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertNoteTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertNoteTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/alert-note-template/{id}": {
      "post": {
        "operationId": "getAlertNoteTemplate",
        "summary": "Get Alert Note Template",
        "description": "Endpoint to retrieve a single Alert Note Template by ID",
        "tags": [
          "Alert Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Note Template to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/AlertNoteTemplateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertNoteTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateAlertNoteTemplate",
        "summary": "Update Alert Note Template",
        "description": "Endpoint to update an existing Alert Note Template",
        "tags": [
          "Alert Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Note Template to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/AlertNoteTemplateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/AlertNoteTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AlertNoteTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteAlertNoteTemplate",
        "summary": "Delete Alert Note Template",
        "description": "Endpoint to delete a Alert Note Template",
        "tags": [
          "Alert Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Alert Note Template to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status-timeline/get-list": {
      "post": {
        "operationId": "listMonitorStatusTimeline",
        "summary": "List Monitor Status Event",
        "description": "Endpoint to list all Monitor Status Event items",
        "tags": [
          "Monitor Status Event"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorStatusTimeline"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status-timeline/count": {
      "post": {
        "operationId": "countMonitorStatusTimeline",
        "summary": "Count Monitor Status Event",
        "description": "Endpoint to count Monitor Status Event items",
        "tags": [
          "Monitor Status Event"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status-timeline": {
      "post": {
        "operationId": "createMonitorStatusTimeline",
        "summary": "Create Monitor Status Event",
        "description": "Endpoint to create a new Monitor Status Event",
        "tags": [
          "Monitor Status Event"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorStatusTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-status-timeline/{id}": {
      "post": {
        "operationId": "getMonitorStatusTimeline",
        "summary": "Get Monitor Status Event",
        "description": "Endpoint to retrieve a single Monitor Status Event by ID",
        "tags": [
          "Monitor Status Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Status Event to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorStatusTimeline"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorStatusTimeline",
        "summary": "Update Monitor Status Event",
        "description": "Endpoint to update an existing Monitor Status Event",
        "tags": [
          "Monitor Status Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Status Event to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorStatusTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorStatusTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorStatusTimeline",
        "summary": "Delete Monitor Status Event",
        "description": "Endpoint to delete a Monitor Status Event",
        "tags": [
          "Monitor Status Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Status Event to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/domain/get-list": {
      "post": {
        "operationId": "listDomain",
        "summary": "List Domain",
        "description": "Endpoint to list all Domain items",
        "tags": [
          "Domain"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/DomainQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/DomainSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/DomainSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Domain"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/domain/count": {
      "post": {
        "operationId": "countDomain",
        "summary": "Count Domain",
        "description": "Endpoint to count Domain items",
        "tags": [
          "Domain"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/DomainQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/domain": {
      "post": {
        "operationId": "createDomain",
        "summary": "Create Domain",
        "description": "Endpoint to create a new Domain",
        "tags": [
          "Domain"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/DomainCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/DomainSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DomainReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/domain/{id}": {
      "post": {
        "operationId": "getDomain",
        "summary": "Get Domain",
        "description": "Endpoint to retrieve a single Domain by ID",
        "tags": [
          "Domain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Domain to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/DomainSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Domain"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateDomain",
        "summary": "Update Domain",
        "description": "Endpoint to update an existing Domain",
        "tags": [
          "Domain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Domain to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/DomainUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/DomainSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DomainReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteDomain",
        "summary": "Delete Domain",
        "description": "Endpoint to delete a Domain",
        "tags": [
          "Domain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Domain to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-group/get-list": {
      "post": {
        "operationId": "listStatusPageGroup",
        "summary": "List Status Page Group",
        "description": "Endpoint to list all Status Page Group items",
        "tags": [
          "Status Page Group"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageGroupQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageGroupSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageGroupSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageGroup"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-group/count": {
      "post": {
        "operationId": "countStatusPageGroup",
        "summary": "Count Status Page Group",
        "description": "Endpoint to count Status Page Group items",
        "tags": [
          "Status Page Group"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageGroupQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-group": {
      "post": {
        "operationId": "createStatusPageGroup",
        "summary": "Create Status Page Group",
        "description": "Endpoint to create a new Status Page Group",
        "tags": [
          "Status Page Group"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageGroupCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageGroupSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageGroupReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-group/{id}": {
      "post": {
        "operationId": "getStatusPageGroup",
        "summary": "Get Status Page Group",
        "description": "Endpoint to retrieve a single Status Page Group by ID",
        "tags": [
          "Status Page Group"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Group to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageGroupSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageGroup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageGroup",
        "summary": "Update Status Page Group",
        "description": "Endpoint to update an existing Status Page Group",
        "tags": [
          "Status Page Group"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Group to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageGroupUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageGroupSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageGroupReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageGroup",
        "summary": "Delete Status Page Group",
        "description": "Endpoint to delete a Status Page Group",
        "tags": [
          "Status Page Group"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Group to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-domain/get-list": {
      "post": {
        "operationId": "listStatusPageDomain",
        "summary": "List Status Page Domain",
        "description": "Endpoint to list all Status Page Domain items",
        "tags": [
          "Status Page Domain"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageDomainQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageDomainSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageDomainSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageDomain"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-domain/count": {
      "post": {
        "operationId": "countStatusPageDomain",
        "summary": "Count Status Page Domain",
        "description": "Endpoint to count Status Page Domain items",
        "tags": [
          "Status Page Domain"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageDomainQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-domain": {
      "post": {
        "operationId": "createStatusPageDomain",
        "summary": "Create Status Page Domain",
        "description": "Endpoint to create a new Status Page Domain",
        "tags": [
          "Status Page Domain"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageDomainCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageDomainSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageDomainReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-domain/{id}": {
      "post": {
        "operationId": "getStatusPageDomain",
        "summary": "Get Status Page Domain",
        "description": "Endpoint to retrieve a single Status Page Domain by ID",
        "tags": [
          "Status Page Domain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Domain to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageDomainSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageDomain"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageDomain",
        "summary": "Update Status Page Domain",
        "description": "Endpoint to update an existing Status Page Domain",
        "tags": [
          "Status Page Domain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Domain to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageDomainUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageDomainSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageDomainReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageDomain",
        "summary": "Delete Status Page Domain",
        "description": "Endpoint to delete a Status Page Domain",
        "tags": [
          "Status Page Domain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Domain to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-custom-field/get-list": {
      "post": {
        "operationId": "listStatusPageCustomField",
        "summary": "List Status Page Custom Field",
        "description": "Endpoint to list all Status Page Custom Field items",
        "tags": [
          "Status Page Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageCustomField"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-custom-field/count": {
      "post": {
        "operationId": "countStatusPageCustomField",
        "summary": "Count Status Page Custom Field",
        "description": "Endpoint to count Status Page Custom Field items",
        "tags": [
          "Status Page Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-custom-field": {
      "post": {
        "operationId": "createStatusPageCustomField",
        "summary": "Create Status Page Custom Field",
        "description": "Endpoint to create a new Status Page Custom Field",
        "tags": [
          "Status Page Custom Field"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-custom-field/{id}": {
      "post": {
        "operationId": "getStatusPageCustomField",
        "summary": "Get Status Page Custom Field",
        "description": "Endpoint to retrieve a single Status Page Custom Field by ID",
        "tags": [
          "Status Page Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Custom Field to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageCustomField"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageCustomField",
        "summary": "Update Status Page Custom Field",
        "description": "Endpoint to update an existing Status Page Custom Field",
        "tags": [
          "Status Page Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Custom Field to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageCustomField",
        "summary": "Delete Status Page Custom Field",
        "description": "Endpoint to delete a Status Page Custom Field",
        "tags": [
          "Status Page Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Custom Field to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-resource/get-list": {
      "post": {
        "operationId": "listStatusPageResource",
        "summary": "List Status Page Resource",
        "description": "Endpoint to list all Status Page Resource items",
        "tags": [
          "Status Page Resource"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageResourceQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageResourceSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageResourceSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageResource"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-resource/count": {
      "post": {
        "operationId": "countStatusPageResource",
        "summary": "Count Status Page Resource",
        "description": "Endpoint to count Status Page Resource items",
        "tags": [
          "Status Page Resource"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageResourceQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-resource": {
      "post": {
        "operationId": "createStatusPageResource",
        "summary": "Create Status Page Resource",
        "description": "Endpoint to create a new Status Page Resource",
        "tags": [
          "Status Page Resource"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageResourceCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageResourceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageResourceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-resource/{id}": {
      "post": {
        "operationId": "getStatusPageResource",
        "summary": "Get Status Page Resource",
        "description": "Endpoint to retrieve a single Status Page Resource by ID",
        "tags": [
          "Status Page Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Resource to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageResourceSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageResource"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageResource",
        "summary": "Update Status Page Resource",
        "description": "Endpoint to update an existing Status Page Resource",
        "tags": [
          "Status Page Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Resource to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageResourceUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageResourceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageResourceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageResource",
        "summary": "Delete Status Page Resource",
        "description": "Endpoint to delete a Status Page Resource",
        "tags": [
          "Status Page Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Resource to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement/get-list": {
      "post": {
        "operationId": "listStatusPageAnnouncement",
        "summary": "List Status Page Announcement",
        "description": "Endpoint to list all Status Page Announcement items",
        "tags": [
          "Status Page Announcement"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageAnnouncement"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement/count": {
      "post": {
        "operationId": "countStatusPageAnnouncement",
        "summary": "Count Status Page Announcement",
        "description": "Endpoint to count Status Page Announcement items",
        "tags": [
          "Status Page Announcement"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement": {
      "post": {
        "operationId": "createStatusPageAnnouncement",
        "summary": "Create Status Page Announcement",
        "description": "Endpoint to create a new Status Page Announcement",
        "tags": [
          "Status Page Announcement"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageAnnouncementReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement/{id}": {
      "post": {
        "operationId": "getStatusPageAnnouncement",
        "summary": "Get Status Page Announcement",
        "description": "Endpoint to retrieve a single Status Page Announcement by ID",
        "tags": [
          "Status Page Announcement"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Announcement to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageAnnouncement"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageAnnouncement",
        "summary": "Update Status Page Announcement",
        "description": "Endpoint to update an existing Status Page Announcement",
        "tags": [
          "Status Page Announcement"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Announcement to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageAnnouncementReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageAnnouncement",
        "summary": "Delete Status Page Announcement",
        "description": "Endpoint to delete a Status Page Announcement",
        "tags": [
          "Status Page Announcement"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Announcement to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement-template/get-list": {
      "post": {
        "operationId": "listStatusPageAnnouncementTemplate",
        "summary": "List Status Page Announcement Template",
        "description": "Endpoint to list all Status Page Announcement Template items",
        "tags": [
          "Status Page Announcement Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageAnnouncementTemplate"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement-template/count": {
      "post": {
        "operationId": "countStatusPageAnnouncementTemplate",
        "summary": "Count Status Page Announcement Template",
        "description": "Endpoint to count Status Page Announcement Template items",
        "tags": [
          "Status Page Announcement Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement-template": {
      "post": {
        "operationId": "createStatusPageAnnouncementTemplate",
        "summary": "Create Status Page Announcement Template",
        "description": "Endpoint to create a new Status Page Announcement Template",
        "tags": [
          "Status Page Announcement Template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageAnnouncementTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-announcement-template/{id}": {
      "post": {
        "operationId": "getStatusPageAnnouncementTemplate",
        "summary": "Get Status Page Announcement Template",
        "description": "Endpoint to retrieve a single Status Page Announcement Template by ID",
        "tags": [
          "Status Page Announcement Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Announcement Template to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageAnnouncementTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageAnnouncementTemplate",
        "summary": "Update Status Page Announcement Template",
        "description": "Endpoint to update an existing Status Page Announcement Template",
        "tags": [
          "Status Page Announcement Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Announcement Template to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageAnnouncementTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageAnnouncementTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageAnnouncementTemplate",
        "summary": "Delete Status Page Announcement Template",
        "description": "Endpoint to delete a Status Page Announcement Template",
        "tags": [
          "Status Page Announcement Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Announcement Template to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-subscriber/get-list": {
      "post": {
        "operationId": "listStatusPageSubscriber",
        "summary": "List Status Page Subscriber",
        "description": "Endpoint to list all Status Page Subscriber items",
        "tags": [
          "Status Page Subscriber"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageSubscriberQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSubscriberSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageSubscriberSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageSubscriber"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-subscriber/count": {
      "post": {
        "operationId": "countStatusPageSubscriber",
        "summary": "Count Status Page Subscriber",
        "description": "Endpoint to count Status Page Subscriber items",
        "tags": [
          "Status Page Subscriber"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageSubscriberQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-subscriber": {
      "post": {
        "operationId": "createStatusPageSubscriber",
        "summary": "Create Status Page Subscriber",
        "description": "Endpoint to create a new Status Page Subscriber",
        "tags": [
          "Status Page Subscriber"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageSubscriberCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSubscriberSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageSubscriberReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-subscriber/{id}": {
      "post": {
        "operationId": "getStatusPageSubscriber",
        "summary": "Get Status Page Subscriber",
        "description": "Endpoint to retrieve a single Status Page Subscriber by ID",
        "tags": [
          "Status Page Subscriber"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Subscriber to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSubscriberSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageSubscriber"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageSubscriber",
        "summary": "Update Status Page Subscriber",
        "description": "Endpoint to update an existing Status Page Subscriber",
        "tags": [
          "Status Page Subscriber"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Subscriber to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageSubscriberUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSubscriberSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageSubscriberReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageSubscriber",
        "summary": "Delete Status Page Subscriber",
        "description": "Endpoint to delete a Status Page Subscriber",
        "tags": [
          "Status Page Subscriber"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Subscriber to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-footer-link/get-list": {
      "post": {
        "operationId": "listStatusPageFooterLink",
        "summary": "List Status Page Footer Link",
        "description": "Endpoint to list all Status Page Footer Link items",
        "tags": [
          "Status Page Footer Link"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageFooterLink"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-footer-link/count": {
      "post": {
        "operationId": "countStatusPageFooterLink",
        "summary": "Count Status Page Footer Link",
        "description": "Endpoint to count Status Page Footer Link items",
        "tags": [
          "Status Page Footer Link"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-footer-link": {
      "post": {
        "operationId": "createStatusPageFooterLink",
        "summary": "Create Status Page Footer Link",
        "description": "Endpoint to create a new Status Page Footer Link",
        "tags": [
          "Status Page Footer Link"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageFooterLinkReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-footer-link/{id}": {
      "post": {
        "operationId": "getStatusPageFooterLink",
        "summary": "Get Status Page Footer Link",
        "description": "Endpoint to retrieve a single Status Page Footer Link by ID",
        "tags": [
          "Status Page Footer Link"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Footer Link to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageFooterLink"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageFooterLink",
        "summary": "Update Status Page Footer Link",
        "description": "Endpoint to update an existing Status Page Footer Link",
        "tags": [
          "Status Page Footer Link"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Footer Link to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageFooterLinkSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageFooterLinkReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageFooterLink",
        "summary": "Delete Status Page Footer Link",
        "description": "Endpoint to delete a Status Page Footer Link",
        "tags": [
          "Status Page Footer Link"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Footer Link to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-header-link/get-list": {
      "post": {
        "operationId": "listStatusPageHeaderLink",
        "summary": "List Status Page Header Link",
        "description": "Endpoint to list all Status Page Header Link items",
        "tags": [
          "Status Page Header Link"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageHeaderLink"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-header-link/count": {
      "post": {
        "operationId": "countStatusPageHeaderLink",
        "summary": "Count Status Page Header Link",
        "description": "Endpoint to count Status Page Header Link items",
        "tags": [
          "Status Page Header Link"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-header-link": {
      "post": {
        "operationId": "createStatusPageHeaderLink",
        "summary": "Create Status Page Header Link",
        "description": "Endpoint to create a new Status Page Header Link",
        "tags": [
          "Status Page Header Link"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageHeaderLinkReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-header-link/{id}": {
      "post": {
        "operationId": "getStatusPageHeaderLink",
        "summary": "Get Status Page Header Link",
        "description": "Endpoint to retrieve a single Status Page Header Link by ID",
        "tags": [
          "Status Page Header Link"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Header Link to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageHeaderLink"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageHeaderLink",
        "summary": "Update Status Page Header Link",
        "description": "Endpoint to update an existing Status Page Header Link",
        "tags": [
          "Status Page Header Link"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Header Link to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHeaderLinkSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageHeaderLinkReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageHeaderLink",
        "summary": "Delete Status Page Header Link",
        "description": "Endpoint to delete a Status Page Header Link",
        "tags": [
          "Status Page Header Link"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Header Link to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-private-user/get-list": {
      "post": {
        "operationId": "listStatusPagePrivateUser",
        "summary": "List Status Page Private User",
        "description": "Endpoint to list all Status Page Private User items",
        "tags": [
          "Status Page Private User"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPagePrivateUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-private-user/count": {
      "post": {
        "operationId": "countStatusPagePrivateUser",
        "summary": "Count Status Page Private User",
        "description": "Endpoint to count Status Page Private User items",
        "tags": [
          "Status Page Private User"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-private-user": {
      "post": {
        "operationId": "createStatusPagePrivateUser",
        "summary": "Create Status Page Private User",
        "description": "Endpoint to create a new Status Page Private User",
        "tags": [
          "Status Page Private User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPagePrivateUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-private-user/{id}": {
      "post": {
        "operationId": "getStatusPagePrivateUser",
        "summary": "Get Status Page Private User",
        "description": "Endpoint to retrieve a single Status Page Private User by ID",
        "tags": [
          "Status Page Private User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Private User to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPagePrivateUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPagePrivateUser",
        "summary": "Update Status Page Private User",
        "description": "Endpoint to update an existing Status Page Private User",
        "tags": [
          "Status Page Private User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Private User to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPagePrivateUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPagePrivateUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPagePrivateUser",
        "summary": "Delete Status Page Private User",
        "description": "Endpoint to delete a Status Page Private User",
        "tags": [
          "Status Page Private User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Private User to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-history-chart-bar-color-rule/get-list": {
      "post": {
        "operationId": "listStatusPageHistoryChartBarColorRule",
        "summary": "List Status Page History Chart Bar Color",
        "description": "Endpoint to list all Status Page History Chart Bar Color items",
        "tags": [
          "Status Page History Chart Bar Color"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRule"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-history-chart-bar-color-rule/count": {
      "post": {
        "operationId": "countStatusPageHistoryChartBarColorRule",
        "summary": "Count Status Page History Chart Bar Color",
        "description": "Endpoint to count Status Page History Chart Bar Color items",
        "tags": [
          "Status Page History Chart Bar Color"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-history-chart-bar-color-rule": {
      "post": {
        "operationId": "createStatusPageHistoryChartBarColorRule",
        "summary": "Create Status Page History Chart Bar Color",
        "description": "Endpoint to create a new Status Page History Chart Bar Color",
        "tags": [
          "Status Page History Chart Bar Color"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-history-chart-bar-color-rule/{id}": {
      "post": {
        "operationId": "getStatusPageHistoryChartBarColorRule",
        "summary": "Get Status Page History Chart Bar Color",
        "description": "Endpoint to retrieve a single Status Page History Chart Bar Color by ID",
        "tags": [
          "Status Page History Chart Bar Color"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page History Chart Bar Color to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageHistoryChartBarColorRule",
        "summary": "Update Status Page History Chart Bar Color",
        "description": "Endpoint to update an existing Status Page History Chart Bar Color",
        "tags": [
          "Status Page History Chart Bar Color"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page History Chart Bar Color to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageHistoryChartBarColorRuleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageHistoryChartBarColorRule",
        "summary": "Delete Status Page History Chart Bar Color",
        "description": "Endpoint to delete a Status Page History Chart Bar Color",
        "tags": [
          "Status Page History Chart Bar Color"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page History Chart Bar Color to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceState",
        "summary": "List Scheduled Maintenance State",
        "description": "Endpoint to list all Scheduled Maintenance State items",
        "tags": [
          "Scheduled Maintenance State"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceState"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state/count": {
      "post": {
        "operationId": "countScheduledMaintenanceState",
        "summary": "Count Scheduled Maintenance State",
        "description": "Endpoint to count Scheduled Maintenance State items",
        "tags": [
          "Scheduled Maintenance State"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state": {
      "post": {
        "operationId": "createScheduledMaintenanceState",
        "summary": "Create Scheduled Maintenance State",
        "description": "Endpoint to create a new Scheduled Maintenance State",
        "tags": [
          "Scheduled Maintenance State"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceStateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceState",
        "summary": "Get Scheduled Maintenance State",
        "description": "Endpoint to retrieve a single Scheduled Maintenance State by ID",
        "tags": [
          "Scheduled Maintenance State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance State to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceState",
        "summary": "Update Scheduled Maintenance State",
        "description": "Endpoint to update an existing Scheduled Maintenance State",
        "tags": [
          "Scheduled Maintenance State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance State to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceStateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceState",
        "summary": "Delete Scheduled Maintenance State",
        "description": "Endpoint to delete a Scheduled Maintenance State",
        "tags": [
          "Scheduled Maintenance State"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance State to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance/get-list": {
      "post": {
        "operationId": "listScheduledMaintenance",
        "summary": "List Scheduled Maintenance Event",
        "description": "Endpoint to list all Scheduled Maintenance Event items",
        "tags": [
          "Scheduled Maintenance Event"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenance"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance/count": {
      "post": {
        "operationId": "countScheduledMaintenance",
        "summary": "Count Scheduled Maintenance Event",
        "description": "Endpoint to count Scheduled Maintenance Event items",
        "tags": [
          "Scheduled Maintenance Event"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance": {
      "post": {
        "operationId": "createScheduledMaintenance",
        "summary": "Create Scheduled Maintenance Event",
        "description": "Endpoint to create a new Scheduled Maintenance Event",
        "tags": [
          "Scheduled Maintenance Event"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance/{id}": {
      "post": {
        "operationId": "getScheduledMaintenance",
        "summary": "Get Scheduled Maintenance Event",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Event by ID",
        "tags": [
          "Scheduled Maintenance Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Event to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenance"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenance",
        "summary": "Update Scheduled Maintenance Event",
        "description": "Endpoint to update an existing Scheduled Maintenance Event",
        "tags": [
          "Scheduled Maintenance Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Event to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenance",
        "summary": "Delete Scheduled Maintenance Event",
        "description": "Endpoint to delete a Scheduled Maintenance Event",
        "tags": [
          "Scheduled Maintenance Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Event to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state-timeline/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceStateTimeline",
        "summary": "List Scheduled Maintenance State Timeline",
        "description": "Endpoint to list all Scheduled Maintenance State Timeline items",
        "tags": [
          "Scheduled Maintenance State Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceStateTimeline"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state-timeline/count": {
      "post": {
        "operationId": "countScheduledMaintenanceStateTimeline",
        "summary": "Count Scheduled Maintenance State Timeline",
        "description": "Endpoint to count Scheduled Maintenance State Timeline items",
        "tags": [
          "Scheduled Maintenance State Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state-timeline": {
      "post": {
        "operationId": "createScheduledMaintenanceStateTimeline",
        "summary": "Create Scheduled Maintenance State Timeline",
        "description": "Endpoint to create a new Scheduled Maintenance State Timeline",
        "tags": [
          "Scheduled Maintenance State Timeline"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-state-timeline/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceStateTimeline",
        "summary": "Get Scheduled Maintenance State Timeline",
        "description": "Endpoint to retrieve a single Scheduled Maintenance State Timeline by ID",
        "tags": [
          "Scheduled Maintenance State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance State Timeline to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceStateTimeline"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceStateTimeline",
        "summary": "Update Scheduled Maintenance State Timeline",
        "description": "Endpoint to update an existing Scheduled Maintenance State Timeline",
        "tags": [
          "Scheduled Maintenance State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance State Timeline to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceStateTimelineReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceStateTimeline",
        "summary": "Delete Scheduled Maintenance State Timeline",
        "description": "Endpoint to delete a Scheduled Maintenance State Timeline",
        "tags": [
          "Scheduled Maintenance State Timeline"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance State Timeline to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-public-note/get-list": {
      "post": {
        "operationId": "listScheduledMaintenancePublicNote",
        "summary": "List Scheduled Event Public Note",
        "description": "Endpoint to list all Scheduled Event Public Note items",
        "tags": [
          "Scheduled Event Public Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenancePublicNote"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-public-note/count": {
      "post": {
        "operationId": "countScheduledMaintenancePublicNote",
        "summary": "Count Scheduled Event Public Note",
        "description": "Endpoint to count Scheduled Event Public Note items",
        "tags": [
          "Scheduled Event Public Note"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-public-note": {
      "post": {
        "operationId": "createScheduledMaintenancePublicNote",
        "summary": "Create Scheduled Event Public Note",
        "description": "Endpoint to create a new Scheduled Event Public Note",
        "tags": [
          "Scheduled Event Public Note"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-public-note/{id}": {
      "post": {
        "operationId": "getScheduledMaintenancePublicNote",
        "summary": "Get Scheduled Event Public Note",
        "description": "Endpoint to retrieve a single Scheduled Event Public Note by ID",
        "tags": [
          "Scheduled Event Public Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Event Public Note to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenancePublicNote"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenancePublicNote",
        "summary": "Update Scheduled Event Public Note",
        "description": "Endpoint to update an existing Scheduled Event Public Note",
        "tags": [
          "Scheduled Event Public Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Event Public Note to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenancePublicNoteReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenancePublicNote",
        "summary": "Delete Scheduled Event Public Note",
        "description": "Endpoint to delete a Scheduled Event Public Note",
        "tags": [
          "Scheduled Event Public Note"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Event Public Note to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-custom-field/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceCustomField",
        "summary": "List Scheduled Maintenance Custom Field",
        "description": "Endpoint to list all Scheduled Maintenance Custom Field items",
        "tags": [
          "Scheduled Maintenance Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceCustomField"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-custom-field/count": {
      "post": {
        "operationId": "countScheduledMaintenanceCustomField",
        "summary": "Count Scheduled Maintenance Custom Field",
        "description": "Endpoint to count Scheduled Maintenance Custom Field items",
        "tags": [
          "Scheduled Maintenance Custom Field"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-custom-field": {
      "post": {
        "operationId": "createScheduledMaintenanceCustomField",
        "summary": "Create Scheduled Maintenance Custom Field",
        "description": "Endpoint to create a new Scheduled Maintenance Custom Field",
        "tags": [
          "Scheduled Maintenance Custom Field"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-custom-field/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceCustomField",
        "summary": "Get Scheduled Maintenance Custom Field",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Custom Field by ID",
        "tags": [
          "Scheduled Maintenance Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Custom Field to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceCustomField"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceCustomField",
        "summary": "Update Scheduled Maintenance Custom Field",
        "description": "Endpoint to update an existing Scheduled Maintenance Custom Field",
        "tags": [
          "Scheduled Maintenance Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Custom Field to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceCustomFieldReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceCustomField",
        "summary": "Delete Scheduled Maintenance Custom Field",
        "description": "Endpoint to delete a Scheduled Maintenance Custom Field",
        "tags": [
          "Scheduled Maintenance Custom Field"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Custom Field to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-feed/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceFeed",
        "summary": "List Scheduled Maintenance Feed",
        "description": "Endpoint to list all Scheduled Maintenance Feed items",
        "tags": [
          "Scheduled Maintenance Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceFeedQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceFeedSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceFeedSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceFeed"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-feed/count": {
      "post": {
        "operationId": "countScheduledMaintenanceFeed",
        "summary": "Count Scheduled Maintenance Feed",
        "description": "Endpoint to count Scheduled Maintenance Feed items",
        "tags": [
          "Scheduled Maintenance Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceFeedQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-feed": {
      "post": {
        "operationId": "createScheduledMaintenanceFeed",
        "summary": "Create Scheduled Maintenance Feed",
        "description": "Endpoint to create a new Scheduled Maintenance Feed",
        "tags": [
          "Scheduled Maintenance Feed"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceFeedCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceFeedSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceFeedReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-feed/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceFeed",
        "summary": "Get Scheduled Maintenance Feed",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Feed by ID",
        "tags": [
          "Scheduled Maintenance Feed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Feed to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceFeedSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceFeed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow/get-list": {
      "post": {
        "operationId": "listWorkflow",
        "summary": "List Workflow",
        "description": "Endpoint to list all Workflow items",
        "tags": [
          "Workflow"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkflowQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/WorkflowSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Workflow"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow/count": {
      "post": {
        "operationId": "countWorkflow",
        "summary": "Count Workflow",
        "description": "Endpoint to count Workflow items",
        "tags": [
          "Workflow"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkflowQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow": {
      "post": {
        "operationId": "createWorkflow",
        "summary": "Create Workflow",
        "description": "Endpoint to create a new Workflow",
        "tags": [
          "Workflow"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkflowCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow/{id}": {
      "post": {
        "operationId": "getWorkflow",
        "summary": "Get Workflow",
        "description": "Endpoint to retrieve a single Workflow by ID",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/WorkflowSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Workflow"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateWorkflow",
        "summary": "Update Workflow",
        "description": "Endpoint to update an existing Workflow",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkflowUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkflow",
        "summary": "Delete Workflow",
        "description": "Endpoint to delete a Workflow",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-variable/get-list": {
      "post": {
        "operationId": "listWorkflowVariable",
        "summary": "List Workflow Variable",
        "description": "Endpoint to list all Workflow Variable items",
        "tags": [
          "Workflow Variable"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkflowVariableQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowVariableSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/WorkflowVariableSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WorkflowVariable"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-variable/count": {
      "post": {
        "operationId": "countWorkflowVariable",
        "summary": "Count Workflow Variable",
        "description": "Endpoint to count Workflow Variable items",
        "tags": [
          "Workflow Variable"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkflowVariableQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-variable": {
      "post": {
        "operationId": "createWorkflowVariable",
        "summary": "Create Workflow Variable",
        "description": "Endpoint to create a new Workflow Variable",
        "tags": [
          "Workflow Variable"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkflowVariableCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowVariableSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowVariableReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-variable/{id}": {
      "post": {
        "operationId": "getWorkflowVariable",
        "summary": "Get Workflow Variable",
        "description": "Endpoint to retrieve a single Workflow Variable by ID",
        "tags": [
          "Workflow Variable"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow Variable to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/WorkflowVariableSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowVariable"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateWorkflowVariable",
        "summary": "Update Workflow Variable",
        "description": "Endpoint to update an existing Workflow Variable",
        "tags": [
          "Workflow Variable"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow Variable to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkflowVariableUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowVariableSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowVariableReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkflowVariable",
        "summary": "Delete Workflow Variable",
        "description": "Endpoint to delete a Workflow Variable",
        "tags": [
          "Workflow Variable"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow Variable to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-log/get-list": {
      "post": {
        "operationId": "listWorkflowLog",
        "summary": "List Workflow Log",
        "description": "Endpoint to list all Workflow Log items",
        "tags": [
          "Workflow Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkflowLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/WorkflowLogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WorkflowLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-log/count": {
      "post": {
        "operationId": "countWorkflowLog",
        "summary": "Count Workflow Log",
        "description": "Endpoint to count Workflow Log items",
        "tags": [
          "Workflow Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkflowLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-log": {
      "post": {
        "operationId": "createWorkflowLog",
        "summary": "Create Workflow Log",
        "description": "Endpoint to create a new Workflow Log",
        "tags": [
          "Workflow Log"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkflowLogCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowLogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowLogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workflow-log/{id}": {
      "post": {
        "operationId": "getWorkflowLog",
        "summary": "Get Workflow Log",
        "description": "Endpoint to retrieve a single Workflow Log by ID",
        "tags": [
          "Workflow Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/WorkflowLogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowLog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateWorkflowLog",
        "summary": "Update Workflow Log",
        "description": "Endpoint to update an existing Workflow Log",
        "tags": [
          "Workflow Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow Log to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkflowLogUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkflowLogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowLogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkflowLog",
        "summary": "Delete Workflow Log",
        "description": "Endpoint to delete a Workflow Log",
        "tags": [
          "Workflow Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workflow Log to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-sso/get-list": {
      "post": {
        "operationId": "listStatusPageSSO",
        "summary": "List Status Page SSO",
        "description": "Endpoint to list all Status Page SSO items",
        "tags": [
          "Status Page SSO"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageSSOQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSSOSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageSSOSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageSSO"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-sso/count": {
      "post": {
        "operationId": "countStatusPageSSO",
        "summary": "Count Status Page SSO",
        "description": "Endpoint to count Status Page SSO items",
        "tags": [
          "Status Page SSO"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageSSOQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-sso": {
      "post": {
        "operationId": "createStatusPageSSO",
        "summary": "Create Status Page SSO",
        "description": "Endpoint to create a new Status Page SSO",
        "tags": [
          "Status Page SSO"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageSSOCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSSOSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageSSOReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-sso/{id}": {
      "post": {
        "operationId": "getStatusPageSSO",
        "summary": "Get Status Page SSO",
        "description": "Endpoint to retrieve a single Status Page SSO by ID",
        "tags": [
          "Status Page SSO"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page SSO to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSSOSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageSSO"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageSSO",
        "summary": "Update Status Page SSO",
        "description": "Endpoint to update an existing Status Page SSO",
        "tags": [
          "Status Page SSO"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page SSO to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageSSOUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageSSOSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageSSOReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageSSO",
        "summary": "Delete Status Page SSO",
        "description": "Endpoint to delete a Status Page SSO",
        "tags": [
          "Status Page SSO"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page SSO to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-probe/get-list": {
      "post": {
        "operationId": "listMonitorProbe",
        "summary": "List Monitor Probe",
        "description": "Endpoint to list all Monitor Probe items",
        "tags": [
          "Monitor Probe"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorProbeQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorProbeSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorProbeSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorProbe"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-probe/count": {
      "post": {
        "operationId": "countMonitorProbe",
        "summary": "Count Monitor Probe",
        "description": "Endpoint to count Monitor Probe items",
        "tags": [
          "Monitor Probe"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorProbeQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-probe": {
      "post": {
        "operationId": "createMonitorProbe",
        "summary": "Create Monitor Probe",
        "description": "Endpoint to create a new Monitor Probe",
        "tags": [
          "Monitor Probe"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorProbeCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorProbeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorProbeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-probe/{id}": {
      "post": {
        "operationId": "getMonitorProbe",
        "summary": "Get Monitor Probe",
        "description": "Endpoint to retrieve a single Monitor Probe by ID",
        "tags": [
          "Monitor Probe"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Probe to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorProbeSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorProbe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorProbe",
        "summary": "Update Monitor Probe",
        "description": "Endpoint to update an existing Monitor Probe",
        "tags": [
          "Monitor Probe"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Probe to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorProbeUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorProbeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorProbeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorProbe",
        "summary": "Delete Monitor Probe",
        "description": "Endpoint to delete a Monitor Probe",
        "tags": [
          "Monitor Probe"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Probe to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-team/get-list": {
      "post": {
        "operationId": "listMonitorOwnerTeam",
        "summary": "List Monitor Team Owner",
        "description": "Endpoint to list all Monitor Team Owner items",
        "tags": [
          "Monitor Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-team/count": {
      "post": {
        "operationId": "countMonitorOwnerTeam",
        "summary": "Count Monitor Team Owner",
        "description": "Endpoint to count Monitor Team Owner items",
        "tags": [
          "Monitor Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-team": {
      "post": {
        "operationId": "createMonitorOwnerTeam",
        "summary": "Create Monitor Team Owner",
        "description": "Endpoint to create a new Monitor Team Owner",
        "tags": [
          "Monitor Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-team/{id}": {
      "post": {
        "operationId": "getMonitorOwnerTeam",
        "summary": "Get Monitor Team Owner",
        "description": "Endpoint to retrieve a single Monitor Team Owner by ID",
        "tags": [
          "Monitor Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorOwnerTeam",
        "summary": "Update Monitor Team Owner",
        "description": "Endpoint to update an existing Monitor Team Owner",
        "tags": [
          "Monitor Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorOwnerTeam",
        "summary": "Delete Monitor Team Owner",
        "description": "Endpoint to delete a Monitor Team Owner",
        "tags": [
          "Monitor Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-user/get-list": {
      "post": {
        "operationId": "listMonitorOwnerUser",
        "summary": "List Monitor User Owner",
        "description": "Endpoint to list all Monitor User Owner items",
        "tags": [
          "Monitor User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-user/count": {
      "post": {
        "operationId": "countMonitorOwnerUser",
        "summary": "Count Monitor User Owner",
        "description": "Endpoint to count Monitor User Owner items",
        "tags": [
          "Monitor User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-user": {
      "post": {
        "operationId": "createMonitorOwnerUser",
        "summary": "Create Monitor User Owner",
        "description": "Endpoint to create a new Monitor User Owner",
        "tags": [
          "Monitor User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-owner-user/{id}": {
      "post": {
        "operationId": "getMonitorOwnerUser",
        "summary": "Get Monitor User Owner",
        "description": "Endpoint to retrieve a single Monitor User Owner by ID",
        "tags": [
          "Monitor User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorOwnerUser",
        "summary": "Update Monitor User Owner",
        "description": "Endpoint to update an existing Monitor User Owner",
        "tags": [
          "Monitor User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorOwnerUser",
        "summary": "Delete Monitor User Owner",
        "description": "Endpoint to delete a Monitor User Owner",
        "tags": [
          "Monitor User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-team/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceOwnerTeam",
        "summary": "List Scheduled Maintenance Team Owner",
        "description": "Endpoint to list all Scheduled Maintenance Team Owner items",
        "tags": [
          "Scheduled Maintenance Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-team/count": {
      "post": {
        "operationId": "countScheduledMaintenanceOwnerTeam",
        "summary": "Count Scheduled Maintenance Team Owner",
        "description": "Endpoint to count Scheduled Maintenance Team Owner items",
        "tags": [
          "Scheduled Maintenance Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-team": {
      "post": {
        "operationId": "createScheduledMaintenanceOwnerTeam",
        "summary": "Create Scheduled Maintenance Team Owner",
        "description": "Endpoint to create a new Scheduled Maintenance Team Owner",
        "tags": [
          "Scheduled Maintenance Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-team/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceOwnerTeam",
        "summary": "Get Scheduled Maintenance Team Owner",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Team Owner by ID",
        "tags": [
          "Scheduled Maintenance Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceOwnerTeam",
        "summary": "Update Scheduled Maintenance Team Owner",
        "description": "Endpoint to update an existing Scheduled Maintenance Team Owner",
        "tags": [
          "Scheduled Maintenance Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceOwnerTeam",
        "summary": "Delete Scheduled Maintenance Team Owner",
        "description": "Endpoint to delete a Scheduled Maintenance Team Owner",
        "tags": [
          "Scheduled Maintenance Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-user/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceOwnerUser",
        "summary": "List Scheduled Maintenance User Owner",
        "description": "Endpoint to list all Scheduled Maintenance User Owner items",
        "tags": [
          "Scheduled Maintenance User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-user/count": {
      "post": {
        "operationId": "countScheduledMaintenanceOwnerUser",
        "summary": "Count Scheduled Maintenance User Owner",
        "description": "Endpoint to count Scheduled Maintenance User Owner items",
        "tags": [
          "Scheduled Maintenance User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-user": {
      "post": {
        "operationId": "createScheduledMaintenanceOwnerUser",
        "summary": "Create Scheduled Maintenance User Owner",
        "description": "Endpoint to create a new Scheduled Maintenance User Owner",
        "tags": [
          "Scheduled Maintenance User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-owner-user/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceOwnerUser",
        "summary": "Get Scheduled Maintenance User Owner",
        "description": "Endpoint to retrieve a single Scheduled Maintenance User Owner by ID",
        "tags": [
          "Scheduled Maintenance User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceOwnerUser",
        "summary": "Update Scheduled Maintenance User Owner",
        "description": "Endpoint to update an existing Scheduled Maintenance User Owner",
        "tags": [
          "Scheduled Maintenance User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceOwnerUser",
        "summary": "Delete Scheduled Maintenance User Owner",
        "description": "Endpoint to delete a Scheduled Maintenance User Owner",
        "tags": [
          "Scheduled Maintenance User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-team/get-list": {
      "post": {
        "operationId": "listStatusPageOwnerTeam",
        "summary": "List Status Page Team Owner",
        "description": "Endpoint to list all Status Page Team Owner items",
        "tags": [
          "Status Page Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-team/count": {
      "post": {
        "operationId": "countStatusPageOwnerTeam",
        "summary": "Count Status Page Team Owner",
        "description": "Endpoint to count Status Page Team Owner items",
        "tags": [
          "Status Page Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-team": {
      "post": {
        "operationId": "createStatusPageOwnerTeam",
        "summary": "Create Status Page Team Owner",
        "description": "Endpoint to create a new Status Page Team Owner",
        "tags": [
          "Status Page Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-team/{id}": {
      "post": {
        "operationId": "getStatusPageOwnerTeam",
        "summary": "Get Status Page Team Owner",
        "description": "Endpoint to retrieve a single Status Page Team Owner by ID",
        "tags": [
          "Status Page Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageOwnerTeam",
        "summary": "Update Status Page Team Owner",
        "description": "Endpoint to update an existing Status Page Team Owner",
        "tags": [
          "Status Page Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageOwnerTeam",
        "summary": "Delete Status Page Team Owner",
        "description": "Endpoint to delete a Status Page Team Owner",
        "tags": [
          "Status Page Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-user/get-list": {
      "post": {
        "operationId": "listStatusPageOwnerUser",
        "summary": "List Status Page User Owner",
        "description": "Endpoint to list all Status Page User Owner items",
        "tags": [
          "Status Page User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StatusPageOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-user/count": {
      "post": {
        "operationId": "countStatusPageOwnerUser",
        "summary": "Count Status Page User Owner",
        "description": "Endpoint to count Status Page User Owner items",
        "tags": [
          "Status Page User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-user": {
      "post": {
        "operationId": "createStatusPageOwnerUser",
        "summary": "Create Status Page User Owner",
        "description": "Endpoint to create a new Status Page User Owner",
        "tags": [
          "Status Page User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/status-page-owner-user/{id}": {
      "post": {
        "operationId": "getStatusPageOwnerUser",
        "summary": "Get Status Page User Owner",
        "description": "Endpoint to retrieve a single Status Page User Owner by ID",
        "tags": [
          "Status Page User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateStatusPageOwnerUser",
        "summary": "Update Status Page User Owner",
        "description": "Endpoint to update an existing Status Page User Owner",
        "tags": [
          "Status Page User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/StatusPageOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/StatusPageOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteStatusPageOwnerUser",
        "summary": "Delete Status Page User Owner",
        "description": "Endpoint to delete a Status Page User Owner",
        "tags": [
          "Status Page User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Status Page User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/sms-log/get-list": {
      "post": {
        "operationId": "listSmsLog",
        "summary": "List SMS Log",
        "description": "Endpoint to list all SMS Log items",
        "tags": [
          "SMS Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/SmsLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/SmsLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/SmsLogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/sms-log/count": {
      "post": {
        "operationId": "countSmsLog",
        "summary": "Count SMS Log",
        "description": "Endpoint to count SMS Log items",
        "tags": [
          "SMS Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/SmsLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/sms-log/{id}": {
      "post": {
        "operationId": "getSmsLog",
        "summary": "Get SMS Log",
        "description": "Endpoint to retrieve a single SMS Log by ID",
        "tags": [
          "SMS Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the SMS Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/SmsLogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SmsLog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/call-log/get-list": {
      "post": {
        "operationId": "listCallLog",
        "summary": "List Call Log",
        "description": "Endpoint to list all Call Log items",
        "tags": [
          "Call Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CallLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CallLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/CallLogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CallLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/call-log/count": {
      "post": {
        "operationId": "countCallLog",
        "summary": "Count Call Log",
        "description": "Endpoint to count Call Log items",
        "tags": [
          "Call Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CallLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/call-log/{id}": {
      "post": {
        "operationId": "getCallLog",
        "summary": "Get Call Log",
        "description": "Endpoint to retrieve a single Call Log by ID",
        "tags": [
          "Call Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Call Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/CallLogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CallLog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/email-log/get-list": {
      "post": {
        "operationId": "listEmailLog",
        "summary": "List Email Log",
        "description": "Endpoint to list all Email Log items",
        "tags": [
          "Email Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/EmailLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/EmailLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/EmailLogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/email-log/count": {
      "post": {
        "operationId": "countEmailLog",
        "summary": "Count Email Log",
        "description": "Endpoint to count Email Log items",
        "tags": [
          "Email Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/EmailLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/email-log/{id}": {
      "post": {
        "operationId": "getEmailLog",
        "summary": "Get Email Log",
        "description": "Endpoint to retrieve a single Email Log by ID",
        "tags": [
          "Email Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Email Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/EmailLogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EmailLog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/user-notification-log/get-list": {
      "post": {
        "operationId": "listUserOnCallLog",
        "summary": "List User Notification Log",
        "description": "Endpoint to list all User Notification Log items",
        "tags": [
          "User Notification Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserOnCallLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/UserOnCallLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/UserOnCallLogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserOnCallLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/user-notification-log/count": {
      "post": {
        "operationId": "countUserOnCallLog",
        "summary": "Count User Notification Log",
        "description": "Endpoint to count User Notification Log items",
        "tags": [
          "User Notification Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserOnCallLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/user-notification-log-timeline/get-list": {
      "post": {
        "operationId": "listUserOnCallLogTimeline",
        "summary": "List User On-Call Log Timeline",
        "description": "Endpoint to list all User On-Call Log Timeline items",
        "tags": [
          "User On-Call Log Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserOnCallLogTimelineQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/UserOnCallLogTimelineSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/UserOnCallLogTimelineSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserOnCallLogTimeline"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/user-notification-log-timeline/count": {
      "post": {
        "operationId": "countUserOnCallLogTimeline",
        "summary": "Count User On-Call Log Timeline",
        "description": "Endpoint to count User On-Call Log Timeline items",
        "tags": [
          "User On-Call Log Timeline"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserOnCallLogTimelineQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceTemplate",
        "summary": "List Scheduled Maintenance Template",
        "description": "Endpoint to list all Scheduled Maintenance Template items",
        "tags": [
          "Scheduled Maintenance Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceTemplate"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template/count": {
      "post": {
        "operationId": "countScheduledMaintenanceTemplate",
        "summary": "Count Scheduled Maintenance Template",
        "description": "Endpoint to count Scheduled Maintenance Template items",
        "tags": [
          "Scheduled Maintenance Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template": {
      "post": {
        "operationId": "createScheduledMaintenanceTemplate",
        "summary": "Create Scheduled Maintenance Template",
        "description": "Endpoint to create a new Scheduled Maintenance Template",
        "tags": [
          "Scheduled Maintenance Template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceTemplate",
        "summary": "Get Scheduled Maintenance Template",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Template by ID",
        "tags": [
          "Scheduled Maintenance Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceTemplate",
        "summary": "Update Scheduled Maintenance Template",
        "description": "Endpoint to update an existing Scheduled Maintenance Template",
        "tags": [
          "Scheduled Maintenance Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceTemplate",
        "summary": "Delete Scheduled Maintenance Template",
        "description": "Endpoint to delete a Scheduled Maintenance Template",
        "tags": [
          "Scheduled Maintenance Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template-owner-team/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceTemplateOwnerTeam",
        "summary": "List Scheduled Maintenance Template Team Owner",
        "description": "Endpoint to list all Scheduled Maintenance Template Team Owner items",
        "tags": [
          "Scheduled Maintenance Template Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template-owner-team/count": {
      "post": {
        "operationId": "countScheduledMaintenanceTemplateOwnerTeam",
        "summary": "Count Scheduled Maintenance Template Team Owner",
        "description": "Endpoint to count Scheduled Maintenance Template Team Owner items",
        "tags": [
          "Scheduled Maintenance Template Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template-owner-team": {
      "post": {
        "operationId": "createScheduledMaintenanceTemplateOwnerTeam",
        "summary": "Create Scheduled Maintenance Template Team Owner",
        "description": "Endpoint to create a new Scheduled Maintenance Template Team Owner",
        "tags": [
          "Scheduled Maintenance Template Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template-owner-team/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceTemplateOwnerTeam",
        "summary": "Get Scheduled Maintenance Template Team Owner",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Template Team Owner by ID",
        "tags": [
          "Scheduled Maintenance Template Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceTemplateOwnerTeam",
        "summary": "Update Scheduled Maintenance Template Team Owner",
        "description": "Endpoint to update an existing Scheduled Maintenance Template Team Owner",
        "tags": [
          "Scheduled Maintenance Template Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceTemplateOwnerTeam",
        "summary": "Delete Scheduled Maintenance Template Team Owner",
        "description": "Endpoint to delete a Scheduled Maintenance Template Team Owner",
        "tags": [
          "Scheduled Maintenance Template Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template--owner-user/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceTemplateOwnerUser",
        "summary": "List Scheduled Maintenance Template User Owner",
        "description": "Endpoint to list all Scheduled Maintenance Template User Owner items",
        "tags": [
          "Scheduled Maintenance Template User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template--owner-user/count": {
      "post": {
        "operationId": "countScheduledMaintenanceTemplateOwnerUser",
        "summary": "Count Scheduled Maintenance Template User Owner",
        "description": "Endpoint to count Scheduled Maintenance Template User Owner items",
        "tags": [
          "Scheduled Maintenance Template User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template--owner-user": {
      "post": {
        "operationId": "createScheduledMaintenanceTemplateOwnerUser",
        "summary": "Create Scheduled Maintenance Template User Owner",
        "description": "Endpoint to create a new Scheduled Maintenance Template User Owner",
        "tags": [
          "Scheduled Maintenance Template User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-template--owner-user/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceTemplateOwnerUser",
        "summary": "Get Scheduled Maintenance Template User Owner",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Template User Owner by ID",
        "tags": [
          "Scheduled Maintenance Template User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceTemplateOwnerUser",
        "summary": "Update Scheduled Maintenance Template User Owner",
        "description": "Endpoint to update an existing Scheduled Maintenance Template User Owner",
        "tags": [
          "Scheduled Maintenance Template User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceTemplateOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceTemplateOwnerUser",
        "summary": "Delete Scheduled Maintenance Template User Owner",
        "description": "Endpoint to delete a Scheduled Maintenance Template User Owner",
        "tags": [
          "Scheduled Maintenance Template User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Template User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-note-template/get-list": {
      "post": {
        "operationId": "listScheduledMaintenanceNoteTemplate",
        "summary": "List Scheduled Maintenance Note Template",
        "description": "Endpoint to list all Scheduled Maintenance Note Template items",
        "tags": [
          "Scheduled Maintenance Note Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplate"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-note-template/count": {
      "post": {
        "operationId": "countScheduledMaintenanceNoteTemplate",
        "summary": "Count Scheduled Maintenance Note Template",
        "description": "Endpoint to count Scheduled Maintenance Note Template items",
        "tags": [
          "Scheduled Maintenance Note Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-note-template": {
      "post": {
        "operationId": "createScheduledMaintenanceNoteTemplate",
        "summary": "Create Scheduled Maintenance Note Template",
        "description": "Endpoint to create a new Scheduled Maintenance Note Template",
        "tags": [
          "Scheduled Maintenance Note Template"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/scheduled-maintenance-note-template/{id}": {
      "post": {
        "operationId": "getScheduledMaintenanceNoteTemplate",
        "summary": "Get Scheduled Maintenance Note Template",
        "description": "Endpoint to retrieve a single Scheduled Maintenance Note Template by ID",
        "tags": [
          "Scheduled Maintenance Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Note Template to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateScheduledMaintenanceNoteTemplate",
        "summary": "Update Scheduled Maintenance Note Template",
        "description": "Endpoint to update an existing Scheduled Maintenance Note Template",
        "tags": [
          "Scheduled Maintenance Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Note Template to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ScheduledMaintenanceNoteTemplateReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteScheduledMaintenanceNoteTemplate",
        "summary": "Delete Scheduled Maintenance Note Template",
        "description": "Endpoint to delete a Scheduled Maintenance Note Template",
        "tags": [
          "Scheduled Maintenance Note Template"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Scheduled Maintenance Note Template to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group/get-list": {
      "post": {
        "operationId": "listMonitorGroup",
        "summary": "List Monitor Group",
        "description": "Endpoint to list all Monitor Group items",
        "tags": [
          "Monitor Group"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorGroupSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorGroup"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group/count": {
      "post": {
        "operationId": "countMonitorGroup",
        "summary": "Count Monitor Group",
        "description": "Endpoint to count Monitor Group items",
        "tags": [
          "Monitor Group"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group": {
      "post": {
        "operationId": "createMonitorGroup",
        "summary": "Create Monitor Group",
        "description": "Endpoint to create a new Monitor Group",
        "tags": [
          "Monitor Group"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group/{id}": {
      "post": {
        "operationId": "getMonitorGroup",
        "summary": "Get Monitor Group",
        "description": "Endpoint to retrieve a single Monitor Group by ID",
        "tags": [
          "Monitor Group"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorGroup",
        "summary": "Update Monitor Group",
        "description": "Endpoint to update an existing Monitor Group",
        "tags": [
          "Monitor Group"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorGroup",
        "summary": "Delete Monitor Group",
        "description": "Endpoint to delete a Monitor Group",
        "tags": [
          "Monitor Group"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-team/get-list": {
      "post": {
        "operationId": "listMonitorGroupOwnerTeam",
        "summary": "List Monitor Group Team Owner",
        "description": "Endpoint to list all Monitor Group Team Owner items",
        "tags": [
          "Monitor Group Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorGroupOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-team/count": {
      "post": {
        "operationId": "countMonitorGroupOwnerTeam",
        "summary": "Count Monitor Group Team Owner",
        "description": "Endpoint to count Monitor Group Team Owner items",
        "tags": [
          "Monitor Group Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-team": {
      "post": {
        "operationId": "createMonitorGroupOwnerTeam",
        "summary": "Create Monitor Group Team Owner",
        "description": "Endpoint to create a new Monitor Group Team Owner",
        "tags": [
          "Monitor Group Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-team/{id}": {
      "post": {
        "operationId": "getMonitorGroupOwnerTeam",
        "summary": "Get Monitor Group Team Owner",
        "description": "Endpoint to retrieve a single Monitor Group Team Owner by ID",
        "tags": [
          "Monitor Group Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorGroupOwnerTeam",
        "summary": "Update Monitor Group Team Owner",
        "description": "Endpoint to update an existing Monitor Group Team Owner",
        "tags": [
          "Monitor Group Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorGroupOwnerTeam",
        "summary": "Delete Monitor Group Team Owner",
        "description": "Endpoint to delete a Monitor Group Team Owner",
        "tags": [
          "Monitor Group Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-user/get-list": {
      "post": {
        "operationId": "listMonitorGroupOwnerUser",
        "summary": "List Monitor Group User Owner",
        "description": "Endpoint to list all Monitor Group User Owner items",
        "tags": [
          "Monitor Group User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorGroupOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-user/count": {
      "post": {
        "operationId": "countMonitorGroupOwnerUser",
        "summary": "Count Monitor Group User Owner",
        "description": "Endpoint to count Monitor Group User Owner items",
        "tags": [
          "Monitor Group User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-user": {
      "post": {
        "operationId": "createMonitorGroupOwnerUser",
        "summary": "Create Monitor Group User Owner",
        "description": "Endpoint to create a new Monitor Group User Owner",
        "tags": [
          "Monitor Group User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-owner-user/{id}": {
      "post": {
        "operationId": "getMonitorGroupOwnerUser",
        "summary": "Get Monitor Group User Owner",
        "description": "Endpoint to retrieve a single Monitor Group User Owner by ID",
        "tags": [
          "Monitor Group User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorGroupOwnerUser",
        "summary": "Update Monitor Group User Owner",
        "description": "Endpoint to update an existing Monitor Group User Owner",
        "tags": [
          "Monitor Group User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorGroupOwnerUser",
        "summary": "Delete Monitor Group User Owner",
        "description": "Endpoint to delete a Monitor Group User Owner",
        "tags": [
          "Monitor Group User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-resource/get-list": {
      "post": {
        "operationId": "listMonitorGroupResource",
        "summary": "List Monitor Group Resource",
        "description": "Endpoint to list all Monitor Group Resource items",
        "tags": [
          "Monitor Group Resource"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupResourceQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupResourceSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorGroupResourceSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorGroupResource"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-resource/count": {
      "post": {
        "operationId": "countMonitorGroupResource",
        "summary": "Count Monitor Group Resource",
        "description": "Endpoint to count Monitor Group Resource items",
        "tags": [
          "Monitor Group Resource"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorGroupResourceQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-resource": {
      "post": {
        "operationId": "createMonitorGroupResource",
        "summary": "Create Monitor Group Resource",
        "description": "Endpoint to create a new Monitor Group Resource",
        "tags": [
          "Monitor Group Resource"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupResourceCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupResourceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupResourceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-group-resource/{id}": {
      "post": {
        "operationId": "getMonitorGroupResource",
        "summary": "Get Monitor Group Resource",
        "description": "Endpoint to retrieve a single Monitor Group Resource by ID",
        "tags": [
          "Monitor Group Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group Resource to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupResourceSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupResource"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorGroupResource",
        "summary": "Update Monitor Group Resource",
        "description": "Endpoint to update an existing Monitor Group Resource",
        "tags": [
          "Monitor Group Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group Resource to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorGroupResourceUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorGroupResourceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorGroupResourceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorGroupResource",
        "summary": "Delete Monitor Group Resource",
        "description": "Endpoint to delete a Monitor Group Resource",
        "tags": [
          "Monitor Group Resource"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Group Resource to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-service/get-list": {
      "post": {
        "operationId": "listTelemetryService",
        "summary": "List Telemetry Service",
        "description": "Endpoint to list all Telemetry Service items",
        "tags": [
          "Telemetry Service"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryServiceQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryServiceSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TelemetryServiceSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TelemetryService"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-service/count": {
      "post": {
        "operationId": "countTelemetryService",
        "summary": "Count Telemetry Service",
        "description": "Endpoint to count Telemetry Service items",
        "tags": [
          "Telemetry Service"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryServiceQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-service": {
      "post": {
        "operationId": "createTelemetryService",
        "summary": "Create Telemetry Service",
        "description": "Endpoint to create a new Telemetry Service",
        "tags": [
          "Telemetry Service"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryServiceCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryServiceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryServiceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-service/{id}": {
      "post": {
        "operationId": "getTelemetryService",
        "summary": "Get Telemetry Service",
        "description": "Endpoint to retrieve a single Telemetry Service by ID",
        "tags": [
          "Telemetry Service"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Service to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TelemetryServiceSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryService"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTelemetryService",
        "summary": "Update Telemetry Service",
        "description": "Endpoint to update an existing Telemetry Service",
        "tags": [
          "Telemetry Service"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Service to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryServiceUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryServiceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryServiceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTelemetryService",
        "summary": "Delete Telemetry Service",
        "description": "Endpoint to delete a Telemetry Service",
        "tags": [
          "Telemetry Service"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Service to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-schedule/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicySchedule",
        "summary": "List On-Call Policy Schedule",
        "description": "Endpoint to list all On-Call Policy Schedule items",
        "tags": [
          "On-Call Policy Schedule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicySchedule"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-schedule/count": {
      "post": {
        "operationId": "countOnCallDutyPolicySchedule",
        "summary": "Count On-Call Policy Schedule",
        "description": "Endpoint to count On-Call Policy Schedule items",
        "tags": [
          "On-Call Policy Schedule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-schedule": {
      "post": {
        "operationId": "createOnCallDutyPolicySchedule",
        "summary": "Create On-Call Policy Schedule",
        "description": "Endpoint to create a new On-Call Policy Schedule",
        "tags": [
          "On-Call Policy Schedule"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-schedule/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicySchedule",
        "summary": "Get On-Call Policy Schedule",
        "description": "Endpoint to retrieve a single On-Call Policy Schedule by ID",
        "tags": [
          "On-Call Policy Schedule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy Schedule to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicySchedule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicySchedule",
        "summary": "Update On-Call Policy Schedule",
        "description": "Endpoint to update an existing On-Call Policy Schedule",
        "tags": [
          "On-Call Policy Schedule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy Schedule to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicySchedule",
        "summary": "Delete On-Call Policy Schedule",
        "description": "Endpoint to delete a On-Call Policy Schedule",
        "tags": [
          "On-Call Policy Schedule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Policy Schedule to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyScheduleLayer",
        "summary": "List On-Call Schedule Layer",
        "description": "Endpoint to list all On-Call Schedule Layer items",
        "tags": [
          "On-Call Schedule Layer"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayer"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyScheduleLayer",
        "summary": "Count On-Call Schedule Layer",
        "description": "Endpoint to count On-Call Schedule Layer items",
        "tags": [
          "On-Call Schedule Layer"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer": {
      "post": {
        "operationId": "createOnCallDutyPolicyScheduleLayer",
        "summary": "Create On-Call Schedule Layer",
        "description": "Endpoint to create a new On-Call Schedule Layer",
        "tags": [
          "On-Call Schedule Layer"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyScheduleLayer",
        "summary": "Get On-Call Schedule Layer",
        "description": "Endpoint to retrieve a single On-Call Schedule Layer by ID",
        "tags": [
          "On-Call Schedule Layer"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Schedule Layer to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyScheduleLayer",
        "summary": "Update On-Call Schedule Layer",
        "description": "Endpoint to update an existing On-Call Schedule Layer",
        "tags": [
          "On-Call Schedule Layer"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Schedule Layer to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyScheduleLayer",
        "summary": "Delete On-Call Schedule Layer",
        "description": "Endpoint to delete a On-Call Schedule Layer",
        "tags": [
          "On-Call Schedule Layer"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Schedule Layer to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer-user/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyScheduleLayerUser",
        "summary": "List On-Call Schedule Layer User",
        "description": "Endpoint to list all On-Call Schedule Layer User items",
        "tags": [
          "On-Call Schedule Layer User"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer-user/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyScheduleLayerUser",
        "summary": "Count On-Call Schedule Layer User",
        "description": "Endpoint to count On-Call Schedule Layer User items",
        "tags": [
          "On-Call Schedule Layer User"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer-user": {
      "post": {
        "operationId": "createOnCallDutyPolicyScheduleLayerUser",
        "summary": "Create On-Call Schedule Layer User",
        "description": "Endpoint to create a new On-Call Schedule Layer User",
        "tags": [
          "On-Call Schedule Layer User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-schedule-layer-user/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyScheduleLayerUser",
        "summary": "Get On-Call Schedule Layer User",
        "description": "Endpoint to retrieve a single On-Call Schedule Layer User by ID",
        "tags": [
          "On-Call Schedule Layer User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Schedule Layer User to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyScheduleLayerUser",
        "summary": "Update On-Call Schedule Layer User",
        "description": "Endpoint to update an existing On-Call Schedule Layer User",
        "tags": [
          "On-Call Schedule Layer User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Schedule Layer User to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyScheduleLayerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyScheduleLayerUser",
        "summary": "Delete On-Call Schedule Layer User",
        "description": "Endpoint to delete a On-Call Schedule Layer User",
        "tags": [
          "On-Call Schedule Layer User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On-Call Schedule Layer User to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-feed/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyFeed",
        "summary": "List On Call Duty Policy Feed",
        "description": "Endpoint to list all On Call Duty Policy Feed items",
        "tags": [
          "On Call Duty Policy Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyFeedQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyFeedSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyFeedSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyFeed"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-feed/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyFeed",
        "summary": "Count On Call Duty Policy Feed",
        "description": "Endpoint to count On Call Duty Policy Feed items",
        "tags": [
          "On Call Duty Policy Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyFeedQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-feed": {
      "post": {
        "operationId": "createOnCallDutyPolicyFeed",
        "summary": "Create On Call Duty Policy Feed",
        "description": "Endpoint to create a new On Call Duty Policy Feed",
        "tags": [
          "On Call Duty Policy Feed"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyFeedCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyFeedSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyFeedReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-feed/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyFeed",
        "summary": "Get On Call Duty Policy Feed",
        "description": "Endpoint to retrieve a single On Call Duty Policy Feed by ID",
        "tags": [
          "On Call Duty Policy Feed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On Call Duty Policy Feed to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyFeedSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyFeed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-owner-team/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyOwnerTeam",
        "summary": "List OnCallDutyPolicy Team Owner",
        "description": "Endpoint to list all OnCallDutyPolicy Team Owner items",
        "tags": [
          "OnCallDutyPolicy Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-owner-team/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyOwnerTeam",
        "summary": "Count OnCallDutyPolicy Team Owner",
        "description": "Endpoint to count OnCallDutyPolicy Team Owner items",
        "tags": [
          "OnCallDutyPolicy Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-owner-team": {
      "post": {
        "operationId": "createOnCallDutyPolicyOwnerTeam",
        "summary": "Create OnCallDutyPolicy Team Owner",
        "description": "Endpoint to create a new OnCallDutyPolicy Team Owner",
        "tags": [
          "OnCallDutyPolicy Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-owner-team/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyOwnerTeam",
        "summary": "Get OnCallDutyPolicy Team Owner",
        "description": "Endpoint to retrieve a single OnCallDutyPolicy Team Owner by ID",
        "tags": [
          "OnCallDutyPolicy Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the OnCallDutyPolicy Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyOwnerTeam",
        "summary": "Update OnCallDutyPolicy Team Owner",
        "description": "Endpoint to update an existing OnCallDutyPolicy Team Owner",
        "tags": [
          "OnCallDutyPolicy Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the OnCallDutyPolicy Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyOwnerTeam",
        "summary": "Delete OnCallDutyPolicy Team Owner",
        "description": "Endpoint to delete a OnCallDutyPolicy Team Owner",
        "tags": [
          "OnCallDutyPolicy Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the OnCallDutyPolicy Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/onCallDutyPolicy-owner-user/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyOwnerUser",
        "summary": "List OnCallDutyPolicy User Owner",
        "description": "Endpoint to list all OnCallDutyPolicy User Owner items",
        "tags": [
          "OnCallDutyPolicy User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/onCallDutyPolicy-owner-user/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyOwnerUser",
        "summary": "Count OnCallDutyPolicy User Owner",
        "description": "Endpoint to count OnCallDutyPolicy User Owner items",
        "tags": [
          "OnCallDutyPolicy User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/onCallDutyPolicy-owner-user": {
      "post": {
        "operationId": "createOnCallDutyPolicyOwnerUser",
        "summary": "Create OnCallDutyPolicy User Owner",
        "description": "Endpoint to create a new OnCallDutyPolicy User Owner",
        "tags": [
          "OnCallDutyPolicy User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/onCallDutyPolicy-owner-user/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyOwnerUser",
        "summary": "Get OnCallDutyPolicy User Owner",
        "description": "Endpoint to retrieve a single OnCallDutyPolicy User Owner by ID",
        "tags": [
          "OnCallDutyPolicy User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the OnCallDutyPolicy User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyOwnerUser",
        "summary": "Update OnCallDutyPolicy User Owner",
        "description": "Endpoint to update an existing OnCallDutyPolicy User Owner",
        "tags": [
          "OnCallDutyPolicy User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the OnCallDutyPolicy User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyOwnerUser",
        "summary": "Delete OnCallDutyPolicy User Owner",
        "description": "Endpoint to delete a OnCallDutyPolicy User Owner",
        "tags": [
          "OnCallDutyPolicy User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the OnCallDutyPolicy User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-schedule/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyEscalationRuleSchedule",
        "summary": "List Schedule's On-Call Duty Escalation Rule",
        "description": "Endpoint to list all Schedule's On-Call Duty Escalation Rule items",
        "tags": [
          "Schedule's On-Call Duty Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleSchedule"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-schedule/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyEscalationRuleSchedule",
        "summary": "Count Schedule's On-Call Duty Escalation Rule",
        "description": "Endpoint to count Schedule's On-Call Duty Escalation Rule items",
        "tags": [
          "Schedule's On-Call Duty Escalation Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-schedule": {
      "post": {
        "operationId": "createOnCallDutyPolicyEscalationRuleSchedule",
        "summary": "Create Schedule's On-Call Duty Escalation Rule",
        "description": "Endpoint to create a new Schedule's On-Call Duty Escalation Rule",
        "tags": [
          "Schedule's On-Call Duty Escalation Rule"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-esclation-rule-schedule/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyEscalationRuleSchedule",
        "summary": "Get Schedule's On-Call Duty Escalation Rule",
        "description": "Endpoint to retrieve a single Schedule's On-Call Duty Escalation Rule by ID",
        "tags": [
          "Schedule's On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Schedule's On-Call Duty Escalation Rule to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleSchedule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyEscalationRuleSchedule",
        "summary": "Update Schedule's On-Call Duty Escalation Rule",
        "description": "Endpoint to update an existing Schedule's On-Call Duty Escalation Rule",
        "tags": [
          "Schedule's On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Schedule's On-Call Duty Escalation Rule to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyEscalationRuleScheduleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyEscalationRuleSchedule",
        "summary": "Delete Schedule's On-Call Duty Escalation Rule",
        "description": "Endpoint to delete a Schedule's On-Call Duty Escalation Rule",
        "tags": [
          "Schedule's On-Call Duty Escalation Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Schedule's On-Call Duty Escalation Rule to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog/get-list": {
      "post": {
        "operationId": "listServiceCatalog",
        "summary": "List Service in Service Catalog",
        "description": "Endpoint to list all Service in Service Catalog items",
        "tags": [
          "Service in Service Catalog"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ServiceCatalogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceCatalog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog/count": {
      "post": {
        "operationId": "countServiceCatalog",
        "summary": "Count Service in Service Catalog",
        "description": "Endpoint to count Service in Service Catalog items",
        "tags": [
          "Service in Service Catalog"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog": {
      "post": {
        "operationId": "createServiceCatalog",
        "summary": "Create Service in Service Catalog",
        "description": "Endpoint to create a new Service in Service Catalog",
        "tags": [
          "Service in Service Catalog"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog/{id}": {
      "post": {
        "operationId": "getServiceCatalog",
        "summary": "Get Service in Service Catalog",
        "description": "Endpoint to retrieve a single Service in Service Catalog by ID",
        "tags": [
          "Service in Service Catalog"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service in Service Catalog to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateServiceCatalog",
        "summary": "Update Service in Service Catalog",
        "description": "Endpoint to update an existing Service in Service Catalog",
        "tags": [
          "Service in Service Catalog"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service in Service Catalog to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceCatalog",
        "summary": "Delete Service in Service Catalog",
        "description": "Endpoint to delete a Service in Service Catalog",
        "tags": [
          "Service in Service Catalog"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service in Service Catalog to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-team/get-list": {
      "post": {
        "operationId": "listServiceCatalogOwnerTeam",
        "summary": "List Service Catalog Team Owner",
        "description": "Endpoint to list all Service Catalog Team Owner items",
        "tags": [
          "Service Catalog Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceCatalogOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-team/count": {
      "post": {
        "operationId": "countServiceCatalogOwnerTeam",
        "summary": "Count Service Catalog Team Owner",
        "description": "Endpoint to count Service Catalog Team Owner items",
        "tags": [
          "Service Catalog Team Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-team": {
      "post": {
        "operationId": "createServiceCatalogOwnerTeam",
        "summary": "Create Service Catalog Team Owner",
        "description": "Endpoint to create a new Service Catalog Team Owner",
        "tags": [
          "Service Catalog Team Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-team/{id}": {
      "post": {
        "operationId": "getServiceCatalogOwnerTeam",
        "summary": "Get Service Catalog Team Owner",
        "description": "Endpoint to retrieve a single Service Catalog Team Owner by ID",
        "tags": [
          "Service Catalog Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Team Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateServiceCatalogOwnerTeam",
        "summary": "Update Service Catalog Team Owner",
        "description": "Endpoint to update an existing Service Catalog Team Owner",
        "tags": [
          "Service Catalog Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Team Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceCatalogOwnerTeam",
        "summary": "Delete Service Catalog Team Owner",
        "description": "Endpoint to delete a Service Catalog Team Owner",
        "tags": [
          "Service Catalog Team Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Team Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-user/get-list": {
      "post": {
        "operationId": "listServiceCatalogOwnerUser",
        "summary": "List Service Catalog User Owner",
        "description": "Endpoint to list all Service Catalog User Owner items",
        "tags": [
          "Service Catalog User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceCatalogOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-user/count": {
      "post": {
        "operationId": "countServiceCatalogOwnerUser",
        "summary": "Count Service Catalog User Owner",
        "description": "Endpoint to count Service Catalog User Owner items",
        "tags": [
          "Service Catalog User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-user": {
      "post": {
        "operationId": "createServiceCatalogOwnerUser",
        "summary": "Create Service Catalog User Owner",
        "description": "Endpoint to create a new Service Catalog User Owner",
        "tags": [
          "Service Catalog User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-owner-user/{id}": {
      "post": {
        "operationId": "getServiceCatalogOwnerUser",
        "summary": "Get Service Catalog User Owner",
        "description": "Endpoint to retrieve a single Service Catalog User Owner by ID",
        "tags": [
          "Service Catalog User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateServiceCatalogOwnerUser",
        "summary": "Update Service Catalog User Owner",
        "description": "Endpoint to update an existing Service Catalog User Owner",
        "tags": [
          "Service Catalog User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceCatalogOwnerUser",
        "summary": "Delete Service Catalog User Owner",
        "description": "Endpoint to delete a Service Catalog User Owner",
        "tags": [
          "Service Catalog User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-dependency/get-list": {
      "post": {
        "operationId": "listServiceCatlogDependency",
        "summary": "List Service Dependency",
        "description": "Endpoint to list all Service Dependency items",
        "tags": [
          "Service Dependency"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencyQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceCatlogDependency"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-dependency/count": {
      "post": {
        "operationId": "countServiceCatlogDependency",
        "summary": "Count Service Dependency",
        "description": "Endpoint to count Service Dependency items",
        "tags": [
          "Service Dependency"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencyQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-dependency": {
      "post": {
        "operationId": "createServiceCatlogDependency",
        "summary": "Create Service Dependency",
        "description": "Endpoint to create a new Service Dependency",
        "tags": [
          "Service Dependency"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencyCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatlogDependencyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-dependency/{id}": {
      "post": {
        "operationId": "getServiceCatlogDependency",
        "summary": "Get Service Dependency",
        "description": "Endpoint to retrieve a single Service Dependency by ID",
        "tags": [
          "Service Dependency"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Dependency to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatlogDependency"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateServiceCatlogDependency",
        "summary": "Update Service Dependency",
        "description": "Endpoint to update an existing Service Dependency",
        "tags": [
          "Service Dependency"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Dependency to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencyUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatlogDependencySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatlogDependencyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceCatlogDependency",
        "summary": "Delete Service Dependency",
        "description": "Endpoint to delete a Service Dependency",
        "tags": [
          "Service Dependency"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Dependency to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-monitor/get-list": {
      "post": {
        "operationId": "listServiceCatalogMonitor",
        "summary": "List Service Catalog Monitor",
        "description": "Endpoint to list all Service Catalog Monitor items",
        "tags": [
          "Service Catalog Monitor"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceCatalogMonitor"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-monitor/count": {
      "post": {
        "operationId": "countServiceCatalogMonitor",
        "summary": "Count Service Catalog Monitor",
        "description": "Endpoint to count Service Catalog Monitor items",
        "tags": [
          "Service Catalog Monitor"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-monitor": {
      "post": {
        "operationId": "createServiceCatalogMonitor",
        "summary": "Create Service Catalog Monitor",
        "description": "Endpoint to create a new Service Catalog Monitor",
        "tags": [
          "Service Catalog Monitor"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogMonitorReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-monitor/{id}": {
      "post": {
        "operationId": "getServiceCatalogMonitor",
        "summary": "Get Service Catalog Monitor",
        "description": "Endpoint to retrieve a single Service Catalog Monitor by ID",
        "tags": [
          "Service Catalog Monitor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Monitor to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogMonitor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateServiceCatalogMonitor",
        "summary": "Update Service Catalog Monitor",
        "description": "Endpoint to update an existing Service Catalog Monitor",
        "tags": [
          "Service Catalog Monitor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Monitor to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogMonitorSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogMonitorReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceCatalogMonitor",
        "summary": "Delete Service Catalog Monitor",
        "description": "Endpoint to delete a Service Catalog Monitor",
        "tags": [
          "Service Catalog Monitor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Monitor to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-telemetry-service/get-list": {
      "post": {
        "operationId": "listServiceCatalogTelemetryService",
        "summary": "List Service Catalog Telemetry Service",
        "description": "Endpoint to list all Service Catalog Telemetry Service items",
        "tags": [
          "Service Catalog Telemetry Service"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceCatalogTelemetryService"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-telemetry-service/count": {
      "post": {
        "operationId": "countServiceCatalogTelemetryService",
        "summary": "Count Service Catalog Telemetry Service",
        "description": "Endpoint to count Service Catalog Telemetry Service items",
        "tags": [
          "Service Catalog Telemetry Service"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-telemetry-service": {
      "post": {
        "operationId": "createServiceCatalogTelemetryService",
        "summary": "Create Service Catalog Telemetry Service",
        "description": "Endpoint to create a new Service Catalog Telemetry Service",
        "tags": [
          "Service Catalog Telemetry Service"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-catalog-telemetry-service/{id}": {
      "post": {
        "operationId": "getServiceCatalogTelemetryService",
        "summary": "Get Service Catalog Telemetry Service",
        "description": "Endpoint to retrieve a single Service Catalog Telemetry Service by ID",
        "tags": [
          "Service Catalog Telemetry Service"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Telemetry Service to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogTelemetryService"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateServiceCatalogTelemetryService",
        "summary": "Update Service Catalog Telemetry Service",
        "description": "Endpoint to update an existing Service Catalog Telemetry Service",
        "tags": [
          "Service Catalog Telemetry Service"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Telemetry Service to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCatalogTelemetryServiceReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceCatalogTelemetryService",
        "summary": "Delete Service Catalog Telemetry Service",
        "description": "Endpoint to delete a Service Catalog Telemetry Service",
        "tags": [
          "Service Catalog Telemetry Service"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Catalog Telemetry Service to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-code-repository/get-list": {
      "post": {
        "operationId": "listCopilotCodeRepository",
        "summary": "List Code Repository",
        "description": "Endpoint to list all Code Repository items",
        "tags": [
          "Code Repository"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotCodeRepositoryQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotCodeRepositorySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/CopilotCodeRepositorySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CopilotCodeRepository"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-code-repository/count": {
      "post": {
        "operationId": "countCopilotCodeRepository",
        "summary": "Count Code Repository",
        "description": "Endpoint to count Code Repository items",
        "tags": [
          "Code Repository"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotCodeRepositoryQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-code-repository": {
      "post": {
        "operationId": "createCopilotCodeRepository",
        "summary": "Create Code Repository",
        "description": "Endpoint to create a new Code Repository",
        "tags": [
          "Code Repository"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CopilotCodeRepositoryCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotCodeRepositorySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotCodeRepositoryReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-code-repository/{id}": {
      "post": {
        "operationId": "getCopilotCodeRepository",
        "summary": "Get Code Repository",
        "description": "Endpoint to retrieve a single Code Repository by ID",
        "tags": [
          "Code Repository"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Code Repository to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/CopilotCodeRepositorySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotCodeRepository"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateCopilotCodeRepository",
        "summary": "Update Code Repository",
        "description": "Endpoint to update an existing Code Repository",
        "tags": [
          "Code Repository"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Code Repository to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CopilotCodeRepositoryUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotCodeRepositorySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotCodeRepositoryReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteCopilotCodeRepository",
        "summary": "Delete Code Repository",
        "description": "Endpoint to delete a Code Repository",
        "tags": [
          "Code Repository"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Code Repository to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action/get-list": {
      "post": {
        "operationId": "listCopilotAction",
        "summary": "List Copilot Event",
        "description": "Endpoint to list all Copilot Event items",
        "tags": [
          "Copilot Event"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotActionQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/CopilotActionSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CopilotAction"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action/count": {
      "post": {
        "operationId": "countCopilotAction",
        "summary": "Count Copilot Event",
        "description": "Endpoint to count Copilot Event items",
        "tags": [
          "Copilot Event"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotActionQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action": {
      "post": {
        "operationId": "createCopilotAction",
        "summary": "Create Copilot Event",
        "description": "Endpoint to create a new Copilot Event",
        "tags": [
          "Copilot Event"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CopilotActionCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotActionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action/{id}": {
      "post": {
        "operationId": "getCopilotAction",
        "summary": "Get Copilot Event",
        "description": "Endpoint to retrieve a single Copilot Event by ID",
        "tags": [
          "Copilot Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Copilot Event to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotAction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateCopilotAction",
        "summary": "Update Copilot Event",
        "description": "Endpoint to update an existing Copilot Event",
        "tags": [
          "Copilot Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Copilot Event to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CopilotActionUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotActionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteCopilotAction",
        "summary": "Delete Copilot Event",
        "description": "Endpoint to delete a Copilot Event",
        "tags": [
          "Copilot Event"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Copilot Event to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-copilot-code-repository/get-list": {
      "post": {
        "operationId": "listServiceCopilotCodeRepository",
        "summary": "List Service Code Repository for Copilot",
        "description": "Endpoint to list all Service Code Repository for Copilot items",
        "tags": [
          "Service Code Repository for Copilot"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositoryQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositorySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositorySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceCopilotCodeRepository"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-copilot-code-repository/count": {
      "post": {
        "operationId": "countServiceCopilotCodeRepository",
        "summary": "Count Service Code Repository for Copilot",
        "description": "Endpoint to count Service Code Repository for Copilot items",
        "tags": [
          "Service Code Repository for Copilot"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositoryQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-copilot-code-repository": {
      "post": {
        "operationId": "createServiceCopilotCodeRepository",
        "summary": "Create Service Code Repository for Copilot",
        "description": "Endpoint to create a new Service Code Repository for Copilot",
        "tags": [
          "Service Code Repository for Copilot"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositoryCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositorySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCopilotCodeRepositoryReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/service-copilot-code-repository/{id}": {
      "post": {
        "operationId": "getServiceCopilotCodeRepository",
        "summary": "Get Service Code Repository for Copilot",
        "description": "Endpoint to retrieve a single Service Code Repository for Copilot by ID",
        "tags": [
          "Service Code Repository for Copilot"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Code Repository for Copilot to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositorySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCopilotCodeRepository"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateServiceCopilotCodeRepository",
        "summary": "Update Service Code Repository for Copilot",
        "description": "Endpoint to update an existing Service Code Repository for Copilot",
        "tags": [
          "Service Code Repository for Copilot"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Code Repository for Copilot to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositoryUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ServiceCopilotCodeRepositorySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceCopilotCodeRepositoryReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteServiceCopilotCodeRepository",
        "summary": "Delete Service Code Repository for Copilot",
        "description": "Endpoint to delete a Service Code Repository for Copilot",
        "tags": [
          "Service Code Repository for Copilot"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Service Code Repository for Copilot to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-pull-request/get-list": {
      "post": {
        "operationId": "listCopilotPullRequest",
        "summary": "List Copilot Pull Request",
        "description": "Endpoint to list all Copilot Pull Request items",
        "tags": [
          "Copilot Pull Request"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotPullRequestQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotPullRequestSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/CopilotPullRequestSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CopilotPullRequest"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-pull-request/count": {
      "post": {
        "operationId": "countCopilotPullRequest",
        "summary": "Count Copilot Pull Request",
        "description": "Endpoint to count Copilot Pull Request items",
        "tags": [
          "Copilot Pull Request"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotPullRequestQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-pull-request/{id}": {
      "post": {
        "operationId": "getCopilotPullRequest",
        "summary": "Get Copilot Pull Request",
        "description": "Endpoint to retrieve a single Copilot Pull Request by ID",
        "tags": [
          "Copilot Pull Request"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Copilot Pull Request to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/CopilotPullRequestSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotPullRequest"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action-type-prority/get-list": {
      "post": {
        "operationId": "listCopilotActionType",
        "summary": "List Copilot Action Priority",
        "description": "Endpoint to list all Copilot Action Priority items",
        "tags": [
          "Copilot Action Priority"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotActionTypeQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionTypeSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/CopilotActionTypeSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CopilotActionType"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action-type-prority/count": {
      "post": {
        "operationId": "countCopilotActionType",
        "summary": "Count Copilot Action Priority",
        "description": "Endpoint to count Copilot Action Priority items",
        "tags": [
          "Copilot Action Priority"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/CopilotActionTypeQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action-type-prority": {
      "post": {
        "operationId": "createCopilotActionType",
        "summary": "Create Copilot Action Priority",
        "description": "Endpoint to create a new Copilot Action Priority",
        "tags": [
          "Copilot Action Priority"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CopilotActionTypeCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionTypeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotActionTypeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/copilot-action-type-prority/{id}": {
      "post": {
        "operationId": "getCopilotActionType",
        "summary": "Get Copilot Action Priority",
        "description": "Endpoint to retrieve a single Copilot Action Priority by ID",
        "tags": [
          "Copilot Action Priority"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Copilot Action Priority to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionTypeSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotActionType"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateCopilotActionType",
        "summary": "Update Copilot Action Priority",
        "description": "Endpoint to update an existing Copilot Action Priority",
        "tags": [
          "Copilot Action Priority"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Copilot Action Priority to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CopilotActionTypeUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/CopilotActionTypeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CopilotActionTypeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteCopilotActionType",
        "summary": "Delete Copilot Action Priority",
        "description": "Endpoint to delete a Copilot Action Priority",
        "tags": [
          "Copilot Action Priority"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Copilot Action Priority to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-team/get-list": {
      "post": {
        "operationId": "listProbeOwnerTeam",
        "summary": "List Probe Owner Team",
        "description": "Endpoint to list all Probe Owner Team items",
        "tags": [
          "Probe Owner Team"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProbeOwnerTeam"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-team/count": {
      "post": {
        "operationId": "countProbeOwnerTeam",
        "summary": "Count Probe Owner Team",
        "description": "Endpoint to count Probe Owner Team items",
        "tags": [
          "Probe Owner Team"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-team": {
      "post": {
        "operationId": "createProbeOwnerTeam",
        "summary": "Create Probe Owner Team",
        "description": "Endpoint to create a new Probe Owner Team",
        "tags": [
          "Probe Owner Team"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-team/{id}": {
      "post": {
        "operationId": "getProbeOwnerTeam",
        "summary": "Get Probe Owner Team",
        "description": "Endpoint to retrieve a single Probe Owner Team by ID",
        "tags": [
          "Probe Owner Team"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe Owner Team to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeOwnerTeam"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateProbeOwnerTeam",
        "summary": "Update Probe Owner Team",
        "description": "Endpoint to update an existing Probe Owner Team",
        "tags": [
          "Probe Owner Team"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe Owner Team to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerTeamSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeOwnerTeamReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteProbeOwnerTeam",
        "summary": "Delete Probe Owner Team",
        "description": "Endpoint to delete a Probe Owner Team",
        "tags": [
          "Probe Owner Team"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe Owner Team to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-user/get-list": {
      "post": {
        "operationId": "listProbeOwnerUser",
        "summary": "List Probe User Owner",
        "description": "Endpoint to list all Probe User Owner items",
        "tags": [
          "Probe User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProbeOwnerUserQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerUserSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ProbeOwnerUserSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProbeOwnerUser"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-user/count": {
      "post": {
        "operationId": "countProbeOwnerUser",
        "summary": "Count Probe User Owner",
        "description": "Endpoint to count Probe User Owner items",
        "tags": [
          "Probe User Owner"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ProbeOwnerUserQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-user": {
      "post": {
        "operationId": "createProbeOwnerUser",
        "summary": "Create Probe User Owner",
        "description": "Endpoint to create a new Probe User Owner",
        "tags": [
          "Probe User Owner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProbeOwnerUserCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/probe-owner-user/{id}": {
      "post": {
        "operationId": "getProbeOwnerUser",
        "summary": "Get Probe User Owner",
        "description": "Endpoint to retrieve a single Probe User Owner by ID",
        "tags": [
          "Probe User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe User Owner to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerUserSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeOwnerUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateProbeOwnerUser",
        "summary": "Update Probe User Owner",
        "description": "Endpoint to update an existing Probe User Owner",
        "tags": [
          "Probe User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe User Owner to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ProbeOwnerUserUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ProbeOwnerUserSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProbeOwnerUserReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteProbeOwnerUser",
        "summary": "Delete Probe User Owner",
        "description": "Endpoint to delete a Probe User Owner",
        "tags": [
          "Probe User Owner"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Probe User Owner to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/user-two-factor-auth/get-list": {
      "post": {
        "operationId": "listUserTwoFactorAuth",
        "summary": "List Two Factor Auth",
        "description": "Endpoint to list all Two Factor Auth items",
        "tags": [
          "Two Factor Auth"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserTwoFactorAuthQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/UserTwoFactorAuthSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/UserTwoFactorAuthSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserTwoFactorAuth"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/user-two-factor-auth/count": {
      "post": {
        "operationId": "countUserTwoFactorAuth",
        "summary": "Count Two Factor Auth",
        "description": "Endpoint to count Two Factor Auth items",
        "tags": [
          "Two Factor Auth"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/UserTwoFactorAuthQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-ingestion-key/get-list": {
      "post": {
        "operationId": "listTelemetryIngestionKey",
        "summary": "List Telemetry Ingestion Key",
        "description": "Endpoint to list all Telemetry Ingestion Key items",
        "tags": [
          "Telemetry Ingestion Key"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeyQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeySelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeySortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TelemetryIngestionKey"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-ingestion-key/count": {
      "post": {
        "operationId": "countTelemetryIngestionKey",
        "summary": "Count Telemetry Ingestion Key",
        "description": "Endpoint to count Telemetry Ingestion Key items",
        "tags": [
          "Telemetry Ingestion Key"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeyQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-ingestion-key": {
      "post": {
        "operationId": "createTelemetryIngestionKey",
        "summary": "Create Telemetry Ingestion Key",
        "description": "Endpoint to create a new Telemetry Ingestion Key",
        "tags": [
          "Telemetry Ingestion Key"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeyCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryIngestionKeyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-ingestion-key/{id}": {
      "post": {
        "operationId": "getTelemetryIngestionKey",
        "summary": "Get Telemetry Ingestion Key",
        "description": "Endpoint to retrieve a single Telemetry Ingestion Key by ID",
        "tags": [
          "Telemetry Ingestion Key"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Ingestion Key to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeySelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryIngestionKey"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTelemetryIngestionKey",
        "summary": "Update Telemetry Ingestion Key",
        "description": "Endpoint to update an existing Telemetry Ingestion Key",
        "tags": [
          "Telemetry Ingestion Key"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Ingestion Key to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeyUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryIngestionKeySelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryIngestionKeyReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTelemetryIngestionKey",
        "summary": "Delete Telemetry Ingestion Key",
        "description": "Endpoint to delete a Telemetry Ingestion Key",
        "tags": [
          "Telemetry Ingestion Key"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Ingestion Key to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-exception-status/get-list": {
      "post": {
        "operationId": "listTelemetryException",
        "summary": "List Exception",
        "description": "Endpoint to list all Exception items",
        "tags": [
          "Exception"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryExceptionQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryExceptionSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TelemetryExceptionSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TelemetryException"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-exception-status/count": {
      "post": {
        "operationId": "countTelemetryException",
        "summary": "Count Exception",
        "description": "Endpoint to count Exception items",
        "tags": [
          "Exception"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryExceptionQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-exception-status": {
      "post": {
        "operationId": "createTelemetryException",
        "summary": "Create Exception",
        "description": "Endpoint to create a new Exception",
        "tags": [
          "Exception"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryExceptionCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryExceptionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryExceptionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-exception-status/{id}": {
      "post": {
        "operationId": "getTelemetryException",
        "summary": "Get Exception",
        "description": "Endpoint to retrieve a single Exception by ID",
        "tags": [
          "Exception"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Exception to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TelemetryExceptionSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryException"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTelemetryException",
        "summary": "Update Exception",
        "description": "Endpoint to update an existing Exception",
        "tags": [
          "Exception"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Exception to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryExceptionUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryExceptionSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryExceptionReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTelemetryException",
        "summary": "Delete Exception",
        "description": "Endpoint to delete a Exception",
        "tags": [
          "Exception"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Exception to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/table-view/get-list": {
      "post": {
        "operationId": "listTableView",
        "summary": "List Table View",
        "description": "Endpoint to list all Table View items",
        "tags": [
          "Table View"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TableViewQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TableViewSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TableViewSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TableView"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/table-view/count": {
      "post": {
        "operationId": "countTableView",
        "summary": "Count Table View",
        "description": "Endpoint to count Table View items",
        "tags": [
          "Table View"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TableViewQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/table-view": {
      "post": {
        "operationId": "createTableView",
        "summary": "Create Table View",
        "description": "Endpoint to create a new Table View",
        "tags": [
          "Table View"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TableViewCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TableViewSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableViewReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/table-view/{id}": {
      "post": {
        "operationId": "getTableView",
        "summary": "Get Table View",
        "description": "Endpoint to retrieve a single Table View by ID",
        "tags": [
          "Table View"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Table View to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TableViewSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableView"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTableView",
        "summary": "Update Table View",
        "description": "Endpoint to update an existing Table View",
        "tags": [
          "Table View"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Table View to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TableViewUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TableViewSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableViewReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTableView",
        "summary": "Delete Table View",
        "description": "Endpoint to delete a Table View",
        "tags": [
          "Table View"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Table View to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/dashboard/get-list": {
      "post": {
        "operationId": "listDashboard",
        "summary": "List Dashboard",
        "description": "Endpoint to list all Dashboard items",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/DashboardQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/DashboardSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/DashboardSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Dashboard"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/dashboard/count": {
      "post": {
        "operationId": "countDashboard",
        "summary": "Count Dashboard",
        "description": "Endpoint to count Dashboard items",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/DashboardQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/dashboard": {
      "post": {
        "operationId": "createDashboard",
        "summary": "Create Dashboard",
        "description": "Endpoint to create a new Dashboard",
        "tags": [
          "Dashboard"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/DashboardCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/DashboardSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DashboardReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/dashboard/{id}": {
      "post": {
        "operationId": "getDashboard",
        "summary": "Get Dashboard",
        "description": "Endpoint to retrieve a single Dashboard by ID",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Dashboard to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/DashboardSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Dashboard"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateDashboard",
        "summary": "Update Dashboard",
        "description": "Endpoint to update an existing Dashboard",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Dashboard to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/DashboardUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/DashboardSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DashboardReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteDashboard",
        "summary": "Delete Dashboard",
        "description": "Endpoint to delete a Dashboard",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Dashboard to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workspace-notification-rule/get-list": {
      "post": {
        "operationId": "listWorkspaceNotificationRule",
        "summary": "List Workspace Notification Rule",
        "description": "Endpoint to list all Workspace Notification Rule items",
        "tags": [
          "Workspace Notification Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WorkspaceNotificationRule"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workspace-notification-rule/count": {
      "post": {
        "operationId": "countWorkspaceNotificationRule",
        "summary": "Count Workspace Notification Rule",
        "description": "Endpoint to count Workspace Notification Rule items",
        "tags": [
          "Workspace Notification Rule"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workspace-notification-rule": {
      "post": {
        "operationId": "createWorkspaceNotificationRule",
        "summary": "Create Workspace Notification Rule",
        "description": "Endpoint to create a new Workspace Notification Rule",
        "tags": [
          "Workspace Notification Rule"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkspaceNotificationRuleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/workspace-notification-rule/{id}": {
      "post": {
        "operationId": "getWorkspaceNotificationRule",
        "summary": "Get Workspace Notification Rule",
        "description": "Endpoint to retrieve a single Workspace Notification Rule by ID",
        "tags": [
          "Workspace Notification Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workspace Notification Rule to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkspaceNotificationRule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateWorkspaceNotificationRule",
        "summary": "Update Workspace Notification Rule",
        "description": "Endpoint to update an existing Workspace Notification Rule",
        "tags": [
          "Workspace Notification Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workspace Notification Rule to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/WorkspaceNotificationRuleSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkspaceNotificationRuleReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkspaceNotificationRule",
        "summary": "Delete Workspace Notification Rule",
        "description": "Endpoint to delete a Workspace Notification Rule",
        "tags": [
          "Workspace Notification Rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Workspace Notification Rule to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-feed/get-list": {
      "post": {
        "operationId": "listMonitorFeed",
        "summary": "List Monitor Feed",
        "description": "Endpoint to list all Monitor Feed items",
        "tags": [
          "Monitor Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorFeedQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorFeedSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorFeedSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorFeed"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-feed/count": {
      "post": {
        "operationId": "countMonitorFeed",
        "summary": "Count Monitor Feed",
        "description": "Endpoint to count Monitor Feed items",
        "tags": [
          "Monitor Feed"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorFeedQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-feed": {
      "post": {
        "operationId": "createMonitorFeed",
        "summary": "Create Monitor Feed",
        "description": "Endpoint to create a new Monitor Feed",
        "tags": [
          "Monitor Feed"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorFeedCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorFeedSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorFeedReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-feed/{id}": {
      "post": {
        "operationId": "getMonitorFeed",
        "summary": "Get Monitor Feed",
        "description": "Endpoint to retrieve a single Monitor Feed by ID",
        "tags": [
          "Monitor Feed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Feed to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorFeedSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorFeed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metric-type/get-list": {
      "post": {
        "operationId": "listMetricType",
        "summary": "List Metric Type",
        "description": "Endpoint to list all Metric Type items",
        "tags": [
          "Metric Type"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MetricTypeQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MetricTypeSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MetricTypeSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetricType"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metric-type/count": {
      "post": {
        "operationId": "countMetricType",
        "summary": "Count Metric Type",
        "description": "Endpoint to count Metric Type items",
        "tags": [
          "Metric Type"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MetricTypeQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metric-type": {
      "post": {
        "operationId": "createMetricType",
        "summary": "Create Metric Type",
        "description": "Endpoint to create a new Metric Type",
        "tags": [
          "Metric Type"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MetricTypeCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MetricTypeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MetricTypeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metric-type/{id}": {
      "post": {
        "operationId": "getMetricType",
        "summary": "Get Metric Type",
        "description": "Endpoint to retrieve a single Metric Type by ID",
        "tags": [
          "Metric Type"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Metric Type to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MetricTypeSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MetricType"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMetricType",
        "summary": "Update Metric Type",
        "description": "Endpoint to update an existing Metric Type",
        "tags": [
          "Metric Type"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Metric Type to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MetricTypeUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MetricTypeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MetricTypeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMetricType",
        "summary": "Delete Metric Type",
        "description": "Endpoint to delete a Metric Type",
        "tags": [
          "Metric Type"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Metric Type to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-time-log/get-list": {
      "post": {
        "operationId": "listOnCallDutyPolicyTimeLog",
        "summary": "List On Call Time Log",
        "description": "Endpoint to list all On Call Time Log items",
        "tags": [
          "On Call Time Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogSortSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OnCallDutyPolicyTimeLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-time-log/count": {
      "post": {
        "operationId": "countOnCallDutyPolicyTimeLog",
        "summary": "Count On Call Time Log",
        "description": "Endpoint to count On Call Time Log items",
        "tags": [
          "On Call Time Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-time-log": {
      "post": {
        "operationId": "createOnCallDutyPolicyTimeLog",
        "summary": "Create On Call Time Log",
        "description": "Endpoint to create a new On Call Time Log",
        "tags": [
          "On Call Time Log"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/on-call-duty-policy-time-log/{id}": {
      "post": {
        "operationId": "getOnCallDutyPolicyTimeLog",
        "summary": "Get On Call Time Log",
        "description": "Endpoint to retrieve a single On Call Time Log by ID",
        "tags": [
          "On Call Time Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On Call Time Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyTimeLog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateOnCallDutyPolicyTimeLog",
        "summary": "Update On Call Time Log",
        "description": "Endpoint to update an existing On Call Time Log",
        "tags": [
          "On Call Time Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On Call Time Log to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OnCallDutyPolicyTimeLogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteOnCallDutyPolicyTimeLog",
        "summary": "Delete On Call Time Log",
        "description": "Endpoint to delete a On Call Time Log",
        "tags": [
          "On Call Time Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the On Call Time Log to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/logs/get-list": {
      "post": {
        "operationId": "listLogItem",
        "summary": "List Log",
        "description": "Endpoint to list all Log items",
        "tags": [
          "Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/LogItemQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/LogItemSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/LogItemSortSchema"
                  },
                  "groupBy": {
                    "$ref": "#/components/schemas/LogItemGroupBySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LogItem"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/logs/count": {
      "post": {
        "operationId": "countLogItem",
        "summary": "Count Log",
        "description": "Endpoint to count Log items",
        "tags": [
          "Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/LogItemQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/logs": {
      "post": {
        "operationId": "createLogItem",
        "summary": "Create Log",
        "description": "Endpoint to create a new Log",
        "tags": [
          "Log"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/LogItemCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/LogItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LogItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/logs/{id}": {
      "post": {
        "operationId": "getLogItem",
        "summary": "Get Log",
        "description": "Endpoint to retrieve a single Log by ID",
        "tags": [
          "Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/LogItemSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LogItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateLogItem",
        "summary": "Update Log",
        "description": "Endpoint to update an existing Log",
        "tags": [
          "Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Log to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/LogItemUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/LogItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LogItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteLogItem",
        "summary": "Delete Log",
        "description": "Endpoint to delete a Log",
        "tags": [
          "Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Log to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/span/get-list": {
      "post": {
        "operationId": "listSpanItem",
        "summary": "List Span",
        "description": "Endpoint to list all Span items",
        "tags": [
          "Span"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/SpanItemQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/SpanItemSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/SpanItemSortSchema"
                  },
                  "groupBy": {
                    "$ref": "#/components/schemas/SpanItemGroupBySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SpanItem"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/span/count": {
      "post": {
        "operationId": "countSpanItem",
        "summary": "Count Span",
        "description": "Endpoint to count Span items",
        "tags": [
          "Span"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/SpanItemQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/span": {
      "post": {
        "operationId": "createSpanItem",
        "summary": "Create Span",
        "description": "Endpoint to create a new Span",
        "tags": [
          "Span"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/SpanItemCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/SpanItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SpanItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/span/{id}": {
      "post": {
        "operationId": "getSpanItem",
        "summary": "Get Span",
        "description": "Endpoint to retrieve a single Span by ID",
        "tags": [
          "Span"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Span to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/SpanItemSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SpanItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateSpanItem",
        "summary": "Update Span",
        "description": "Endpoint to update an existing Span",
        "tags": [
          "Span"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Span to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/SpanItemUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/SpanItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SpanItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteSpanItem",
        "summary": "Delete Span",
        "description": "Endpoint to delete a Span",
        "tags": [
          "Span"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Span to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metrics/get-list": {
      "post": {
        "operationId": "listMetricItem",
        "summary": "List Metric",
        "description": "Endpoint to list all Metric items",
        "tags": [
          "Metric"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MetricItemQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MetricItemSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MetricItemSortSchema"
                  },
                  "groupBy": {
                    "$ref": "#/components/schemas/MetricItemGroupBySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MetricItem"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metrics/count": {
      "post": {
        "operationId": "countMetricItem",
        "summary": "Count Metric",
        "description": "Endpoint to count Metric items",
        "tags": [
          "Metric"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MetricItemQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metrics": {
      "post": {
        "operationId": "createMetricItem",
        "summary": "Create Metric",
        "description": "Endpoint to create a new Metric",
        "tags": [
          "Metric"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MetricItemCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MetricItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MetricItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/metrics/{id}": {
      "post": {
        "operationId": "getMetricItem",
        "summary": "Get Metric",
        "description": "Endpoint to retrieve a single Metric by ID",
        "tags": [
          "Metric"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Metric to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MetricItemSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MetricItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMetricItem",
        "summary": "Update Metric",
        "description": "Endpoint to update an existing Metric",
        "tags": [
          "Metric"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Metric to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MetricItemUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MetricItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MetricItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMetricItem",
        "summary": "Delete Metric",
        "description": "Endpoint to delete a Metric",
        "tags": [
          "Metric"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Metric to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-attributes/get-list": {
      "post": {
        "operationId": "listTelemetryAttribute",
        "summary": "List Telemetry Attribute",
        "description": "Endpoint to list all Telemetry Attribute items",
        "tags": [
          "Telemetry Attribute"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryAttributeQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryAttributeSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/TelemetryAttributeSortSchema"
                  },
                  "groupBy": {
                    "$ref": "#/components/schemas/TelemetryAttributeGroupBySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TelemetryAttribute"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-attributes/count": {
      "post": {
        "operationId": "countTelemetryAttribute",
        "summary": "Count Telemetry Attribute",
        "description": "Endpoint to count Telemetry Attribute items",
        "tags": [
          "Telemetry Attribute"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/TelemetryAttributeQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-attributes": {
      "post": {
        "operationId": "createTelemetryAttribute",
        "summary": "Create Telemetry Attribute",
        "description": "Endpoint to create a new Telemetry Attribute",
        "tags": [
          "Telemetry Attribute"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryAttributeCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryAttributeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryAttributeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/telemetry-attributes/{id}": {
      "post": {
        "operationId": "getTelemetryAttribute",
        "summary": "Get Telemetry Attribute",
        "description": "Endpoint to retrieve a single Telemetry Attribute by ID",
        "tags": [
          "Telemetry Attribute"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Attribute to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/TelemetryAttributeSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryAttribute"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateTelemetryAttribute",
        "summary": "Update Telemetry Attribute",
        "description": "Endpoint to update an existing Telemetry Attribute",
        "tags": [
          "Telemetry Attribute"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Attribute to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/TelemetryAttributeUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/TelemetryAttributeSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TelemetryAttributeReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteTelemetryAttribute",
        "summary": "Delete Telemetry Attribute",
        "description": "Endpoint to delete a Telemetry Attribute",
        "tags": [
          "Telemetry Attribute"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Telemetry Attribute to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/exceptions/get-list": {
      "post": {
        "operationId": "listExceptionItem",
        "summary": "List Exception Instance",
        "description": "Endpoint to list all Exception Instance items",
        "tags": [
          "Exception Instance"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ExceptionItemQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ExceptionItemSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/ExceptionItemSortSchema"
                  },
                  "groupBy": {
                    "$ref": "#/components/schemas/ExceptionItemGroupBySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExceptionItem"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/exceptions/count": {
      "post": {
        "operationId": "countExceptionItem",
        "summary": "Count Exception Instance",
        "description": "Endpoint to count Exception Instance items",
        "tags": [
          "Exception Instance"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/ExceptionItemQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/exceptions": {
      "post": {
        "operationId": "createExceptionItem",
        "summary": "Create Exception Instance",
        "description": "Endpoint to create a new Exception Instance",
        "tags": [
          "Exception Instance"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ExceptionItemCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ExceptionItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ExceptionItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/exceptions/{id}": {
      "post": {
        "operationId": "getExceptionItem",
        "summary": "Get Exception Instance",
        "description": "Endpoint to retrieve a single Exception Instance by ID",
        "tags": [
          "Exception Instance"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Exception Instance to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/ExceptionItemSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ExceptionItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateExceptionItem",
        "summary": "Update Exception Instance",
        "description": "Endpoint to update an existing Exception Instance",
        "tags": [
          "Exception Instance"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Exception Instance to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ExceptionItemUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/ExceptionItemSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ExceptionItemReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteExceptionItem",
        "summary": "Delete Exception Instance",
        "description": "Endpoint to delete a Exception Instance",
        "tags": [
          "Exception Instance"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Exception Instance to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-log/get-list": {
      "post": {
        "operationId": "listMonitorLog",
        "summary": "List Monitor Log",
        "description": "Endpoint to list all Monitor Log items",
        "tags": [
          "Monitor Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorLogQuerySchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorLogSelectSchema"
                  },
                  "sort": {
                    "$ref": "#/components/schemas/MonitorLogSortSchema"
                  },
                  "groupBy": {
                    "$ref": "#/components/schemas/MonitorLogGroupBySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonitorLog"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-log/count": {
      "post": {
        "operationId": "countMonitorLog",
        "summary": "Count Monitor Log",
        "description": "Endpoint to count Monitor Log items",
        "tags": [
          "Monitor Log"
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/MonitorLogQuerySchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-log": {
      "post": {
        "operationId": "createMonitorLog",
        "summary": "Create Monitor Log",
        "description": "Endpoint to create a new Monitor Log",
        "tags": [
          "Monitor Log"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorLogCreateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorLogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorLogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    },
    "/monitor-log/{id}": {
      "post": {
        "operationId": "getMonitorLog",
        "summary": "Get Monitor Log",
        "description": "Endpoint to retrieve a single Monitor Log by ID",
        "tags": [
          "Monitor Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Log to retrieve"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "select": {
                    "$ref": "#/components/schemas/MonitorLogSelectSchema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorLog"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "put": {
        "operationId": "updateMonitorLog",
        "summary": "Update Monitor Log",
        "description": "Endpoint to update an existing Monitor Log",
        "tags": [
          "Monitor Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Log to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/MonitorLogUpdateSchema"
                  },
                  "select": {
                    "$ref": "#/components/schemas/MonitorLogSelectSchema"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MonitorLogReadSchema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      },
      "delete": {
        "operationId": "deleteMonitorLog",
        "summary": "Delete Monitor Log",
        "description": "Endpoint to delete a Monitor Log",
        "tags": [
          "Monitor Log"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the Monitor Log to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad request. This response indicates that the request was malformed or contained invalid data."
          },
          "401": {
            "description": "Unauthorized. This response indicates that the request requires user authentication."
          },
          "402": {
            "description": "Payment Required. This response indicates that the request requires payment or a valid subscription."
          },
          "403": {
            "description": "Forbidden. This response indicates that the server understood the request, but refuses to authorize it."
          },
          "405": {
            "description": "Project not found. This response indicates that the requested project does not exist or is not accessible."
          },
          "408": {
            "description": "Request Timeout. This response indicates that the server timed out waiting for the request."
          },
          "415": {
            "description": "Unable to reach server. This response indicates that the server is currently unreachable or down."
          },
          "422": {
            "description": "Not authorized. This response indicates that the user does not have permission to access the requested resource."
          },
          "500": {
            "description": "Internal Server Error. This response indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ]
}